RCSTM8 COMPILER V2.44.12.199,  STM8S_UART3        11/13/12  11:07:56

QCW(0x009A3FE0)

RCSTM8 COMPILER V2.44.12.199, COMPILATION OF MODULE STM8S_UART3
OBJECT MODULE PLACED IN Debug\stm8s_uart3.o
COMPILER INVOKED BY: OBJECT(Debug\stm8s_uart3.o) PIN(C:\Raisonance\Ride\inc\STM8) PIN(C:\Raisonance\Ride\inc\ST7) PIN(C:\Raisonance\Ride\inc) WRV(0) STM8(SMALL) DEBUG DGC(data) AUTO OT(7,SIZE) PR(Debug\stm8s_uart3.lst) CD CO SB INITSTATICVAR LAOB PIN(..\..\..\..\libraries\stm8s_stdperiph_driver\inc) PIN(..\..\inc) DEFINE(STM8AF52Ax) 

stmt level    source
   1          /**
   2            ********************************************************************************
   3            * @file    stm8s_uart3.c
   4            * @author  MCD Application Team
   5            * @version V2.1.0
   6            * @date    18-November-2011
   7            * @brief   This file contains all the functions for the uart3 peripheral.
   8            ******************************************************************************
   9            * @attention
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19            ******************************************************************************
  20            */
  21          
  22          /* Includes ------------------------------------------------------------------*/
  23          #include "stm8s_uart3.h"
  24          
  25          /** @addtogroup STM8S_StdPeriph_Driver
  26            * @{
  27            */
  28          /* Private typedef -----------------------------------------------------------*/
  29          /* Private define ------------------------------------------------------------*/
  30          /* Private macro -------------------------------------------------------------*/
  31          /* Private variables ---------------------------------------------------------*/
  32          /* Private function prototypes -----------------------------------------------*/
  33          
  34          /* Private functions ---------------------------------------------------------*/
  35          /* Public functions ----------------------------------------------------------*/
  36          
  37          /** @}
  38            * @addtogroup UART3_Public_Functions
  39            * @{
  40            */
  41          
  42          /**
  43            * @brief  Deinitializes the UART peripheral.
  44            * @param  None
  45            * @retval None
  46            */
  47          
  48          void UART3_DeInit(void)
  49          {
  50   1          /* Clear the Idle Line Detected bit in the status rerister by a read
  51   1             to the UART3_SR register followed by a Read to the UART3_DR register */
  52   1          (void) UART3->SR;
  53   1          (void) UART3->DR;
  54   1      
  55   1          UART3->BRR2 = UART3_BRR2_RESET_VALUE; /*Set UART3_BRR2 to reset value 0x00 */
  56   1          UART3->BRR1 = UART3_BRR1_RESET_VALUE; /*Set UART3_BRR1 to reset value 0x00 */
  57   1      
  58   1          UART3->CR1 = UART3_CR1_RESET_VALUE;  /*Set UART3_CR1 to reset value 0x00  */
  59   1          UART3->CR2 = UART3_CR2_RESET_VALUE;  /*Set UART3_CR2 to reset value 0x00  */
  60   1          UART3->CR3 = UART3_CR3_RESET_VALUE;  /*Set UART3_CR3 to reset value 0x00  */
  61   1          UART3->CR4 = UART3_CR4_RESET_VALUE;  /*Set UART3_CR4 to reset value 0x00  */
  62   1          UART3->CR6 = UART3_CR6_RESET_VALUE;  /*Set UART3_CR6 to reset value 0x00  */
  63   1      
  64   1      }
  65          
  66          /**
  67            * @brief  Initializes the UART3 according to the specified parameters.
  68            * @param  BaudRate: The baudrate.
  69            * @param  WordLength : This parameter can be any of 
  70            *         the @ref UART3_WordLength_TypeDef enumeration.
  71            * @param  StopBits: This parameter can be any of the 
  72            *         @ref UART3_StopBits_TypeDef enumeration.
  73            * @param  Parity: This parameter can be any of the 
  74            *         @ref UART3_Parity_TypeDef enumeration.
  75            * @param  Mode: This parameter can be any of the @ref UART3_Mode_TypeDef values
  76            * @retval None
  77            */
  78          void UART3_Init(uint32_t BaudRate, UART3_WordLength_TypeDef WordLength, 
  79                          UART3_StopBits_TypeDef StopBits, UART3_Parity_TypeDef Parity, 
  80                          UART3_Mode_TypeDef Mode)
  81          {
  82   1          uint8_t BRR2_1 = 0, BRR2_2 = 0;
  83   1          uint32_t BaudRate_Mantissa = 0, BaudRate_Mantissa100 = 0;
  84   1      
  85   1              /* Check the parameters */
  86   1          assert_param(IS_UART3_WORDLENGTH_OK(WordLength));
  87   1          assert_param(IS_UART3_STOPBITS_OK(StopBits));
  88   1          assert_param(IS_UART3_PARITY_OK(Parity));
  89   1          assert_param(IS_UART3_BAUDRATE_OK(BaudRate));
  90   1          assert_param(IS_UART3_MODE_OK((uint8_t)Mode));
  91   1      
  92   1          /* Clear the word length bit */
  93   1          UART3->CR1 &= (uint8_t)(~UART3_CR1_M);     
  94   1          /* Set the word length bit according to UART3_WordLength value */
  95   1          UART3->CR1 |= (uint8_t)WordLength; 
  96   1      
  97   1          /* Clear the STOP bits */
  98   1          UART3->CR3 &= (uint8_t)(~UART3_CR3_STOP);  
  99   1          /* Set the STOP bits number according to UART3_StopBits value  */
 100   1          UART3->CR3 |= (uint8_t)StopBits;  
 101   1      
 102   1          /* Clear the Parity Control bit */
 103   1          UART3->CR1 &= (uint8_t)(~(UART3_CR1_PCEN | UART3_CR1_PS));  
 104   1          /* Set the Parity Control bit to UART3_Parity value */
 105   1          UART3->CR1 |= (uint8_t)Parity;     
 106   1      
 107   1          /* Clear the LSB mantissa of UART3DIV  */
 108   1          UART3->BRR1 &= (uint8_t)(~UART3_BRR1_DIVM);  
 109   1          /* Clear the MSB mantissa of UART3DIV  */
 110   1          UART3->BRR2 &= (uint8_t)(~UART3_BRR2_DIVM);  
 111   1          /* Clear the Fraction bits of UART3DIV */
 112   1          UART3->BRR2 &= (uint8_t)(~UART3_BRR2_DIVF);  
 113   1      
 114   1          /* Set the UART3 BaudRates in BRR1 and BRR2 registers according to UART3_BaudRate value */
 115   1          BaudRate_Mantissa    = ((uint32_t)CLK_GetClockFreq() / (BaudRate << 4));
 116   1          BaudRate_Mantissa100 = (((uint32_t)CLK_GetClockFreq() * 100) / (BaudRate << 4));
 117   1          /* The fraction and MSB mantissa should be loaded in one step in the BRR2 register */
 118   1          /* Set the fraction of UART3DIV  */
 119   1          BRR2_1 = (uint8_t)((uint8_t)(((BaudRate_Mantissa100 - (BaudRate_Mantissa * 100))
 120   1                              << 4) / 100) & (uint8_t)0x0F); 
 121   1          BRR2_2 = (uint8_t)((BaudRate_Mantissa >> 4) & (uint8_t)0xF0);
 122   1      
 123   1          UART3->BRR2 = (uint8_t)(BRR2_1 | BRR2_2);
 124   1          /* Set the LSB mantissa of UART3DIV  */
 125   1          UART3->BRR1 = (uint8_t)BaudRate_Mantissa;           
 126   1      
 127   1          if ((uint8_t)(Mode & UART3_MODE_TX_ENABLE))
 128   1          {
 129   2              /* Set the Transmitter Enable bit */
 130   2              UART3->CR2 |= UART3_CR2_TEN;  
 131   2          }
 132   1          else
 133   1          {
 134   2              /* Clear the Transmitter Disable bit */
 135   2              UART3->CR2 &= (uint8_t)(~UART3_CR2_TEN);  
 136   2          }
 137   1          if ((uint8_t)(Mode & UART3_MODE_RX_ENABLE))
 138   1          {
 139   2              /* Set the Receiver Enable bit */
 140   2              UART3->CR2 |= UART3_CR2_REN;  
 141   2          }
 142   1          else
 143   1          {
 144   2              /* Clear the Receiver Disable bit */
 145   2              UART3->CR2 &= (uint8_t)(~UART3_CR2_REN);  
 146   2          }
 147   1      }
 148          
 149          /**
 150            * @brief  Enable the UART1 peripheral.
 151            * @param  NewState : The new state of the UART Communication.
 152            *         This parameter can be any of the @ref FunctionalState enumeration.
 153            * @retval None
 154            */
 155          void UART3_Cmd(FunctionalState NewState)
 156          {
 157   1      
 158   1          if (NewState != DISABLE)
 159   1          {
 160   2              /* UART3 Enable */
 161   2              UART3->CR1 &= (uint8_t)(~UART3_CR1_UARTD); 
 162   2          }
 163   1          else
 164   1          {
 165   2              /* UART3 Disable */
 166   2              UART3->CR1 |= UART3_CR1_UARTD;  
 167   2          }
 168   1      }
 169          
 170          /**
 171            * @brief  Enables or disables the specified UART3 interrupts.
 172            * @param  UART3_IT specifies the UART3 interrupt sources to be enabled or disabled.
 173            *         This parameter can be one of the following values:
 174            *         - UART3_IT_LBDF:  LIN Break detection interrupt
 175            *         - UART3_IT_LHDF:  LIN Break detection interrupt
 176            *         - UART3_IT_TXE:  Tansmit Data Register empty interrupt
 177            *         - UART3_IT_TC:   Transmission complete interrupt
 178            *         - UART3_IT_RXNE_OR: Receive Data register not empty/Over run error interrupt
 179            *         - UART3_IT_IDLE: Idle line detection interrupt
 180            *         - UART3_IT_PE:   Parity Error interrupt
 181            * @param  NewState new state of the specified UART3 interrupts.
 182            *         This parameter can be: ENABLE or DISABLE.
 183            * @retval None
 184            */
 185          void UART3_ITConfig(UART3_IT_TypeDef UART3_IT, FunctionalState NewState)
 186          {
 187   1          uint8_t uartreg = 0, itpos = 0x00;
 188   1          
 189   1          /* Check the parameters */
 190   1          assert_param(IS_UART3_CONFIG_IT_OK(UART3_IT));
 191   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 192   1      
 193   1          /* Get the UART3 register index */
 194   1          uartreg = (uint8_t)((uint16_t)UART3_IT >> 0x08);
 195   1      
 196   1          /* Get the UART3 IT index */
 197   1          itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART3_IT & (uint8_t)0x0F));
 198   1      
 199   1          if (NewState != DISABLE)
 200   1          {
 201   2              /* Enable the Interrupt bits according to UART3_IT mask */
 202   2              if (uartreg == 0x01)
 203   2              {
 204   3                  UART3->CR1 |= itpos;
 205   3              }
 206   2              else if (uartreg == 0x02)
 207   2              {
 208   3                  UART3->CR2 |= itpos;
 209   3              }
 210   2              else if (uartreg == 0x03)
 211   2              {
 212   3                  UART3->CR4 |= itpos;
 213   3              }
 214   2              else
 215   2              {
 216   3                  UART3->CR6 |= itpos;
 217   3              }
 218   2          }
 219   1          else
 220   1          {
 221   2              /* Disable the interrupt bits according to UART3_IT mask */
 222   2              if (uartreg == 0x01)
 223   2              {
 224   3                  UART3->CR1 &= (uint8_t)(~itpos);
 225   3              }
 226   2              else if (uartreg == 0x02)
 227   2              {
 228   3                  UART3->CR2 &= (uint8_t)(~itpos);
 229   3              }
 230   2              else if (uartreg == 0x03)
 231   2              {
 232   3                  UART3->CR4 &= (uint8_t)(~itpos);
 233   3              }
 234   2              else
 235   2              {
 236   3                  UART3->CR6 &= (uint8_t)(~itpos);
 237   3              }
 238   2          }
 239   1      }
 240          
 241          /**
 242            * @brief  Sets the UART3 LIN Break detection length.
 243            * @param  UART3_LINBreakDetectionLength specifies the LIN break detection length.
 244            *         This parameter can be any of the 
 245            *         @ref UART3_LINBreakDetectionLength_TypeDef values.
 246            * @retval None
 247            */
 248          void UART3_LINBreakDetectionConfig(UART3_LINBreakDetectionLength_TypeDef UART3_LINBreakDetectionLength)
 249          {
 250   1          /* Check the parameters */
 251   1          assert_param(IS_UART3_LINBREAKDETECTIONLENGTH_OK(UART3_LINBreakDetectionLength));
 252   1      
 253   1          if (UART3_LINBreakDetectionLength != UART3_LINBREAKDETECTIONLENGTH_10BITS)
 254   1          {
 255   2              UART3->CR4 |= UART3_CR4_LBDL;
 256   2          }
 257   1          else
 258   1          {
 259   2              UART3->CR4 &= ((uint8_t)~UART3_CR4_LBDL);
 260   2          }
 261   1      }
 262          
 263          /**
 264            * @brief  Configure the UART3 peripheral.
 265            * @param  UART3_Mode specifies the LIN mode.
 266            *         This parameter can be any of the @ref UART3_LinMode_TypeDef values.
 267            * @param  UART3_Autosync specifies the LIN automatic resynchronization mode.
 268            *         This parameter can be any of the @ref UART3_LinAutosync_TypeDef values.
 269            * @param  UART3_DivUp specifies the LIN divider update method.
 270            *         This parameter can be any of the @ref UART3_LinDivUp_TypeDef values.
 271            * @retval None
 272            */
 273          void UART3_LINConfig(UART3_LinMode_TypeDef UART3_Mode,
 274                               UART3_LinAutosync_TypeDef UART3_Autosync, 
 275                               UART3_LinDivUp_TypeDef UART3_DivUp)
 276          {
 277   1          /* Check the parameters */
 278   1          assert_param(IS_UART3_SLAVE_OK(UART3_Mode));
 279   1          assert_param(IS_UART3_AUTOSYNC_OK(UART3_Autosync));
 280   1          assert_param(IS_UART3_DIVUP_OK(UART3_DivUp));
 281   1      
 282   1          if (UART3_Mode != UART3_LIN_MODE_MASTER)
 283   1          {
 284   2              UART3->CR6 |=  UART3_CR6_LSLV;
 285   2          }
 286   1          else
 287   1          {
 288   2              UART3->CR6 &= ((uint8_t)~UART3_CR6_LSLV);
 289   2          }
 290   1      
 291   1          if (UART3_Autosync != UART3_LIN_AUTOSYNC_DISABLE)
 292   1          {
 293   2              UART3->CR6 |=  UART3_CR6_LASE ;
 294   2          }
 295   1          else
 296   1          {
 297   2              UART3->CR6 &= ((uint8_t)~ UART3_CR6_LASE );
 298   2          }
 299   1      
 300   1          if (UART3_DivUp != UART3_LIN_DIVUP_LBRR1)
 301   1          {
 302   2              UART3->CR6 |=  UART3_CR6_LDUM;
 303   2          }
 304   1          else
 305   1          {
 306   2              UART3->CR6 &= ((uint8_t)~ UART3_CR6_LDUM);
 307   2          }
 308   1      }
 309          
 310          /**
 311            * @brief  Enables or disables the UART3 LIN mode.
 312            * @param  NewState is new state of the UART3 LIN mode.
 313            *         This parameter can be ENABLE or DISABLE
 314            * @retval None
 315            */
 316          void UART3_LINCmd(FunctionalState NewState)
 317          {
 318   1          /* Check the parameters */
 319   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 320   1      
 321   1          if (NewState != DISABLE)
 322   1          {
 323   2              /* Enable the LIN mode by setting the LINE bit in the CR2 register */
 324   2              UART3->CR3 |= UART3_CR3_LINEN;
 325   2          }
 326   1          else
 327   1          {
 328   2              /* Disable the LIN mode by clearing the LINE bit in the CR2 register */
 329   2              UART3->CR3 &= ((uint8_t)~UART3_CR3_LINEN);
 330   2          }
 331   1      }
 332          
 333          /**
 334            * @brief  Selects the UART3 WakeUp method.
 335            * @param  UART3_WakeUp: specifies the UART3 wakeup method.
 336            *         This parameter can be any of the @ref UART3_WakeUp_TypeDef values.
 337            * @retval None
 338            */
 339          void UART3_WakeUpConfig(UART3_WakeUp_TypeDef UART3_WakeUp)
 340          {
 341   1          /* Check the parameters */
 342   1          assert_param(IS_UART3_WAKEUP_OK(UART3_WakeUp));
 343   1      
 344   1          UART3->CR1 &= ((uint8_t)~UART3_CR1_WAKE);
 345   1          UART3->CR1 |= (uint8_t)UART3_WakeUp;
 346   1      }
 347          
 348          /**
 349            * @brief  Determines if the UART3 is in mute mode or not.
 350            * @param  NewState: new state of the UART3 mode.
 351            *         This parameter can be ENABLE or DISABLE
 352            * @retval None
 353            */
 354          void UART3_ReceiverWakeUpCmd(FunctionalState NewState)
 355          {
 356   1          /* Check the parameters */
 357   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 358   1      
 359   1          if (NewState != DISABLE)
 360   1          {
 361   2              /* Enable the mute mode UART3 by setting the RWU bit in the CR2 register */
 362   2              UART3->CR2 |= UART3_CR2_RWU;
 363   2          }
 364   1          else
 365   1          {
 366   2              /* Disable the mute mode UART3 by clearing the RWU bit in the CR1 register */
 367   2              UART3->CR2 &= ((uint8_t)~UART3_CR2_RWU);
 368   2          }
 369   1      }
 370          
 371          /**
 372            * @brief  Returns the most recent received data by the UART3 peripheral.
 373            * @param  None
 374            * @retval Received Data
 375            */
 376          uint8_t UART3_ReceiveData8(void)
 377          {
 378   1          return ((uint8_t)UART3->DR);
 379   1      }
 380          
 381          /**
 382            * @brief  Returns the most recent received data by the UART3 peripheral.
 383            * @param  None
 384            * @retval Received Data
 385            */
 386          uint16_t UART3_ReceiveData9(void)
 387          {
 388   1        uint16_t temp = 0;
 389   1      
 390   1       temp = (uint16_t)(((uint16_t)((uint16_t)UART3->CR1 & (uint16_t)UART3_CR1_R8)) << 1);
 391   1        return (uint16_t)((((uint16_t)UART3->DR) | temp) & ((uint16_t)0x01FF));
 392   1      }
 393          
 394          /**
 395            * @brief  Transmits 8 bit data through the UART3 peripheral.
 396            * @param  Data the data to transmit.
 397            * @retval None
 398            */
 399          void UART3_SendData8(uint8_t Data)
 400          {
 401   1          /* Transmit Data */
 402   1          UART3->DR = Data;
 403   1      }
 404          
 405          /**
 406            * @brief  Transmits 9 bit data through the UART3 peripheral.
 407            * @param   Data: the data to transmit.
 408            * @retval None
 409            */
 410          void UART3_SendData9(uint16_t Data)
 411          {
 412   1          /* Clear the transmit data bit 8 */
 413   1          UART3->CR1 &= ((uint8_t)~UART3_CR1_T8);                  
 414   1          
 415   1          /* Write the transmit data bit [8] */
 416   1          UART3->CR1 |= (uint8_t)(((uint8_t)(Data >> 2)) & UART3_CR1_T8); 
 417   1          
 418   1          /* Write the transmit data bit [0:7] */
 419   1          UART3->DR   = (uint8_t)(Data);                    
 420   1      }
 421          
 422          /**
 423            * @brief  Transmits break characters.
 424            * @param  None
 425            * @retval None
 426            */
 427          void UART3_SendBreak(void)
 428          {
 429   1          UART3->CR2 |= UART3_CR2_SBK;
 430   1      }
 431          
 432          /**
 433            * @brief  Sets the address of the UART3 node.
 434            * @param  UART3_Address: Indicates the address of the UART3 node.
 435            * @retval None
 436            */
 437          void UART3_SetAddress(uint8_t UART3_Address)
 438          {
 439   1          /* Check the parameters */
 440   1          assert_param(IS_UART3_ADDRESS_OK(UART3_Address));
 441   1      
 442   1          /* Clear the UART3 address */
 443   1          UART3->CR4 &= ((uint8_t)~UART3_CR4_ADD);
 444   1          /* Set the UART3 address node */
 445   1          UART3->CR4 |= UART3_Address;
 446   1      }
 447          
 448          /**
 449            * @brief  Checks whether the specified UART3 flag is set or not.
 450            * @param  UART3_FLAG specifies the flag to check.
 451            *         This parameter can be any of the @ref UART3_Flag_TypeDef enumeration.
 452            * @retval FlagStatus (SET or RESET)
 453            */
 454          FlagStatus UART3_GetFlagStatus(UART3_Flag_TypeDef UART3_FLAG)
 455          {
 456   1          FlagStatus status = RESET;
 457   1      
 458   1          /* Check parameters */
 459   1          assert_param(IS_UART3_FLAG_OK(UART3_FLAG));
 460   1      
 461   1          /* Check the status of the specified UART3 flag*/
 462   1          if (UART3_FLAG == UART3_FLAG_LBDF)
 463   1          {
 464   2              if ((UART3->CR4 & (uint8_t)UART3_FLAG) != (uint8_t)0x00)
 465   2              {
 466   3                  /* UART3_FLAG is set*/
 467   3                  status = SET;
 468   3              }
 469   2              else
 470   2              {
 471   3                  /* UART3_FLAG is reset*/
 472   3                  status = RESET;
 473   3              }
 474   2          }
 475   1          else if (UART3_FLAG == UART3_FLAG_SBK)
 476   1          {
 477   2              if ((UART3->CR2 & (uint8_t)UART3_FLAG) != (uint8_t)0x00)
 478   2              {
 479   3                  /* UART3_FLAG is set*/
 480   3                  status = SET;
 481   3              }
 482   2              else
 483   2              {
 484   3                  /* UART3_FLAG is reset*/
 485   3                  status = RESET;
 486   3              }
 487   2          }
 488   1          else if ((UART3_FLAG == UART3_FLAG_LHDF) || (UART3_FLAG == UART3_FLAG_LSF))
 489   1          {
 490   2              if ((UART3->CR6 & (uint8_t)UART3_FLAG) != (uint8_t)0x00)
 491   2              {
 492   3                  /* UART3_FLAG is set*/
 493   3                  status = SET;
 494   3              }
 495   2              else
 496   2              {
 497   3                  /* UART3_FLAG is reset*/
 498   3                  status = RESET;
 499   3              }
 500   2          }
 501   1          else
 502   1          {
 503   2              if ((UART3->SR & (uint8_t)UART3_FLAG) != (uint8_t)0x00)
 504   2              {
 505   3                  /* UART3_FLAG is set*/
 506   3                  status = SET;
 507   3              }
 508   2              else
 509   2              {
 510   3                  /* UART3_FLAG is reset*/
 511   3                  status = RESET;
 512   3              }
 513   2          }
 514   1      
 515   1          /* Return the UART3_FLAG status*/
 516   1          return  status;
 517   1      }
 518          /**
 519            * @brief  Clears the UART3 flags.
 520            * @param  UART3_FLAG specifies the flag to clear
 521            *         This parameter can be any combination of the following values:
 522            *         - UART3_FLAG_LBDF: LIN Break detection flag.
 523            *         - UART3_FLAG_LHDF: LIN Header detection flag.
 524            *         - UART3_FLAG_LSF: LIN synchrone field flag.
 525            *         - UART3_FLAG_RXNE: Receive data register not empty flag.
 526            * @note
 527            *         - PE (Parity error), FE (Framing error), NF (Noise error), 
 528            *           OR (OverRun error) and IDLE (Idle line detected) flags are cleared
 529            *           by software sequence: a read operation to UART3_SR register 
 530            *           (UART3_GetFlagStatus())followed by a read operation to UART3_DR 
 531            *           register(UART3_ReceiveData8() or UART3_ReceiveData9()).
 532            *             
 533            *         - RXNE flag can be also cleared by a read to the UART3_DR register
 534            *           (UART3_ReceiveData8()or UART3_ReceiveData9()).
 535            *             
 536            *         - TC flag can be also cleared by software sequence: a read operation
 537            *           to UART3_SR register (UART3_GetFlagStatus()) followed by a write 
 538            *           operation to UART3_DR register (UART3_SendData8() or UART3_SendData9()).
 539            *             
 540            *         - TXE flag is cleared only by a write to the UART3_DR register 
 541            *           (UART3_SendData8() or UART3_SendData9()).
 542            *             
 543            *         - SBK flag is cleared during the stop bit of break.
 544            * @retval None
 545            */
 546          void UART3_ClearFlag(UART3_Flag_TypeDef UART3_FLAG)
 547          {
 548   1          /* Check the parameters */
 549   1          assert_param(IS_UART3_CLEAR_FLAG_OK(UART3_FLAG));
 550   1      
 551   1          /*Clear the Receive Register Not Empty flag */
 552   1          if (UART3_FLAG == UART3_FLAG_RXNE)
 553   1          {
 554   2              UART3->SR = (uint8_t)~(UART3_SR_RXNE);
 555   2          }
 556   1          /*Clear the LIN Break Detection flag */
 557   1          else if (UART3_FLAG == UART3_FLAG_LBDF)
 558   1          {
 559   2              UART3->CR4 &= (uint8_t)(~UART3_CR4_LBDF);
 560   2          }
 561   1          /*Clear the LIN Header Detection Flag */
 562   1          else if (UART3_FLAG == UART3_FLAG_LHDF)
 563   1          {
 564   2              UART3->CR6 &= (uint8_t)(~UART3_CR6_LHDF);
 565   2          }
 566   1          /*Clear the LIN Synch Field flag */
 567   1          else
 568   1          {
 569   2              UART3->CR6 &= (uint8_t)(~UART3_CR6_LSF);
 570   2          }
 571   1      }
 572          
 573          /**
 574            * @brief  Checks whether the specified UART3 interrupt has occurred or not.
 575            * @param  UART3_IT: Specifies the UART3 interrupt pending bit to check.
 576            *         This parameter can be one of the following values:
 577            *         - UART3_IT_LBDF:  LIN Break detection interrupt
 578            *         - UART3_IT_TXE:  Tansmit Data Register empty interrupt
 579            *         - UART3_IT_TC:   Transmission complete interrupt
 580            *         - UART3_IT_RXNE: Receive Data register not empty interrupt
 581            *         - UART3_IT_IDLE: Idle line detection interrupt
 582            *         - UART3_IT_OR:  OverRun Error interrupt
 583            *         - UART3_IT_PE:   Parity Error interrupt
 584            * @retval The state of UART3_IT (SET or RESET).
 585            */
 586          ITStatus UART3_GetITStatus(UART3_IT_TypeDef UART3_IT)
 587          {
 588   1          ITStatus pendingbitstatus = RESET;
 589   1          uint8_t itpos = 0;
 590   1          uint8_t itmask1 = 0;
 591   1          uint8_t itmask2 = 0;
 592   1          uint8_t enablestatus = 0;
 593   1      
 594   1          /* Check parameters */
 595   1          assert_param(IS_UART3_GET_IT_OK(UART3_IT));
 596   1      
 597   1          /* Get the UART3 IT index*/
 598   1          itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART3_IT & (uint8_t)0x0F));
 599   1          /* Get the UART3 IT index*/
 600   1          itmask1 = (uint8_t)((uint8_t)UART3_IT >> (uint8_t)4);
 601   1          /* Set the IT mask*/
 602   1          itmask2 = (uint8_t)((uint8_t)1 << itmask1);
 603   1      
 604   1          /* Check the status of the specified UART3 pending bit*/
 605   1          if (UART3_IT == UART3_IT_PE)
 606   1          {
 607   2              /* Get the UART3_ITPENDINGBIT enable bit status*/
 608   2              enablestatus = (uint8_t)((uint8_t)UART3->CR1 & itmask2);
 609   2              /* Check the status of the specified UART3 interrupt*/
 610   2      
 611   2              if (((UART3->SR & itpos) != (uint8_t)0x00) && enablestatus)
 612   2              {
 613   3                  /* Interrupt occurred*/
 614   3                  pendingbitstatus = SET;
 615   3              }
 616   2              else
 617   2              {
 618   3                  /* Interrupt not occurred*/
 619   3                  pendingbitstatus = RESET;
 620   3              }
 621   2          }
 622   1          else if (UART3_IT == UART3_IT_LBDF)
 623   1          {
 624   2              /* Get the UART3_IT enable bit status*/
 625   2              enablestatus = (uint8_t)((uint8_t)UART3->CR4 & itmask2);
 626   2              /* Check the status of the specified UART3 interrupt*/
 627   2              if (((UART3->CR4 & itpos) != (uint8_t)0x00) && enablestatus)
 628   2              {
 629   3                  /* Interrupt occurred*/
 630   3                  pendingbitstatus = SET;
 631   3              }
 632   2              else
 633   2              {
 634   3                  /* Interrupt not occurred*/
 635   3                  pendingbitstatus = RESET;
 636   3              }
 637   2          }
 638   1          else if (UART3_IT == UART3_IT_LHDF)
 639   1          {
 640   2              /* Get the UART3_IT enable bit status*/
 641   2              enablestatus = (uint8_t)((uint8_t)UART3->CR6 & itmask2);
 642   2              /* Check the status of the specified UART3 interrupt*/
 643   2              if (((UART3->CR6 & itpos) != (uint8_t)0x00) && enablestatus)
 644   2              {
 645   3                  /* Interrupt occurred*/
 646   3                  pendingbitstatus = SET;
 647   3              }
 648   2              else
 649   2              {
 650   3                  /* Interrupt not occurred*/
 651   3                  pendingbitstatus = RESET;
 652   3              }
 653   2          }
 654   1          else
 655   1          {
 656   2              /* Get the UART3_IT enable bit status*/
 657   2              enablestatus = (uint8_t)((uint8_t)UART3->CR2 & itmask2);
 658   2              /* Check the status of the specified UART3 interrupt*/
 659   2              if (((UART3->SR & itpos) != (uint8_t)0x00) && enablestatus)
 660   2              {
 661   3                  /* Interrupt occurred*/
 662   3                  pendingbitstatus = SET;
 663   3              }
 664   2              else
 665   2              {
 666   3                  /* Interrupt not occurred*/
 667   3                  pendingbitstatus = RESET;
 668   3              }
 669   2          }
 670   1          /* Return the UART3_IT status*/
 671   1          return  pendingbitstatus;
 672   1      }
 673          
 674          /**
 675            * @brief  Clears the UART3 pending flags.
 676            * @param  UART3_IT specifies the pending bit to clear
 677            *         This parameter can be one of the following values:
 678            *         - UART3_IT_LBDF:  LIN Break detection interrupt
 679            *         - UART3_IT_LHDF:  LIN Header detection interrupt
 680            *         - UART3_IT_RXNE: Receive Data register not empty interrupt.
 681            *
 682            * @note
 683            *         - PE (Parity error), FE (Framing error), NF (Noise error), 
 684            *           OR (OverRun error) and IDLE (Idle line detected) pending bits are 
 685            *           cleared by software sequence: a read operation to UART3_SR register
 686            *           (UART3_GetITStatus()) followed by a read operation to UART3_DR register 
 687            *           (UART3_ReceiveData8() or UART3_ReceiveData9()).
 688            *             
 689            *         - RXNE pending bit can be also cleared by a read to the UART3_DR register
 690            *           (UART3_ReceiveData8() or UART3_ReceiveData9() ).
 691            *             
 692            *         - TC (Transmit complete) pending bit can be cleared by software 
 693            *           sequence: a read operation to UART3_SR register (UART3_GetITStatus())
 694            *           followed by a write operation to UART3_DR register 
 695            *           (UART3_SendData8()or UART3_SendData9()).
 696            *             
 697            *         - TXE pending bit is cleared only by a write to the UART3_DR register
 698            *           (UART3_SendData8() or UART3_SendData9()).
 699            * @retval None
 700            */
 701          void UART3_ClearITPendingBit(UART3_IT_TypeDef UART3_IT)
 702          {
 703   1          /* Check the parameters */
 704   1          assert_param(IS_UART3_CLEAR_IT_OK(UART3_IT));
 705   1      
 706   1          /*Clear the Receive Register Not Empty pending bit */
 707   1          if (UART3_IT == UART3_IT_RXNE)
 708   1          {
 709   2              UART3->SR = (uint8_t)~(UART3_SR_RXNE);
 710   2          }
 711   1          /*Clear the LIN Break Detection pending bit */
 712   1          else if (UART3_IT == UART3_IT_LBDF)
 713   1          {
 714   2              UART3->CR4 &= (uint8_t)~(UART3_CR4_LBDF);
 715   2          }
 716   1          /*Clear the LIN Header Detection pending bit */
 717   1          else
 718   1          {
 719   2              UART3->CR6 &= (uint8_t)(~UART3_CR6_LHDF);
 720   2          }
 721   1      }
 722          /**
 723            * @}
 724            */
 725            
 726          /**
 727            * @}
 728            */
 729            
 730          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
 731          
RCSTM8 COMPILER V2.44.12.199
ASSEMBLY LISTING OF GENERATED OBJECT CODE

              ; FUNCTION ?UART3_DeInit (BEGIN)
              ; SOURCE LINE # 52 
0000 C65240                            LD     A,05240H
              ; SOURCE LINE # 53 
0003 C65241                            LD     A,05241H
              ; SOURCE LINE # 55 
0006 725F5243                          CLR    05243H
              ; SOURCE LINE # 56 
000A 725F5242                          CLR    05242H
              ; SOURCE LINE # 58 
000E 725F5244                          CLR    05244H
              ; SOURCE LINE # 59 
0012 725F5245                          CLR    05245H
              ; SOURCE LINE # 60 
0016 725F5246                          CLR    05246H
              ; SOURCE LINE # 61 
001A 725F5247                          CLR    05247H
              ; SOURCE LINE # 62 
001E 725F5249                          CLR    05249H
              ; SOURCE LINE # 64 
0022 81                                RET    

              ; FUNCTION ?UART3_DeInit (END)

              ; FUNCTION ?UART3_Init (BEGIN)
              ; SOURCE LINE # 78 
0000 520A                              SUB    SP,#00AH
              ; SOURCE LINE # 82 
0002 5F                                CLRW   X
0003 1F01       F                      LDW    (001H,SP),X   ; [ BRR2_1 ]
              ; BX_CX is assigned to BaudRate_Mantissa
              ; SOURCE LINE # 83 
0005 CD0000     F                      CALL   ?C?mv4_null2bc
              ; BX_CX is assigned to BaudRate_Mantissa100
0008 CD0000     F                      CALL   ?C?mv4_null2bc
              ; SOURCE LINE # 86 
000B 1E11       F                      LDW    X,(011H,SP)   ; [ WordLength ]
000D 2711                              JREQ   ?NXT_0007
000F A30010                            CPW    X,#00010H
0012 270C                              JREQ   ?NXT_0007
0014 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0017         ?DATASTART_0009:
0017 56                             M  DB     056H
0018         ?DATAEND_0009:
0018 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
001B CD0000     F                      CALL   ?assert_failed
001E 5B04                              ADD    SP,#004H
0020         ?NXT_0007:
              ; SOURCE LINE # 87 
0020 1E13       F                      LDW    X,(013H,SP)   ; [ StopBits ]
0022 2711                              JREQ   ?NXT_0008
0024 A30020                            CPW    X,#00020H
0027 270C                              JREQ   ?NXT_0008
0029 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
002C         ?DATASTART_0010:
002C 57                             M  DB     057H
002D         ?DATAEND_0010:
002D AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
0030 CD0000     F                      CALL   ?assert_failed
0033 5B04                              ADD    SP,#004H
0035         ?NXT_0008:
              ; SOURCE LINE # 88 
0035 1E15       F                      LDW    X,(015H,SP)   ; [ Parity ]
0037 2716                              JREQ   ?NXT_0009
0039 A30004                            CPW    X,#00004H
003C 2711                              JREQ   ?NXT_0009
003E A30006                            CPW    X,#00006H
0041 270C                              JREQ   ?NXT_0009
0043 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0046         ?DATASTART_0011:
0046 58                             M  DB     058H
0047         ?DATAEND_0011:
0047 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
004A CD0000     F                      CALL   ?assert_failed
004D 5B04                              ADD    SP,#004H
004F         ?NXT_0009:
              ; SOURCE LINE # 89 
004F CD0000     F DNF            M(07)  CALL  ?C?mv4_pg2bc
0052         ?DATASTART_0012:
0052 00                             M  DB     000H
0053 09                             M  DB     009H
0054 89                             M  DB     089H
0055 68                             M  DB     068H
0056         ?DATAEND_0012:
0056 96           DNF                  LDW    X,SP
0057 1C000D     F                      ADDW   X,#0000DH
005A CD0000     F                      CALL   ?C?cpu3232ix
005D 240C                              JRUGE  ?NXT_0010
005F CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0062         ?DATASTART_0013:
0062 59                             M  DB     059H
0063         ?DATAEND_0013:
0063 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
0066 CD0000     F                      CALL   ?assert_failed
0069 5B04                              ADD    SP,#004H
006B         ?NXT_0010:
              ; SOURCE LINE # 90 
006B 7B18       F                      LD     A,(018H,SP)   ; [ Mode + 01H ]
006D A108                              CP     A,#008H
006F 272C                              JREQ   ?NXT_0011
0071 A140                              CP     A,#040H
0073 2728                              JREQ   ?NXT_0011
0075 A104                              CP     A,#004H
0077 2724                              JREQ   ?NXT_0011
0079 A180                              CP     A,#080H
007B 2720                              JREQ   ?NXT_0011
007D A10C                              CP     A,#00CH
007F 271C                              JREQ   ?NXT_0011
0081 A10C                              CP     A,#00CH
0083 2718                              JREQ   ?NXT_0011
0085 A144                              CP     A,#044H
0087 2714                              JREQ   ?NXT_0011
0089 A1C0                              CP     A,#0C0H
008B 2710                              JREQ   ?NXT_0011
008D A188                              CP     A,#088H
008F 270C                              JREQ   ?NXT_0011
0091 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0094         ?DATASTART_0014:
0094 5A                             M  DB     05AH
0095         ?DATAEND_0014:
0095 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
0098 CD0000     F                      CALL   ?assert_failed
009B 5B04                              ADD    SP,#004H
009D         ?NXT_0011:
              ; SOURCE LINE # 93 
009D 72195244                          BRES   05244H,#004H
              ; SOURCE LINE # 95 
00A1 C65244                            LD     A,05244H
00A4 1A12       F                      OR     A,(012H,SP)   ; [ WordLength + 01H ]
00A6 C75244                            LD     05244H,A
              ; SOURCE LINE # 98 
00A9 A6CF                              LD     A,#0CFH
00AB C45246                            AND    A,05246H
00AE C75246                            LD     05246H,A
              ; SOURCE LINE # 100 
00B1 C65246                            LD     A,05246H
00B4 1A14       F                      OR     A,(014H,SP)   ; [ StopBits + 01H ]
00B6 C75246                            LD     05246H,A
              ; SOURCE LINE # 103 
00B9 A6F9                              LD     A,#0F9H
00BB C45244                            AND    A,05244H
00BE C75244                            LD     05244H,A
              ; SOURCE LINE # 105 
00C1 C65244                            LD     A,05244H
00C4 1A16       F                      OR     A,(016H,SP)   ; [ Parity + 01H ]
00C6 C75244                            LD     05244H,A
              ; SOURCE LINE # 108 
00C9 3F03       F                      CLR    ?BH
00CB 5500035242 F                      MOV    05242H,?BH
              ; SOURCE LINE # 110 
00D0 725F5243                          CLR    05243H
              ; SOURCE LINE # 115 
00D4 A60C       F                      LD     A,#00CH
00D6 CD0000     F DNF                  CALL   ?C?mv4_isa2bc
00D9 A604                              LD     A,#004H
00DB CD0000     F                      CALL   ?C?sll328
00DE CD0000     F DNF                  CALL   ?C?mv4_bc2sk
00E1 CD0000     F                      CALL   ?CLK_GetClockFreq
00E4 CD0000     F DNF                  CALL   ?C?divu3232
00E7 A602       F                      LD     A,#002H
00E9 CD0000     F                      CALL   ?C?mv4_bc2isa
              ; SOURCE LINE # 116 
00EC A60C       F                      LD     A,#00CH
00EE CD0000     F DNF                  CALL   ?C?mv4_isa2bc
00F1 A604                              LD     A,#004H
00F3 CD0000     F                      CALL   ?C?sll328
00F6 CD0000     F DNF                  CALL   ?C?mv4_bc2sk
00F9 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
00FC         ?DATASTART_0015:
00FC 64                             M  DB     064H
00FD         ?DATAEND_0015:
00FD CD0000     F                      CALL   ?CLK_GetClockFreq
0100 CD0000     F DNF                  CALL   ?C?muludivu3232
0103 A606       F                      LD     A,#006H
0105 CD0000     F                      CALL   ?C?mv4_bc2isa
              ; SOURCE LINE # 120 
0108 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
010B         ?DATASTART_0016:
010B 64                             M  DB     064H
010C         ?DATAEND_0016:
010C 1E0D       F                      LDW    X,(00DH,SP)   ; [ BaudRate_Mantissa100 + 02H ]
010E 89                                PUSHW  X
010F 1E0D       F                      LDW    X,(00DH,SP)   ; [ BaudRate_Mantissa100 ]
0111 89                                PUSHW  X
0112 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0115         ?DATASTART_0017:
0115 64                             M  DB     064H
0116         ?DATAEND_0017:
0116 96           DNF                  LDW    X,SP
0117 1C000F     F                      ADDW   X,#0000FH
011A CD0000     F DNF                  CALL   ?C?muluix32
011D CD0000     F DNF                  CALL   ?C?sub3232
0120 A604                              LD     A,#004H
0122 CD0000     F                      CALL   ?C?sll328
0125 CD0000     F DNF                  CALL   ?C?divu3232
0128 B606       F                      LD     A,?CL
012A A40F                              AND    A,#00FH
012C 6B01       F                      LD     (001H,SP),A   ; [ BRR2_1 ]
              ; SOURCE LINE # 121 
012E A602       F                      LD     A,#002H
0130 CD0000     F DNF                  CALL   ?C?mv4_isa2bc
0133 A604                              LD     A,#004H
0135 CD0000     F                      CALL   ?C?srl328
0138 B606       F                      LD     A,?CL
013A A4F0                              AND    A,#0F0H
              ; SOURCE LINE # 123 
013C 1A01       F                      OR     A,(001H,SP)   ; [ BRR2_1 ]
013E C75243                            LD     05243H,A
              ; SOURCE LINE # 125 
0141 7B06       F                      LD     A,(006H,SP)   ; [ BaudRate_Mantissa + 03H ]
0143 C75242                            LD     05242H,A
              ; SOURCE LINE # 127 
0146 7B18       F                      LD     A,(018H,SP)   ; [ Mode + 01H ]
0148 A504                              BCP    A,#004H
014A 2706                              JREQ   ?ELSE_0012
              ; SOURCE LINE # 130 
014C 72165245                          BSET   05245H,#003H
0150 2004                              JRA    ?NXT_0012
0152         ?ELSE_0012:
              ; SOURCE LINE # 135 
0152 72175245                          BRES   05245H,#003H
0156         ?NXT_0012:
              ; SOURCE LINE # 137 
0156 7B18       F                      LD     A,(018H,SP)   ; [ Mode + 01H ]
0158 A508                              BCP    A,#008H
015A 2706                              JREQ   ?ELSE_0013
              ; SOURCE LINE # 140 
015C 72145245                          BSET   05245H,#002H
0160 2004                              JRA    ?EPILOG_0001
0162         ?ELSE_0013:
              ; SOURCE LINE # 145 
0162 72155245                          BRES   05245H,#002H
0166         ?EPILOG_0001:
              ; SOURCE LINE # 147 
0166 5B0A                              ADD    SP,#00AH
0168 81                                RET    
              ; BaudRate     unsigned long  (size=4-Alg).  parameter in AUTO
              ; WordLength   (size=2).  parameter in AUTO
              ; StopBits     (size=2).  parameter in AUTO
              ; Parity       (size=2).  parameter in AUTO
              ; Mode         (size=2).  parameter in AUTO
              ; BRR2_1       unsigned char  (size=1). Automatic variable  in AUTO
              ; BRR2_2       unsigned char  (size=1). Automatic variable  in AUTO
              ; BaudRate_Mantissa unsigned long  (size=4-Alg). Automatic variable  in AUTO
              ; BaudRate_Mantissa100 unsigned long  (size=4-Alg). Automatic variable  in AUTO

              ; FUNCTION ?UART3_Init (END)

              ; FUNCTION ?UART3_Cmd (BEGIN)
              ; Register XW is assigned to parameter NewState
              ; SOURCE LINE # 158 
0000 5D                                TNZW   X
0001 2705                              JREQ   ?ELSE_0015
              ; SOURCE LINE # 161 
0003 721B5244                          BRES   05244H,#005H
0007 81                                RET    
0008         ?ELSE_0015:
              ; SOURCE LINE # 166 
0008 721A5244                          BSET   05244H,#005H
              ; SOURCE LINE # 168 
000C 81                                RET    
              ; NewState     (size=2). Register parameter(XW) in PAGE0

              ; FUNCTION ?UART3_Cmd (END)

              ; FUNCTION ?UART3_ITConfig (BEGIN)
              ; Register-parameter UART3_IT (XW) is relocated (AUTO)
              ; SOURCE LINE # 185 
0000 89                                PUSHW  X
0001 89                                PUSHW  X
              ; SOURCE LINE # 190 
0002 AE0100                            LDW    X,#00100H
0005 1303       F                      CPW    X,(003H,SP)   ; [ UART3_IT ]
0007 2736                              JREQ   ?NXT_0025
0009 AE0277                            LDW    X,#00277H
000C 1303       F                      CPW    X,(003H,SP)   ; [ UART3_IT ]
000E 272F                              JREQ   ?NXT_0025
0010 AE0266                            LDW    X,#00266H
0013 1303       F                      CPW    X,(003H,SP)   ; [ UART3_IT ]
0015 2728                              JREQ   ?NXT_0025
0017 AE0205                            LDW    X,#00205H
001A 1303       F                      CPW    X,(003H,SP)   ; [ UART3_IT ]
001C 2721                              JREQ   ?NXT_0025
001E AE0244                            LDW    X,#00244H
0021 1303       F                      CPW    X,(003H,SP)   ; [ UART3_IT ]
0023 271A                              JREQ   ?NXT_0025
0025 AE0412                            LDW    X,#00412H
0028 1303       F                      CPW    X,(003H,SP)   ; [ UART3_IT ]
002A 2713                              JREQ   ?NXT_0025
002C AE0346                            LDW    X,#00346H
002F 1303       F                      CPW    X,(003H,SP)   ; [ UART3_IT ]
0031 270C                              JREQ   ?NXT_0025
0033 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0036         ?DATASTART_0020:
0036 BE                             M  DB     0BEH
0037         ?DATAEND_0020:
0037 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
003A CD0000     F                      CALL   ?assert_failed
003D 5B04                              ADD    SP,#004H
003F         ?NXT_0025:
              ; SOURCE LINE # 191 
003F 1E07       F                      LDW    X,(007H,SP)   ; [ NewState ]
0041 270F                              JREQ   ?NXT_0026
0043 5A                                DECW   X
0044 270C                              JREQ   ?NXT_0026
0046 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0049         ?DATASTART_0021:
0049 BF                             M  DB     0BFH
004A         ?DATAEND_0021:
004A AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
004D CD0000     F                      CALL   ?assert_failed
0050 5B04                              ADD    SP,#004H
0052         ?NXT_0026:
              ; SOURCE LINE # 194 
0052 7B03       F                      LD     A,(003H,SP)   ; [ UART3_IT ]
0054 6B01       F                      LD     (001H,SP),A   ; [ uartreg ]
              ; SOURCE LINE # 197 
0056 5F                                CLRW   X
0057 5C                                INCW   X
0058 7B04       F                      LD     A,(004H,SP)   ; [ UART3_IT + 01H ]
005A A40F                              AND    A,#00FH
005C CD0000     F                      CALL   ?C?sll168
005F 9F                                LD     A,XL
0060 6B02       F                      LD     (002H,SP),A   ; [ itpos ]
              ; SOURCE LINE # 199 
0062 1E07       F                      LDW    X,(007H,SP)   ; [ NewState ]
0064 2739                              JREQ   ?ELSE_0027
              ; SOURCE LINE # 202 
0066 7B01       F                      LD     A,(001H,SP)   ; [ uartreg ]
0068 4A                                DEC    A
0069 260A                              JRNE   ?ELSE_0028
              ; SOURCE LINE # 204 
006B C65244                            LD     A,05244H
006E 1A02       F                      OR     A,(002H,SP)   ; [ itpos ]
0070 C75244                            LD     05244H,A
0073 2065                              JRA    ?EPILOG_0003
0075         ?ELSE_0028:
              ; SOURCE LINE # 206 
0075 A602                              LD     A,#002H
0077 1101       F                      CP     A,(001H,SP)   ; [ uartreg ]
0079 260A                              JRNE   ?ELSE_0029
              ; SOURCE LINE # 208 
007B C65245                            LD     A,05245H
007E 1A02       F                      OR     A,(002H,SP)   ; [ itpos ]
0080 C75245                            LD     05245H,A
0083 2055                              JRA    ?EPILOG_0003
0085         ?ELSE_0029:
              ; SOURCE LINE # 210 
0085 A603                              LD     A,#003H
0087 1101       F                      CP     A,(001H,SP)   ; [ uartreg ]
0089 260A                              JRNE   ?ELSE_0030
              ; SOURCE LINE # 212 
008B C65247                            LD     A,05247H
008E 1A02       F                      OR     A,(002H,SP)   ; [ itpos ]
0090 C75247                            LD     05247H,A
0093 2045                              JRA    ?EPILOG_0003
0095         ?ELSE_0030:
              ; SOURCE LINE # 216 
0095 C65249                            LD     A,05249H
0098 1A02       F                      OR     A,(002H,SP)   ; [ itpos ]
009A C75249                            LD     05249H,A
009D 203B                              JRA    ?EPILOG_0003
009F         ?ELSE_0027:
              ; SOURCE LINE # 222 
009F 7B01       F                      LD     A,(001H,SP)   ; [ uartreg ]
00A1 4A                                DEC    A
00A2 260B                              JRNE   ?ELSE_0031
              ; SOURCE LINE # 224 
00A4 7B02       F                      LD     A,(002H,SP)   ; [ itpos ]
00A6 43                                CPL    A
00A7 C45244                            AND    A,05244H
00AA C75244                            LD     05244H,A
00AD 202B                              JRA    ?EPILOG_0003
00AF         ?ELSE_0031:
              ; SOURCE LINE # 226 
00AF A602                              LD     A,#002H
00B1 1101       F                      CP     A,(001H,SP)   ; [ uartreg ]
00B3 260B                              JRNE   ?ELSE_0032
              ; SOURCE LINE # 228 
00B5 7B02       F                      LD     A,(002H,SP)   ; [ itpos ]
00B7 43                                CPL    A
00B8 C45245                            AND    A,05245H
00BB C75245                            LD     05245H,A
00BE 201A                              JRA    ?EPILOG_0003
00C0         ?ELSE_0032:
              ; SOURCE LINE # 230 
00C0 A603                              LD     A,#003H
00C2 1101       F                      CP     A,(001H,SP)   ; [ uartreg ]
00C4 260B                              JRNE   ?ELSE_0033
              ; SOURCE LINE # 232 
00C6 7B02       F                      LD     A,(002H,SP)   ; [ itpos ]
00C8 43                                CPL    A
00C9 C45247                            AND    A,05247H
00CC C75247                            LD     05247H,A
00CF 2009                              JRA    ?EPILOG_0003
00D1         ?ELSE_0033:
              ; SOURCE LINE # 236 
00D1 7B02       F                      LD     A,(002H,SP)   ; [ itpos ]
00D3 43                                CPL    A
00D4 C45249                            AND    A,05249H
00D7 C75249                            LD     05249H,A
00DA         ?EPILOG_0003:
              ; SOURCE LINE # 239 
00DA 5B04                              ADD    SP,#004H
00DC 81                                RET    
              ; UART3_IT     (size=2).  parameter in AUTO
              ; NewState     (size=2).  parameter in AUTO
              ; uartreg      unsigned char  (size=1). Automatic variable  in AUTO
              ; itpos        unsigned char  (size=1). Automatic variable  in AUTO

              ; FUNCTION ?UART3_ITConfig (END)

              ; FUNCTION ?UART3_LINBreakDetectionConfig (BEGIN)
              ; Register-parameter UART3_LINBreakDetectionLength (XW) is relocated (AUTO)
              ; SOURCE LINE # 248 
0000 89                                PUSHW  X
              ; SOURCE LINE # 251 
0001 5D                                TNZW   X
0002 270F                              JREQ   ?NXT_0036
0004 5A                                DECW   X
0005 270C                              JREQ   ?NXT_0036
0007 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
000A         ?DATASTART_0023:
000A FB                             M  DB     0FBH
000B         ?DATAEND_0023:
000B AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
000E CD0000     F                      CALL   ?assert_failed
0011 5B04                              ADD    SP,#004H
0013         ?NXT_0036:
              ; SOURCE LINE # 253 
0013 1E01       F                      LDW    X,(001H,SP)   ; [ UART3_LINBreakDetectionLength ]
0015 2706                              JREQ   ?ELSE_0037
              ; SOURCE LINE # 255 
0017 721A5247                          BSET   05247H,#005H
001B 2004                              JRA    ?EPILOG_0004
001D         ?ELSE_0037:
              ; SOURCE LINE # 259 
001D 721B5247                          BRES   05247H,#005H
0021         ?EPILOG_0004:
              ; SOURCE LINE # 261 
0021 85                                POPW   X
0022 81                                RET    
              ; UART3_LINBreakDetectionLength (size=2).  parameter in AUTO

              ; FUNCTION ?UART3_LINBreakDetectionConfig (END)

              ; FUNCTION ?UART3_LINConfig (BEGIN)
              ; Register-parameter UART3_Mode (XW) is relocated (AUTO)
              ; SOURCE LINE # 273 
0000 89                                PUSHW  X
              ; SOURCE LINE # 278 
0001 5D                                TNZW   X
0002 2711                              JREQ   ?NXT_0044
0004 5A                                DECW   X
0005 270E                              JREQ   ?NXT_0044
0007 AE0116                            LDW    X,#00116H
000A 89                                PUSHW  X
000B 5F                                CLRW   X
000C 89                                PUSHW  X
000D AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
0010 CD0000     F                      CALL   ?assert_failed
0013 5B04                              ADD    SP,#004H
0015         ?NXT_0044:
              ; SOURCE LINE # 279 
0015 5F                                CLRW   X
0016 5C                                INCW   X
0017 1305       F                      CPW    X,(005H,SP)   ; [ UART3_Autosync ]
0019 2712                              JREQ   ?NXT_0045
001B 1E05       F                      LDW    X,(005H,SP)   ; [ UART3_Autosync ]
001D 270E                              JREQ   ?NXT_0045
001F AE0117                            LDW    X,#00117H
0022 89                                PUSHW  X
0023 5F                                CLRW   X
0024 89                                PUSHW  X
0025 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
0028 CD0000     F                      CALL   ?assert_failed
002B 5B04                              ADD    SP,#004H
002D         ?NXT_0045:
              ; SOURCE LINE # 280 
002D 1E07       F                      LDW    X,(007H,SP)   ; [ UART3_DivUp ]
002F 2711                              JREQ   ?NXT_0046
0031 5A                                DECW   X
0032 270E                              JREQ   ?NXT_0046
0034 AE0118                            LDW    X,#00118H
0037 89                                PUSHW  X
0038 5F                                CLRW   X
0039 89                                PUSHW  X
003A AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
003D CD0000     F                      CALL   ?assert_failed
0040 5B04                              ADD    SP,#004H
0042         ?NXT_0046:
              ; SOURCE LINE # 282 
0042 1E01       F                      LDW    X,(001H,SP)   ; [ UART3_Mode ]
0044 2706                              JREQ   ?ELSE_0047
              ; SOURCE LINE # 284 
0046 721A5249                          BSET   05249H,#005H
004A 2004                              JRA    ?NXT_0047
004C         ?ELSE_0047:
              ; SOURCE LINE # 288 
004C 721B5249                          BRES   05249H,#005H
0050         ?NXT_0047:
              ; SOURCE LINE # 291 
0050 1E05       F                      LDW    X,(005H,SP)   ; [ UART3_Autosync ]
0052 2706                              JREQ   ?ELSE_0048
              ; SOURCE LINE # 293 
0054 72185249                          BSET   05249H,#004H
0058 2004                              JRA    ?NXT_0048
005A         ?ELSE_0048:
              ; SOURCE LINE # 297 
005A 72195249                          BRES   05249H,#004H
005E         ?NXT_0048:
              ; SOURCE LINE # 300 
005E 1E07       F                      LDW    X,(007H,SP)   ; [ UART3_DivUp ]
0060 2706                              JREQ   ?ELSE_0049
              ; SOURCE LINE # 302 
0062 721E5249                          BSET   05249H,#007H
0066 2004                              JRA    ?EPILOG_0005
0068         ?ELSE_0049:
              ; SOURCE LINE # 306 
0068 721F5249                          BRES   05249H,#007H
006C         ?EPILOG_0005:
              ; SOURCE LINE # 308 
006C 85                                POPW   X
006D 81                                RET    
              ; UART3_Mode   (size=2).  parameter in AUTO
              ; UART3_Autosync (size=2).  parameter in AUTO
              ; UART3_DivUp  (size=2).  parameter in AUTO

              ; FUNCTION ?UART3_LINConfig (END)

              ; FUNCTION ?UART3_LINCmd (BEGIN)
              ; Register-parameter NewState (XW) is relocated (AUTO)
              ; SOURCE LINE # 316 
0000 89                                PUSHW  X
              ; SOURCE LINE # 319 
0001 5D                                TNZW   X
0002 2711                              JREQ   ?NXT_0052
0004 5A                                DECW   X
0005 270E                              JREQ   ?NXT_0052
0007 AE013F                            LDW    X,#0013FH
000A 89                                PUSHW  X
000B 5F                                CLRW   X
000C 89                                PUSHW  X
000D AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
0010 CD0000     F                      CALL   ?assert_failed
0013 5B04                              ADD    SP,#004H
0015         ?NXT_0052:
              ; SOURCE LINE # 321 
0015 1E01       F                      LDW    X,(001H,SP)   ; [ NewState ]
0017 2706                              JREQ   ?ELSE_0053
              ; SOURCE LINE # 324 
0019 721C5246                          BSET   05246H,#006H
001D 2004                              JRA    ?EPILOG_0006
001F         ?ELSE_0053:
              ; SOURCE LINE # 329 
001F 721D5246                          BRES   05246H,#006H
0023         ?EPILOG_0006:
              ; SOURCE LINE # 331 
0023 85                                POPW   X
0024 81                                RET    
              ; NewState     (size=2).  parameter in AUTO

              ; FUNCTION ?UART3_LINCmd (END)

              ; FUNCTION ?UART3_WakeUpConfig (BEGIN)
              ; Register-parameter UART3_WakeUp (XW) is relocated (AUTO)
              ; SOURCE LINE # 339 
0000 89                                PUSHW  X
              ; SOURCE LINE # 342 
0001 5D                                TNZW   X
0002 2713                              JREQ   ?NXT_0055
0004 A30008                            CPW    X,#00008H
0007 270E                              JREQ   ?NXT_0055
0009 AE0156                            LDW    X,#00156H
000C 89                                PUSHW  X
000D 5F                                CLRW   X
000E 89                                PUSHW  X
000F AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
0012 CD0000     F                      CALL   ?assert_failed
0015 5B04                              ADD    SP,#004H
0017         ?NXT_0055:
              ; SOURCE LINE # 344 
0017 72175244                          BRES   05244H,#003H
              ; SOURCE LINE # 345 
001B C65244                            LD     A,05244H
001E 1A02       F                      OR     A,(002H,SP)   ; [ UART3_WakeUp + 01H ]
0020 C75244                            LD     05244H,A
              ; SOURCE LINE # 346 
0023 85                                POPW   X
0024 81                                RET    
              ; UART3_WakeUp (size=2).  parameter in AUTO

              ; FUNCTION ?UART3_WakeUpConfig (END)

              ; FUNCTION ?UART3_ReceiverWakeUpCmd (BEGIN)
              ; Register-parameter NewState (XW) is relocated (AUTO)
              ; SOURCE LINE # 354 
0000 89                                PUSHW  X
              ; SOURCE LINE # 357 
0001 5D                                TNZW   X
0002 2711                              JREQ   ?NXT_0058
0004 5A                                DECW   X
0005 270E                              JREQ   ?NXT_0058
0007 AE0165                            LDW    X,#00165H
000A 89                                PUSHW  X
000B 5F                                CLRW   X
000C 89                                PUSHW  X
000D AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
0010 CD0000     F                      CALL   ?assert_failed
0013 5B04                              ADD    SP,#004H
0015         ?NXT_0058:
              ; SOURCE LINE # 359 
0015 1E01       F                      LDW    X,(001H,SP)   ; [ NewState ]
0017 2706                              JREQ   ?ELSE_0059
              ; SOURCE LINE # 362 
0019 72125245                          BSET   05245H,#001H
001D 2004                              JRA    ?EPILOG_0008
001F         ?ELSE_0059:
              ; SOURCE LINE # 367 
001F 72135245                          BRES   05245H,#001H
0023         ?EPILOG_0008:
              ; SOURCE LINE # 369 
0023 85                                POPW   X
0024 81                                RET    
              ; NewState     (size=2).  parameter in AUTO

              ; FUNCTION ?UART3_ReceiverWakeUpCmd (END)

              ; FUNCTION ?UART3_ReceiveData8 (BEGIN)
              ; SOURCE LINE # 378 
0000 C65241                            LD     A,05241H
              ; SOURCE LINE # 379 
0003 81                                RET    

              ; FUNCTION ?UART3_ReceiveData8 (END)

              ; FUNCTION ?UART3_ReceiveData9 (BEGIN)
              ; SOURCE LINE # 388 
0000 5F                                CLRW   X
0001 89                                PUSHW  X
              ; SOURCE LINE # 390 
0002 C65244                            LD     A,05244H
0005 A480                              AND    A,#080H
0007 97                                LD     XL,A
0008 58                                SLAW   X
0009 1F01       F                      LDW    (001H,SP),X   ; [ temp ]
              ; SOURCE LINE # 391 
000B C65241                            LD     A,05241H
000E 1A02       F                      OR     A,(002H,SP)   ; [ temp + 01H ]
0010 97                                LD     XL,A
0011 A601                              LD     A,#001H
0013 1401       F                      AND    A,(001H,SP)   ; [ temp ]
0015 95                                LD     XH,A
              ; SOURCE LINE # 392 
0016 5B02                              ADD    SP,#002H
0018 81                                RET    
              ; temp         unsigned short  (size=2-Alg). Automatic variable  in AUTO

              ; FUNCTION ?UART3_ReceiveData9 (END)

              ; FUNCTION ?UART3_SendData8 (BEGIN)
              ; Register-parameter Data (A) is relocated (AUTO)
              ; SOURCE LINE # 402 
0000 C75241                            LD     05241H,A
              ; SOURCE LINE # 403 
0003 81                                RET    
              ; Data         unsigned char  (size=1).  parameter in AUTO

              ; FUNCTION ?UART3_SendData8 (END)

              ; FUNCTION ?UART3_SendData9 (BEGIN)
              ; Register YW is assigned to parameter Data
              ; SOURCE LINE # 410 
0000 51                                EXGW   X,Y
              ; SOURCE LINE # 413 
0001 721D5244                          BRES   05244H,#006H
              ; SOURCE LINE # 416 
0005 93                                LDW    X,Y
0006 54                                SRLW   X
0007 54                                SRLW   X
0008 9F                                LD     A,XL
0009 A440                              AND    A,#040H
000B CA5244                            OR     A,05244H
000E C75244                            LD     05244H,A
              ; SOURCE LINE # 419 
0011 909F                              LD     A,YL
0013 C75241                            LD     05241H,A
              ; SOURCE LINE # 420 
0016 81                                RET    
              ; Data         unsigned short  (size=2-Alg). Register parameter(XW) in PAGE0

              ; FUNCTION ?UART3_SendData9 (END)

              ; FUNCTION ?UART3_SendBreak (BEGIN)
              ; SOURCE LINE # 429 
0000 72105245                          BSET   05245H,#000H
              ; SOURCE LINE # 430 
0004 81                                RET    

              ; FUNCTION ?UART3_SendBreak (END)

              ; FUNCTION ?UART3_SetAddress (BEGIN)
              ; Register-parameter UART3_Address (A) is relocated (AUTO)
              ; SOURCE LINE # 437 
0000 88                                PUSH   A
              ; SOURCE LINE # 440 
0001 A110                              CP     A,#010H
0003 2F0E                              JRSLT  ?NXT_0061
0005 AE01B8                            LDW    X,#001B8H
0008 89                                PUSHW  X
0009 5F                                CLRW   X
000A 89                                PUSHW  X
000B AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
000E CD0000     F                      CALL   ?assert_failed
0011 5B04                              ADD    SP,#004H
0013         ?NXT_0061:
              ; SOURCE LINE # 443 
0013 A6F0                              LD     A,#0F0H
0015 C45247                            AND    A,05247H
0018 C75247                            LD     05247H,A
              ; SOURCE LINE # 445 
001B C65247                            LD     A,05247H
001E 1A01       F                      OR     A,(001H,SP)   ; [ UART3_Address ]
0020 C75247                            LD     05247H,A
              ; SOURCE LINE # 446 
0023 84                                POP    A
0024 81                                RET    
              ; UART3_Address unsigned char  (size=1).  parameter in AUTO

              ; FUNCTION ?UART3_SetAddress (END)

              ; FUNCTION ?UART3_GetFlagStatus (BEGIN)
              ; Register-parameter UART3_FLAG (XW) is relocated (AUTO)
              ; SOURCE LINE # 454 
0000 89                                PUSHW  X
              ; SOURCE LINE # 456 
0001 5F                                CLRW   X
0002 89                                PUSHW  X
              ; SOURCE LINE # 459 
0003 AE0080                            LDW    X,#00080H
0006 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
0008 2758                              JREQ   ?NXT_0074
000A AE0040                            LDW    X,#00040H
000D 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
000F 2751                              JREQ   ?NXT_0074
0011 AE0020                            LDW    X,#00020H
0014 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
0016 274A                              JREQ   ?NXT_0074
0018 AE0010                            LDW    X,#00010H
001B 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
001D 2743                              JREQ   ?NXT_0074
001F AE0008                            LDW    X,#00008H
0022 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
0024 273C                              JREQ   ?NXT_0074
0026 AE0004                            LDW    X,#00004H
0029 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
002B 2735                              JREQ   ?NXT_0074
002D AE0002                            LDW    X,#00002H
0030 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
0032 272E                              JREQ   ?NXT_0074
0034 5F                                CLRW   X
0035 5C                                INCW   X
0036 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
0038 2728                              JREQ   ?NXT_0074
003A AE0101                            LDW    X,#00101H
003D 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
003F 2721                              JREQ   ?NXT_0074
0041 AE0301                            LDW    X,#00301H
0044 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
0046 271A                              JREQ   ?NXT_0074
0048 5C                                INCW   X
0049 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
004B 2715                              JREQ   ?NXT_0074
004D AE0210                            LDW    X,#00210H
0050 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
0052 270E                              JREQ   ?NXT_0074
0054 AE01CB                            LDW    X,#001CBH
0057 89                                PUSHW  X
0058 5F                                CLRW   X
0059 89                                PUSHW  X
005A AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
005D CD0000     F                      CALL   ?assert_failed
0060 5B04                              ADD    SP,#004H
0062         ?NXT_0074:
              ; SOURCE LINE # 462 
0062 AE0210                            LDW    X,#00210H
0065 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
0067 2611                              JRNE   ?ELSE_0071
              ; SOURCE LINE # 464 
0069 7B04       F                      LD     A,(004H,SP)   ; [ UART3_FLAG + 01H ]
006B 5F                                CLRW   X
006C C55247                            BCP    A,05247H
006F 2705                              JREQ   ?ELSE_0072
              ; SOURCE LINE # 467 
0071 5C                                INCW   X
0072 1F01       F                      LDW    (001H,SP),X   ; [ status ]
0074 2048                              JRA    ?NXT_0075
0076         ?ELSE_0072:
              ; SOURCE LINE # 472 
0076 1F01       F                      LDW    (001H,SP),X   ; [ status ]
0078 2044                              JRA    ?NXT_0075
007A         ?ELSE_0071:
              ; SOURCE LINE # 475 
007A AE0101                            LDW    X,#00101H
007D 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
007F 2611                              JRNE   ?ELSE_0073
              ; SOURCE LINE # 477 
0081 7B04       F                      LD     A,(004H,SP)   ; [ UART3_FLAG + 01H ]
0083 5F                                CLRW   X
0084 C55245                            BCP    A,05245H
0087 2705                              JREQ   ?ELSE_0074
              ; SOURCE LINE # 480 
0089 5C                                INCW   X
008A 1F01       F                      LDW    (001H,SP),X   ; [ status ]
008C 2030                              JRA    ?NXT_0075
008E         ?ELSE_0074:
              ; SOURCE LINE # 485 
008E 1F01       F                      LDW    (001H,SP),X   ; [ status ]
0090 202C                              JRA    ?NXT_0075
0092         ?ELSE_0073:
              ; SOURCE LINE # 488 
0092 AE0302                            LDW    X,#00302H
0095 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
0097 2705                              JREQ   ?LAB_0075
0099 5A                                DECW   X
009A 1303       F                      CPW    X,(003H,SP)   ; [ UART3_FLAG ]
009C 2611                              JRNE   ?ELSE_0075
009E         ?LAB_0075:
              ; SOURCE LINE # 490 
009E 7B04       F                      LD     A,(004H,SP)   ; [ UART3_FLAG + 01H ]
00A0 5F                                CLRW   X
00A1 C55249                            BCP    A,05249H
00A4 2705                              JREQ   ?ELSE_0076
              ; SOURCE LINE # 493 
00A6 5C                                INCW   X
00A7 1F01       F                      LDW    (001H,SP),X   ; [ status ]
00A9 2013                              JRA    ?NXT_0075
00AB         ?ELSE_0076:
              ; SOURCE LINE # 498 
00AB 1F01       F                      LDW    (001H,SP),X   ; [ status ]
00AD 200F                              JRA    ?NXT_0075
00AF         ?ELSE_0075:
              ; SOURCE LINE # 503 
00AF 7B04       F                      LD     A,(004H,SP)   ; [ UART3_FLAG + 01H ]
00B1 5F                                CLRW   X
00B2 C55240                            BCP    A,05240H
00B5 2705                              JREQ   ?ELSE_0077
              ; SOURCE LINE # 506 
00B7 5C                                INCW   X
00B8 1F01       F                      LDW    (001H,SP),X   ; [ status ]
00BA 2002                              JRA    ?NXT_0075
00BC         ?ELSE_0077:
              ; SOURCE LINE # 511 
00BC 1F01       F                      LDW    (001H,SP),X   ; [ status ]
00BE         ?NXT_0075:
              ; SOURCE LINE # 516 
00BE 1E01       F                      LDW    X,(001H,SP)   ; [ status ]
              ; SOURCE LINE # 517 
00C0 5B04                              ADD    SP,#004H
00C2 81                                RET    
              ; UART3_FLAG   (size=2).  parameter in AUTO
              ; status       (size=2). Automatic variable  in AUTO

              ; FUNCTION ?UART3_GetFlagStatus (END)

              ; FUNCTION ?UART3_ClearFlag (BEGIN)
              ; Register-parameter UART3_FLAG (XW) is relocated (AUTO)
              ; SOURCE LINE # 546 
0000 89                                PUSHW  X
              ; SOURCE LINE # 549 
0001 A30020                            CPW    X,#00020H
0004 2721                              JREQ   ?NXT_0090
0006 AE0302                            LDW    X,#00302H
0009 1301       F                      CPW    X,(001H,SP)   ; [ UART3_FLAG ]
000B 271A                              JREQ   ?NXT_0090
000D 5A                                DECW   X
000E 1301       F                      CPW    X,(001H,SP)   ; [ UART3_FLAG ]
0010 2715                              JREQ   ?NXT_0090
0012 AE0210                            LDW    X,#00210H
0015 1301       F                      CPW    X,(001H,SP)   ; [ UART3_FLAG ]
0017 270E                              JREQ   ?NXT_0090
0019 AE0225                            LDW    X,#00225H
001C 89                                PUSHW  X
001D 5F                                CLRW   X
001E 89                                PUSHW  X
001F AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
0022 CD0000     F                      CALL   ?assert_failed
0025 5B04                              ADD    SP,#004H
0027         ?NXT_0090:
              ; SOURCE LINE # 552 
0027 AE0020                            LDW    X,#00020H
002A 1301       F                      CPW    X,(001H,SP)   ; [ UART3_FLAG ]
002C 2606                              JRNE   ?ELSE_0083
              ; SOURCE LINE # 554 
002E 35DF5240                          MOV    05240H,#0DFH
0032 201E                              JRA    ?EPILOG_0016
0034         ?ELSE_0083:
              ; SOURCE LINE # 557 
0034 AE0210                            LDW    X,#00210H
0037 1301       F                      CPW    X,(001H,SP)   ; [ UART3_FLAG ]
0039 2606                              JRNE   ?ELSE_0084
              ; SOURCE LINE # 559 
003B 72195247                          BRES   05247H,#004H
003F 2011                              JRA    ?EPILOG_0016
0041         ?ELSE_0084:
              ; SOURCE LINE # 562 
0041 AE0302                            LDW    X,#00302H
0044 1301       F                      CPW    X,(001H,SP)   ; [ UART3_FLAG ]
0046 2606                              JRNE   ?ELSE_0085
              ; SOURCE LINE # 564 
0048 72135249                          BRES   05249H,#001H
004C 2004                              JRA    ?EPILOG_0016
004E         ?ELSE_0085:
              ; SOURCE LINE # 569 
004E 72115249                          BRES   05249H,#000H
0052         ?EPILOG_0016:
              ; SOURCE LINE # 571 
0052 85                                POPW   X
0053 81                                RET    
              ; UART3_FLAG   (size=2).  parameter in AUTO

              ; FUNCTION ?UART3_ClearFlag (END)

              ; FUNCTION ?UART3_GetITStatus (BEGIN)
              ; Register-parameter UART3_IT (XW) is relocated (AUTO)
              ; SOURCE LINE # 586 
0000 89                                PUSHW  X
0001 5206                              SUB    SP,#006H
              ; SOURCE LINE # 595 
0003 AE0277                            LDW    X,#00277H
0006 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
0008 273F                              JREQ   ?NXT_0102
000A AE0266                            LDW    X,#00266H
000D 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
000F 2738                              JREQ   ?NXT_0102
0011 AE0255                            LDW    X,#00255H
0014 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
0016 2731                              JREQ   ?NXT_0102
0018 AE0244                            LDW    X,#00244H
001B 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
001D 272A                              JREQ   ?NXT_0102
001F AE0235                            LDW    X,#00235H
0022 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
0024 2723                              JREQ   ?NXT_0102
0026 AE0346                            LDW    X,#00346H
0029 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
002B 271C                              JREQ   ?NXT_0102
002D AE0412                            LDW    X,#00412H
0030 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
0032 2715                              JREQ   ?NXT_0102
0034 AE0100                            LDW    X,#00100H
0037 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
0039 270E                              JREQ   ?NXT_0102
003B AE0253                            LDW    X,#00253H
003E 89                                PUSHW  X
003F 5F                                CLRW   X
0040 89                                PUSHW  X
0041 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
0044 CD0000     F                      CALL   ?assert_failed
0047 5B04                              ADD    SP,#004H
0049         ?NXT_0102:
              ; SOURCE LINE # 598 
0049 5F                                CLRW   X
004A 5C                                INCW   X
004B 7B08       F                      LD     A,(008H,SP)   ; [ UART3_IT + 01H ]
004D A40F                              AND    A,#00FH
004F CD0000     F                      CALL   ?C?sll168
0052 9F                                LD     A,XL
0053 6B03       F                      LD     (003H,SP),A   ; [ itpos ]
              ; SOURCE LINE # 600 
0055 7B08       F                      LD     A,(008H,SP)   ; [ UART3_IT + 01H ]
0057 4E                                SWAP   A
0058 A40F                              AND    A,#00FH
              ; SOURCE LINE # 602 
005A 5F                                CLRW   X
005B 5C                                INCW   X
005C CD0000     F                      CALL   ?C?sll168
005F 9F                                LD     A,XL
0060 6B05       F                      LD     (005H,SP),A   ; [ itmask2 ]
              ; SOURCE LINE # 605 
0062 AE0100                            LDW    X,#00100H
0065 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
0067 261B                              JRNE   ?ELSE_0095
              ; SOURCE LINE # 608 
0069 C45244                            AND    A,05244H
006C 6B06       F                      LD     (006H,SP),A   ; [ enablestatus ]
              ; SOURCE LINE # 611 
006E 7B03       F                      LD     A,(003H,SP)   ; [ itpos ]
0070 C55240                            BCP    A,05240H
0073 270A                              JREQ   ?ELSE_0096
0075 0D06       F                      TNZ    (006H,SP)   ; [ enablestatus ]
0077 2706                              JREQ   ?ELSE_0096
              ; SOURCE LINE # 614 
0079 5F                                CLRW   X
007A 5C                                INCW   X
007B 1F01       F                      LDW    (001H,SP),X   ; [ pendingbitstatus ]
007D 2066                              JRA    ?NXT_0103
007F         ?ELSE_0096:
              ; SOURCE LINE # 619 
007F 5F                                CLRW   X
0080 1F01       F                      LDW    (001H,SP),X   ; [ pendingbitstatus ]
0082 2061                              JRA    ?NXT_0103
0084         ?ELSE_0095:
              ; SOURCE LINE # 622 
0084 AE0346                            LDW    X,#00346H
0087 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
0089 261D                              JRNE   ?ELSE_0097
              ; SOURCE LINE # 625 
008B 7B05       F                      LD     A,(005H,SP)   ; [ itmask2 ]
008D C45247                            AND    A,05247H
0090 6B06       F                      LD     (006H,SP),A   ; [ enablestatus ]
              ; SOURCE LINE # 627 
0092 7B03       F                      LD     A,(003H,SP)   ; [ itpos ]
0094 C55247                            BCP    A,05247H
0097 270A                              JREQ   ?ELSE_0098
0099 0D06       F                      TNZ    (006H,SP)   ; [ enablestatus ]
009B 2706                              JREQ   ?ELSE_0098
              ; SOURCE LINE # 630 
009D 5F                                CLRW   X
009E 5C                                INCW   X
009F 1F01       F                      LDW    (001H,SP),X   ; [ pendingbitstatus ]
00A1 2042                              JRA    ?NXT_0103
00A3         ?ELSE_0098:
              ; SOURCE LINE # 635 
00A3 5F                                CLRW   X
00A4 1F01       F                      LDW    (001H,SP),X   ; [ pendingbitstatus ]
00A6 203D                              JRA    ?NXT_0103
00A8         ?ELSE_0097:
              ; SOURCE LINE # 638 
00A8 AE0412                            LDW    X,#00412H
00AB 7B05       F                      LD     A,(005H,SP)   ; [ itmask2 ]
00AD 1307       F                      CPW    X,(007H,SP)   ; [ UART3_IT ]
00AF 261B                              JRNE   ?ELSE_0099
              ; SOURCE LINE # 641 
00B1 C45249                            AND    A,05249H
00B4 6B06       F                      LD     (006H,SP),A   ; [ enablestatus ]
              ; SOURCE LINE # 643 
00B6 7B03       F                      LD     A,(003H,SP)   ; [ itpos ]
00B8 C55249                            BCP    A,05249H
00BB 270A                              JREQ   ?ELSE_0100
00BD 0D06       F                      TNZ    (006H,SP)   ; [ enablestatus ]
00BF 2706                              JREQ   ?ELSE_0100
              ; SOURCE LINE # 646 
00C1 5F                                CLRW   X
00C2 5C                                INCW   X
00C3 1F01       F                      LDW    (001H,SP),X   ; [ pendingbitstatus ]
00C5 201E                              JRA    ?NXT_0103
00C7         ?ELSE_0100:
              ; SOURCE LINE # 651 
00C7 5F                                CLRW   X
00C8 1F01       F                      LDW    (001H,SP),X   ; [ pendingbitstatus ]
00CA 2019                              JRA    ?NXT_0103
00CC         ?ELSE_0099:
              ; SOURCE LINE # 657 
00CC C45245                            AND    A,05245H
00CF 6B06       F                      LD     (006H,SP),A   ; [ enablestatus ]
              ; SOURCE LINE # 659 
00D1 7B03       F                      LD     A,(003H,SP)   ; [ itpos ]
00D3 C55240                            BCP    A,05240H
00D6 270A                              JREQ   ?ELSE_0101
00D8 0D06       F                      TNZ    (006H,SP)   ; [ enablestatus ]
00DA 2706                              JREQ   ?ELSE_0101
              ; SOURCE LINE # 662 
00DC 5F                                CLRW   X
00DD 5C                                INCW   X
00DE 1F01       F                      LDW    (001H,SP),X   ; [ pendingbitstatus ]
00E0 2003                              JRA    ?NXT_0103
00E2         ?ELSE_0101:
              ; SOURCE LINE # 667 
00E2 5F                                CLRW   X
00E3 1F01       F                      LDW    (001H,SP),X   ; [ pendingbitstatus ]
00E5         ?NXT_0103:
              ; SOURCE LINE # 671 
00E5 1E01       F                      LDW    X,(001H,SP)   ; [ pendingbitstatus ]
              ; SOURCE LINE # 672 
00E7 5B08                              ADD    SP,#008H
00E9 81                                RET    
              ; UART3_IT     (size=2).  parameter in AUTO
              ; pendingbitstatus (size=2). Automatic variable  in AUTO
              ; itpos        unsigned char  (size=1). Automatic variable  in AUTO
              ; itmask1      unsigned char  (size=1). Automatic variable  in AUTO
              ; itmask2      unsigned char  (size=1). Automatic variable  in AUTO
              ; enablestatus unsigned char  (size=1). Automatic variable  in AUTO

              ; FUNCTION ?UART3_GetITStatus (END)

              ; FUNCTION ?UART3_ClearITPendingBit (BEGIN)
              ; Register-parameter UART3_IT (XW) is relocated (AUTO)
              ; SOURCE LINE # 701 
0000 89                                PUSHW  X
              ; SOURCE LINE # 704 
0001 A30255                            CPW    X,#00255H
0004 271C                              JREQ   ?NXT_0113
0006 AE0412                            LDW    X,#00412H
0009 1301       F                      CPW    X,(001H,SP)   ; [ UART3_IT ]
000B 2715                              JREQ   ?NXT_0113
000D AE0346                            LDW    X,#00346H
0010 1301       F                      CPW    X,(001H,SP)   ; [ UART3_IT ]
0012 270E                              JREQ   ?NXT_0113
0014 AE02C0                            LDW    X,#002C0H
0017 89                                PUSHW  X
0018 5F                                CLRW   X
0019 89                                PUSHW  X
001A AE0000     F                      LDW    X,#HIGH(?STR?STM8S_UART3?BASE)
001D CD0000     F                      CALL   ?assert_failed
0020 5B04                              ADD    SP,#004H
0022         ?NXT_0113:
              ; SOURCE LINE # 707 
0022 AE0255                            LDW    X,#00255H
0025 1301       F                      CPW    X,(001H,SP)   ; [ UART3_IT ]
0027 2606                              JRNE   ?ELSE_0106
              ; SOURCE LINE # 709 
0029 35DF5240                          MOV    05240H,#0DFH
002D 2011                              JRA    ?EPILOG_0018
002F         ?ELSE_0106:
              ; SOURCE LINE # 712 
002F AE0346                            LDW    X,#00346H
0032 1301       F                      CPW    X,(001H,SP)   ; [ UART3_IT ]
0034 2606                              JRNE   ?ELSE_0107
              ; SOURCE LINE # 714 
0036 72195247                          BRES   05247H,#004H
003A 2004                              JRA    ?EPILOG_0018
003C         ?ELSE_0107:
              ; SOURCE LINE # 719 
003C 72135249                          BRES   05249H,#001H
0040         ?EPILOG_0018:
              ; SOURCE LINE # 721 
0040 85                                POPW   X
0041 81                                RET    
              ; UART3_IT     (size=2).  parameter in AUTO

              ; FUNCTION ?UART3_ClearITPendingBit (END)

RCSTM8 COMPILER V2.44.12.199
NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====

int8_t . . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF ------- INT      -------     2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF ------- LONG     -------     4
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     2
uint32_t . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      4
s32. . . . . . . . . . . . . . . . . .  TYPEDEF ------- LONG     -------     4
s16. . . . . . . . . . . . . . . . . .  TYPEDEF ------- INT      -------     2
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      1
u32. . . . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      4
u16. . . . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     2
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     1
FALSE. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TRUE . . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
bool . . . . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
RESET. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SET. . . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
FlagStatus . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
ITStatus . . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
BitStatus. . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
BitAction. . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
DISABLE. . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ENABLE . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
FunctionalState. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
ERROR. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SUCCESS. . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ErrorStatus. . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
GPIO_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     5
  ODR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  DDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
GPIO_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     5
  ODR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  DDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
ADC2_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DRH. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  DRL. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  TDRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TDRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
ADC2_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     8
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DRH. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  DRL. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  TDRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TDRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
AWU_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     3
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  APR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  TBR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
AWU_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     3
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  APR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  TBR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
BEEP_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
BEEP_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     1
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
CLK_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    14
  ICKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ECKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CMSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SWR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SWCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CKDIVR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PCKENR1. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CSSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCOR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PCKENR2. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  HSITRIMR . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  SWIMCCR. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
CLK_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    14
  ICKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ECKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CMSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SWR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SWCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CKDIVR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PCKENR1. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CSSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCOR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PCKENR2. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  HSITRIMR . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  SWIMCCR. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
TIM1_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    32
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ETR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCMR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  PSCRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  PSCRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  RCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000017H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000018H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000019H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001AH     1
  CCR4H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001BH     1
  CCR4L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001CH     1
  BKR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001DH     1
  DTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001EH     1
  OISR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001FH     1
TIM1_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    32
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ETR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCMR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  PSCRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  PSCRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  RCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000017H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000018H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000019H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001AH     1
  CCR4H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001BH     1
  CCR4L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001CH     1
  BKR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001DH     1
  DTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001EH     1
  OISR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001FH     1
TIM2_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    21
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
TIM2_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    21
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
TIM3_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    17
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
TIM3_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    17
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
TIM4_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     7
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
TIM4_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     7
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
TIM5_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    23
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
TIM5_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    23
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
TIM6_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     9
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
TIM6_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     9
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
I2C_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    15
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  FREQR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OARL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  OARH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  SR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  ITR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  TRISER . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
I2C_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    15
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  FREQR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OARL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  OARH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  SR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  ITR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  TRISER . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
ITC_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  ISPR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ISPR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ISPR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ISPR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  ISPR5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  ISPR6. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ISPR7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  ISPR8. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
ITC_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     8
  ISPR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ISPR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ISPR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ISPR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  ISPR5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  ISPR6. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ISPR7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  ISPR8. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
EXTI_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     2
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
EXTI_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     2
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
FLASH_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    11
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NCR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  FPR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NFPR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  IAPSR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  PUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  RESERVED3. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  DUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
FLASH_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    11
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NCR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  FPR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NFPR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  IAPSR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  PUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  RESERVED3. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  DUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
OPT_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    15
  OPT0 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  OPT1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NOPT1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OPT2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NOPT2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  OPT3 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  NOPT3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  OPT4 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  NOPT4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  OPT5 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  NOPT5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  OPT7 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  NOPT7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
OPT_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    15
  OPT0 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  OPT1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NOPT1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OPT2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NOPT2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  OPT3 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  NOPT3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  OPT4 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  NOPT4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  OPT5 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  NOPT5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  OPT7 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  NOPT7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
IWDG_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     3
  KR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  PR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RLR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
IWDG_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     3
  KR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  PR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RLR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
WWDG_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     2
  CR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  WR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
WWDG_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     2
  CR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  WR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
RST_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
RST_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
SPI_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ICR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CRCPR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
SPI_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     8
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ICR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CRCPR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
UART1_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    11
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
UART1_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    11
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
UART2_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    12
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
UART2_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    12
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
UART3_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    10
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
UART3_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    10
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
CAN_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    24
  MCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  MSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  TSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  TPR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  RFR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  Page . . . . . . . . . . . . . . . .  MEMBER  -----   UNION   000008H    16
CFG_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  GCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
CFG_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     1
  GCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
CLK_SWITCHMODE_MANUAL. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWITCHMODE_AUTO. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SwitchMode_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_CURRENTCLOCKSTATE_DISABLE. . . . . E_CONST  ----- INT      -------  2
CLK_CURRENTCLOCKSTATE_ENABLE . . . . . E_CONST  ----- INT      -------  2
CLK_CurrentClockState_TypeDef. . . . .  TYPEDEF ------- INT   -------     2
CLK_CSSCONFIG_ENABLEWITHIT . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSCONFIG_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSCONFIG_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSConfig_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_SOURCE_HSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SOURCE_LSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SOURCE_HSE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Source_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_HSITRIMVALUE_0 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_1 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_2 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_3 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_4 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_5 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_6 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_7 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITrimValue_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_OUTPUT_HSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_LSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_HSE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPU . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV2 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV4 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV8 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV16. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV32. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV64. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_HSIRC . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_MASTER. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_OTHERS. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Output_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_PERIPHERAL_I2C . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_SPI . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART1 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART2 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART3 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER6. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER5. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER3. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_AWU . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_ADC . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_CAN . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Peripheral_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_FLAG_LSIRDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_HSIRDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_HSERDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_SWIF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_SWBSY . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CSSD. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_AUX . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CCOBSY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CCORDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Flag_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_IT_CSSD. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_IT_SWIF. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_IT_TypeDef . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_PRESCALER_HSIDIV1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV8. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV8. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV16 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV32 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV64 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV128. . . . . . . . E_CONST  ----- INT      -------  2
CLK_Prescaler_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_SWIMDIVIDER_2. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWIMDIVIDER_OTHER. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWIMDivider_TypeDef. . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_DeInit . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_HSECmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_HSICmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_LSICmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_CCOCmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClockSwitchCmd . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_FastHaltWakeUpCmd. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SlowActiveHaltWakeUpCmd. . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_PeripheralClockConfig. . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClockSwitchConfig. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_HSIPrescalerConfig . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_CCOConfig. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ITConfig . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SYSCLKConfig . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SWIMConfig . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClockSecuritySystemEnable. . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SYSCLKEmergencyClear . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_AdjustHSICalibrationValue. . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetClockFreq . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetSYSCLKSource. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetFlagStatus. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetITStatus. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClearITPendingBit. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_SENSITIVITY_FALL_LOW. . . . . . . E_CONST  ----- INT      -------  2
EXTI_SENSITIVITY_RISE_ONLY . . . . . . E_CONST  ----- INT      -------  2
EXTI_SENSITIVITY_FALL_ONLY . . . . . . E_CONST  ----- INT      -------  2
EXTI_SENSITIVITY_RISE_FALL . . . . . . E_CONST  ----- INT      -------  2
EXTI_Sensitivity_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
EXTI_TLISENSITIVITY_FALL_ONLY. . . . . E_CONST  ----- INT      -------  2
EXTI_TLISENSITIVITY_RISE_ONLY. . . . . E_CONST  ----- INT      -------  2
EXTI_TLISensitivity_TypeDef. . . . . .  TYPEDEF ------- INT   -------     2
EXTI_PORT_GPIOA. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOB. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOC. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOD. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_Port_TypeDef. . . . . . . . . . .  TYPEDEF ------- INT   -------     2
EXTI_DeInit. . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_SetExtIntSensitivity. . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_SetTLISensitivity . . . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_GetExtIntSensitivity. . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_GetTLISensitivity . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_MODE_IN_FL_NO_IT. . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_PU_NO_IT. . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_FL_IT . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_PU_IT . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_LOW_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_LOW_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_LOW_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_LOW_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_HIZ_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_HIGH_FAST . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_HIZ_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_HIGH_SLOW . . . . . . E_CONST  ----- INT      -------  2
GPIO_Mode_TypeDef. . . . . . . . . . .  TYPEDEF ------- INT   -------     2
GPIO_PIN_0 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_1 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_2 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_3 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_4 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_5 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_6 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_7 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_LNIB. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_HNIB. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_ALL . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_Pin_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
GPIO_DeInit. . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_Init. . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_Write . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_WriteHigh . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_WriteLow. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_WriteReverse. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ReadInputData . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ReadOutputData. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ReadInputPin. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ExternalPullUpConfig. . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_DATADIRECTION_2LINES_FULLDUPLEX. . E_CONST  ----- INT      -------  2
SPI_DATADIRECTION_2LINES_RXONLY. . . . E_CONST  ----- INT      -------  2
SPI_DATADIRECTION_1LINE_RX . . . . . . E_CONST  ----- INT      -------  2
SPI_DATADIRECTION_1LINE_TX . . . . . . E_CONST  ----- INT      -------  2
SPI_DataDirection_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
SPI_NSS_SOFT . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_NSS_HARD . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_NSS_TypeDef. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_DIRECTION_RX . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_DIRECTION_TX . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_Direction_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_MODE_MASTER. . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_MODE_SLAVE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_Mode_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_BAUDRATEPRESCALER_2. . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_4. . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_8. . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_16 . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_32 . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_64 . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_128. . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_256. . . . . . . E_CONST  ----- INT      -------  2
SPI_BaudRatePrescaler_TypeDef. . . . .  TYPEDEF ------- INT   -------     2
SPI_CLOCKPOLARITY_LOW. . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CLOCKPOLARITY_HIGH . . . . . . . . E_CONST  ----- INT      -------  2
SPI_ClockPolarity_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
SPI_CLOCKPHASE_1EDGE . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CLOCKPHASE_2EDGE . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_ClockPhase_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_FIRSTBIT_MSB . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FIRSTBIT_LSB . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FirstBit_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_CRC_RX . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CRC_TX . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CRC_TypeDef. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_FLAG_BSY . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_OVR . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_MODF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_CRCERR. . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_WKUP. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_TXE . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_RXNE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_Flag_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_IT_WKUP. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_OVR . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_MODF. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_CRCERR. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_TXE . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_RXNE. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_ERR . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_TypeDef . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_DeInit . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_Init . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_Cmd. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ITConfig . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_SendData . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ReceiveData. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_NSSInternalSoftwareCmd . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_TransmitCRC. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_CalculateCRCCmd. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetCRC . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ResetCRC . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetCRCPolynomial . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_BiDirectionalLineConfig. . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetFlagStatus. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ClearFlag. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetITStatus. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ClearITPendingBit. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_PRESCALER_1 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_2 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_4 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_8 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_16. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_32. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_64. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_128 . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_Prescaler_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_OPMODE_SINGLE . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_OPMODE_REPETITIVE . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_OPMode_TypeDef. . . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_PSCRELOADMODE_UPDATE. . . . . . . E_CONST  ----- INT      -------  2
TIM4_PSCRELOADMODE_IMMEDIATE . . . . . E_CONST  ----- INT      -------  2
TIM4_PSCReloadMode_TypeDef . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_UPDATESOURCE_GLOBAL . . . . . . . E_CONST  ----- INT      -------  2
TIM4_UPDATESOURCE_REGULAR. . . . . . . E_CONST  ----- INT      -------  2
TIM4_UpdateSource_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_EVENTSOURCE_UPDATE. . . . . . . . E_CONST  ----- INT      -------  2
TIM4_EventSource_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_FLAG_UPDATE . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_FLAG_TypeDef. . . . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_IT_UPDATE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_IT_TypeDef. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_DeInit. . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_TimeBaseInit. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_Cmd . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ITConfig. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_UpdateDisableConfig . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_UpdateRequestConfig . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_SelectOnePulseMode. . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_PrescalerConfig . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ARRPreloadConfig. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GenerateEvent . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_SetCounter. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_SetAutoreload . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetCounter. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetPrescaler. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetFlagStatus . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ClearFlag . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetITStatus . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ClearITPendingBit . . . . . . . .  EXTERN  CODE    PROC    ------- -----
assert_failed. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_fctptr_t. . . . . . . . . . . . . . .  TYPEDEF ------- PTR     -------     2
_halt_ . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_jmp_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_nop_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_rim_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_sim_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_trap_ . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_wfe_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_wfi_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_getCC_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_setCC_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_getSP_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_setSP_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_swapbyte_ . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_swapnibble_ . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_WAKEUP_IDLELINE. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_WAKEUP_ADDRESSMARK . . . . . . . E_CONST  ----- INT      -------  2
UART3_WakeUp_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LINBREAKDETECTIONLENGTH_10BITS . E_CONST  ----- INT      -------  2
UART3_LINBREAKDETECTIONLENGTH_11BITS . E_CONST  ----- INT      -------  2
UART3_LINBreakDetectionLength_TypeDef.  TYPEDEF ------- INT   -------     2
UART3_STOPBITS_1 . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_STOPBITS_2 . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_StopBits_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_PARITY_NO. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_PARITY_EVEN. . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_PARITY_ODD . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_Parity_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_WORDLENGTH_8D. . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_WORDLENGTH_9D. . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_WordLength_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_MODE_RX_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_TX_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_TX_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_RX_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_TXRX_ENABLE . . . . . . . . E_CONST  ----- INT      -------  2
UART3_Mode_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LIN_MODE_MASTER. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_LIN_MODE_SLAVE . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_LinMode_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LIN_AUTOSYNC_DISABLE . . . . . . E_CONST  ----- INT      -------  2
UART3_LIN_AUTOSYNC_ENABLE. . . . . . . E_CONST  ----- INT      -------  2
UART3_LinAutosync_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LIN_DIVUP_LBRR1. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_LIN_DIVUP_NEXTRXNE . . . . . . . E_CONST  ----- INT      -------  2
UART3_LinDivUp_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_FLAG_TXE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_TC. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_RXNE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_IDLE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_OR_LHE. . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_NF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_FE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_PE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_SBK . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_LBDF. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_LHDF. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_LSF . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_Flag_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_IT_TXE . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_TC. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_RXNE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_IDLE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_OR. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_PE. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_LBDF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_LHDF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_RXNE_OR . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_DeInit . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_Init . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_Cmd. . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ITConfig . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_LINBreakDetectionConfig. . . . .  EXTERN  CODE    PROC    ------- -----
UART3_LINConfig. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_LINCmd . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ReceiverWakeUpCmd. . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_WakeUpConfig . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ReceiveData8 . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ReceiveData9 . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SendData8. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SendData9. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SendBreak. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SetAddress . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_GetFlagStatus. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ClearFlag. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_GetITStatus. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ClearITPendingBit. . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_DeInit . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
  BRR2_1?219 . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  BRR2_2?221 . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  BaudRate_Mantissa?223. . . . . . . .  PUBLIC  AUTO    BASE    000000H     4
  BaudRate_Mantissa100?225 . . . . . .  PUBLIC  AUTO    BASE    000000H     4
UART3_Init . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 BaudRate?213. . . . . . . . . . . . .  PARAM   AUTO    BASE    00000CH     4
 WordLength?214. . . . . . . . . . . .  PARAM   AUTO    ENUM    000010H     2
 StopBits?215. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000012H     2
 Parity?216. . . . . . . . . . . . . .  PARAM   AUTO    ENUM    000014H     2
 Mode?217. . . . . . . . . . . . . . .  PARAM   AUTO    ENUM    000016H     2
  BRR2_1?219 . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  BRR2_2?221 . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000001H     1
  BaudRate_Mantissa?223. . . . . . . .  PUBLIC  AUTO    BASE    000002H     4
  BaudRate_Mantissa100?225 . . . . . .  PUBLIC  AUTO    BASE    000006H     4
UART3_Cmd. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 NewState?226. . . . . . . . . . . . .  PARAM   PAGE0   ENUM    000000H     2
  uartreg?230. . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  itpos?232. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
UART3_ITConfig . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 UART3_IT?227. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000002H     2
 NewState?228. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000006H     2
  uartreg?230. . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  itpos?232. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000001H     1
UART3_LINBreakDetectionConfig. . . . .  PUBLIC  CODE    PROC    ------- -----
 UART3_LINBreakDetectionLength?233 . .  PARAM   AUTO    ENUM    000000H     2
UART3_LINConfig. . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 UART3_Mode?234. . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
 UART3_Autosync?235. . . . . . . . . .  PARAM   AUTO    ENUM    000004H     2
 UART3_DivUp?236 . . . . . . . . . . .  PARAM   AUTO    ENUM    000006H     2
UART3_LINCmd . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 NewState?237. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
UART3_WakeUpConfig . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 UART3_WakeUp?238. . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
UART3_ReceiverWakeUpCmd. . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 NewState?239. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
UART3_ReceiveData8 . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
  temp?245 . . . . . . . . . . . . . .  PUBLIC  AUTO    U_INT   000000H     2
UART3_ReceiveData9 . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
  temp?245 . . . . . . . . . . . . . .  PUBLIC  AUTO    U_INT   000000H     2
UART3_SendData8. . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 Data?246. . . . . . . . . . . . . . .  PARAM   AUTO    U_CHAR  000000H     1
UART3_SendData9. . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 Data?247. . . . . . . . . . . . . . .  PARAM   PAGE0   U_INT   000000H     2
UART3_SendBreak. . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
UART3_SetAddress . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 UART3_Address?250 . . . . . . . . . .  PARAM   AUTO    U_CHAR  000000H     1
  status?253 . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_GetFlagStatus. . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 UART3_FLAG?251. . . . . . . . . . . .  PARAM   AUTO    ENUM    000002H     2
  status?253 . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_ClearFlag. . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 UART3_FLAG?254. . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
  pendingbitstatus?257 . . . . . . . . E_CONST  ----- INT      -------  2
  itpos?259. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  itmask1?261. . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  itmask2?263. . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  enablestatus?265 . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
UART3_GetITStatus. . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 UART3_IT?255. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000006H     2
  pendingbitstatus?257 . . . . . . . . E_CONST  ----- INT      -------  2
  itpos?259. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000002H     1
  itmask1?261. . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000003H     1
  itmask2?263. . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000004H     1
  enablestatus?265 . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000005H     1
UART3_ClearITPendingBit. . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 UART3_IT?266. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
assert_failed. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
?BH. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
CLK_GetClockFreq . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
?CL. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
?BL. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
?CH. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
RCSTM8 COMPILER V2.44.12.199


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1563    ----
   CONSTANT SIZE    =     63    ----
   DATA SIZE        =   ----    ----
   PAGE0 SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

RCSTM8 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
