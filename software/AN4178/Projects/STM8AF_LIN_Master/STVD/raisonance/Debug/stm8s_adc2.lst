RCSTM8 COMPILER V2.44.12.199,  STM8S_ADC2         11/13/12  11:07:55

QCW(0x009A3FE0)

RCSTM8 COMPILER V2.44.12.199, COMPILATION OF MODULE STM8S_ADC2
OBJECT MODULE PLACED IN Debug\stm8s_adc2.o
COMPILER INVOKED BY: OBJECT(Debug\stm8s_adc2.o) PIN(C:\Raisonance\Ride\inc\STM8) PIN(C:\Raisonance\Ride\inc\ST7) PIN(C:\Raisonance\Ride\inc) WRV(0) STM8(SMALL) DEBUG DGC(data) AUTO OT(7,SIZE) PR(Debug\stm8s_adc2.lst) CD CO SB INITSTATICVAR LAOB PIN(..\..\..\..\libraries\stm8s_stdperiph_driver\inc) PIN(..\..\inc) DEFINE(STM8AF52Ax) 

stmt level    source
   1          /**
   2            ******************************************************************************
   3            * @file    stm8s_adc2.c
   4            * @author  MCD Application Team
   5            * @version V2.1.0
   6            * @date    18-November-2011
   7            * @brief   This file contains all the functions/macros for the ADC2 peripheral.
   8            ******************************************************************************
   9            * @attention
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19            ******************************************************************************
  20            */
  21          
  22          /* Includes ------------------------------------------------------------------*/
  23          #include "stm8s_adc2.h"
  24          
  25          /** @addtogroup STM8S_StdPeriph_Driver
  26            * @{
  27            */
  28          /* Private typedef -----------------------------------------------------------*/
  29          /* Private define ------------------------------------------------------------*/
  30          /* Private macro -------------------------------------------------------------*/
  31          /* Private variables ---------------------------------------------------------*/
  32          /* Private function prototypes -----------------------------------------------*/
  33          /* Private functions ---------------------------------------------------------*/
  34          
  35          /* Public functions ----------------------------------------------------------*/
  36          
  37          /**
  38            * @addtogroup ADC2_Public_Functions
  39            * @{
  40            */
  41          
  42          /**
  43            * @brief  Deinitializes the ADC2 peripheral registers to their default reset
  44            * values.
  45            * @param  None
  46            * @retval None
  47            */
  48          void ADC2_DeInit(void)
  49          {
  50   1          ADC2->CSR  = ADC2_CSR_RESET_VALUE;
  51   1          ADC2->CR1  = ADC2_CR1_RESET_VALUE;
  52   1          ADC2->CR2  = ADC2_CR2_RESET_VALUE;
  53   1          ADC2->TDRH = ADC2_TDRH_RESET_VALUE;
  54   1          ADC2->TDRL = ADC2_TDRL_RESET_VALUE;
  55   1      }
  56          
  57          /**
  58            * @brief  Initializes the ADC2 peripheral according to the specified parameters
  59            * @param   ADC2_ConversionMode: specifies the conversion mode
  60            * can be one of the values of @ref ADC2_ConvMode_TypeDef.
  61            * @param   ADC2_Channel: specifies the channel to convert
  62            * can be one of the values of @ref ADC2_Channel_TypeDef.
  63            * @param   ADC2_PrescalerSelection: specifies the ADC2 prescaler
  64            * can be one of the values of @ref ADC2_PresSel_TypeDef.
  65            * @param   ADC2_ExtTrigger: specifies the external trigger
  66            * can be one of the values of @ref ADC2_ExtTrig_TypeDef.
  67            * @param   ADC2_ExtTriggerState: specifies the external trigger new state
  68            * can be one of the values of @ref FunctionalState.
  69            * @param   ADC2_Align: specifies the converted data alignment
  70            * can be one of the values of @ref ADC2_Align_TypeDef.
  71            * @param   ADC2_SchmittTriggerChannel: specifies the schmitt trigger channel
  72            * can be one of the values of @ref ADC2_SchmittTrigg_TypeDef.
  73            * @param   ADC2_SchmittTriggerState: specifies the schmitt trigger state
  74            * can be one of the values of @ref FunctionalState.
  75            * @retval None
  76            */
  77          void ADC2_Init(ADC2_ConvMode_TypeDef ADC2_ConversionMode, ADC2_Channel_TypeDef ADC2_Channel, ADC2_PresSel_TypeDef ADC2_PrescalerSelection, ADC2_ExtTrig_TypeDef ADC2_ExtTrigger, FunctionalState ADC2_ExtTriggerState, ADC2_Align_TypeDef ADC2_Align, ADC2_SchmittTrigg_TypeDef ADC2_SchmittTriggerChannel, FunctionalState ADC2_SchmittTriggerState)
  78          {
  79   1      
  80   1          /* Check the parameters */
  81   1          assert_param(IS_ADC2_CONVERSIONMODE_OK(ADC2_ConversionMode));
  82   1          assert_param(IS_ADC2_CHANNEL_OK(ADC2_Channel));
  83   1          assert_param(IS_ADC2_PRESSEL_OK(ADC2_PrescalerSelection));
  84   1          assert_param(IS_ADC2_EXTTRIG_OK(ADC2_ExtTrigger));
  85   1          assert_param(IS_FUNCTIONALSTATE_OK(((ADC2_ExtTriggerState))));
  86   1          assert_param(IS_ADC2_ALIGN_OK(ADC2_Align));
  87   1          assert_param(IS_ADC2_SCHMITTTRIG_OK(ADC2_SchmittTriggerChannel));
  88   1          assert_param(IS_FUNCTIONALSTATE_OK(ADC2_SchmittTriggerState));
  89   1      
  90   1          /*-----------------CR1 & CSR configuration --------------------*/
  91   1          /* Configure the conversion mode and the channel to convert
  92   1          respectively according to ADC2_ConversionMode & ADC2_Channel values  &  ADC2_Align values */
  93   1          ADC2_ConversionConfig(ADC2_ConversionMode, ADC2_Channel, ADC2_Align);
  94   1          /* Select the prescaler division factor according to ADC2_PrescalerSelection values */
  95   1          ADC2_PrescalerConfig(ADC2_PrescalerSelection);
  96   1      
  97   1          /*-----------------CR2 configuration --------------------*/
  98   1          /* Configure the external trigger state and event respectively
  99   1          according to ADC2_ExtTrigStatus, ADC2_ExtTrigger */
 100   1          ADC2_ExternalTriggerConfig(ADC2_ExtTrigger, ADC2_ExtTriggerState);
 101   1      
 102   1          /*------------------TDR configuration ---------------------------*/
 103   1          /* Configure the schmitt trigger channel and state respectively
 104   1          according to ADC2_SchmittTriggerChannel & ADC2_SchmittTriggerNewState  values */
 105   1          ADC2_SchmittTriggerConfig(ADC2_SchmittTriggerChannel, ADC2_SchmittTriggerState);
 106   1      
 107   1          /* Enable the ADC2 peripheral */
 108   1          ADC2->CR1 |= ADC2_CR1_ADON;
 109   1      
 110   1      }
 111          
 112          
 113          /**
 114            * @brief  Enables or Disables the ADC2 peripheral.
 115            * @param   NewState: specifies the peripheral enabled or disabled state.
 116            * @retval None
 117            */
 118          void ADC2_Cmd(FunctionalState NewState)
 119          {
 120   1      
 121   1          /* Check the parameters */
 122   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 123   1      
 124   1          if (NewState != DISABLE)
 125   1          {
 126   2              ADC2->CR1 |= ADC2_CR1_ADON;
 127   2          }
 128   1          else /* NewState == DISABLE */
 129   1          {
 130   2              ADC2->CR1 &= (uint8_t)(~ADC2_CR1_ADON);
 131   2          }
 132   1      
 133   1      }
 134          
 135          /**
 136            * @brief  Enables or disables the ADC2 interrupt.
 137            * @param   NewState specifies the state of ADC2 interrupt.
 138            * @retval None
 139            */
 140          void ADC2_ITConfig(FunctionalState NewState)
 141          {
 142   1      
 143   1          /* Check the parameters */
 144   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 145   1      
 146   1          if (NewState != DISABLE)
 147   1          {
 148   2              /* Enable the ADC2 interrupts */
 149   2              ADC2->CSR |= (uint8_t)ADC2_CSR_EOCIE;
 150   2          }
 151   1          else  /*NewState == DISABLE */
 152   1          {
 153   2              /* Disable the ADC2 interrupts */
 154   2              ADC2->CSR &= (uint8_t)(~ADC2_CSR_EOCIE);
 155   2          }
 156   1      
 157   1      }
 158          
 159          /**
 160            * @brief  Configure the ADC2 prescaler division factor.
 161            * @param   ADC2_Prescaler: the selected prescaler.
 162            * It can be one of the values of @ref ADC2_PresSel_TypeDef.
 163            * @retval None
 164            */
 165          void ADC2_PrescalerConfig(ADC2_PresSel_TypeDef ADC2_Prescaler)
 166          {
 167   1      
 168   1          /* Check the parameter */
 169   1          assert_param(IS_ADC2_PRESSEL_OK(ADC2_Prescaler));
 170   1      
 171   1          /* Clear the SPSEL bits */
 172   1          ADC2->CR1 &= (uint8_t)(~ADC2_CR1_SPSEL);
 173   1          /* Select the prescaler division factor according to ADC2_PrescalerSelection values */
 174   1          ADC2->CR1 |= (uint8_t)(ADC2_Prescaler);
 175   1      
 176   1      }
 177          
 178          
 179          /**
 180            * @brief  Enables or disables the ADC2 Schmitt Trigger on a selected channel.
 181            * @param   ADC2_SchmittTriggerChannel specifies the desired Channel.
 182            * It can be set of the values of @ref ADC2_SchmittTrigg_TypeDef.
 183            * @param   NewState specifies the Channel  ADC2 Schmitt Trigger new status.
 184            * can have one of the values of @ref FunctionalState.
 185            * @retval None
 186            */
 187          void ADC2_SchmittTriggerConfig(ADC2_SchmittTrigg_TypeDef ADC2_SchmittTriggerChannel, FunctionalState NewState)
 188          {
 189   1      
 190   1          /* Check the parameters */
 191   1          assert_param(IS_ADC2_SCHMITTTRIG_OK(ADC2_SchmittTriggerChannel));
 192   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 193   1      
 194   1          if (ADC2_SchmittTriggerChannel == ADC2_SCHMITTTRIG_ALL)
 195   1          {
 196   2              if (NewState != DISABLE)
 197   2              {
 198   3                  ADC2->TDRL &= (uint8_t)0x0;
 199   3                  ADC2->TDRH &= (uint8_t)0x0;
 200   3              }
 201   2              else /* NewState == DISABLE */
 202   2              {
 203   3                  ADC2->TDRL |= (uint8_t)0xFF;
 204   3                  ADC2->TDRH |= (uint8_t)0xFF;
 205   3              }
 206   2          }
 207   1          else if (ADC2_SchmittTriggerChannel < ADC2_SCHMITTTRIG_CHANNEL8)
 208   1          {
 209   2              if (NewState != DISABLE)
 210   2              {
 211   3                  ADC2->TDRL &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << (uint8_t)ADC2_SchmittTriggerChannel));
 212   3              }
 213   2              else /* NewState == DISABLE */
 214   2              {
 215   3                  ADC2->TDRL |= (uint8_t)((uint8_t)0x01 << (uint8_t)ADC2_SchmittTriggerChannel);
 216   3              }
 217   2          }
 218   1          else /* ADC2_SchmittTriggerChannel >= ADC2_SCHMITTTRIG_CHANNEL8 */
 219   1          {
 220   2              if (NewState != DISABLE)
 221   2              {
 222   3                  ADC2->TDRH &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << ((uint8_t)ADC2_SchmittTriggerChannel - (uint8_t)8)));
 223   3              }
 224   2              else /* NewState == DISABLE */
 225   2              {
 226   3                  ADC2->TDRH |= (uint8_t)((uint8_t)0x01 << ((uint8_t)ADC2_SchmittTriggerChannel - (uint8_t)8));
 227   3              }
 228   2          }
 229   1      
 230   1      }
 231          
 232          /**
 233            * @brief  Configure the ADC2 conversion on selected channel.
 234            * @param   ADC2_ConversionMode Specifies the conversion type.
 235            * It can be set of the values of @ref ADC2_ConvMode_TypeDef
 236            * @param   ADC2_Channel specifies the ADC2 Channel.
 237            * It can be set of the values of @ref ADC2_Channel_TypeDef
 238            * @param   ADC2_Align specifies the converted data alignment.
 239            * It can be set of the values of @ref ADC2_Align_TypeDef
 240            * @retval None
 241            */
 242          void ADC2_ConversionConfig(ADC2_ConvMode_TypeDef ADC2_ConversionMode, ADC2_Channel_TypeDef ADC2_Channel, ADC2_Align_TypeDef ADC2_Align)
 243          {
 244   1      
 245   1          /* Check the parameters */
 246   1          assert_param(IS_ADC2_CONVERSIONMODE_OK(ADC2_ConversionMode));
 247   1          assert_param(IS_ADC2_CHANNEL_OK(ADC2_Channel));
 248   1          assert_param(IS_ADC2_ALIGN_OK(ADC2_Align));
 249   1      
 250   1          /* Clear the align bit */
 251   1          ADC2->CR2 &= (uint8_t)(~ADC2_CR2_ALIGN);
 252   1          /* Configure the data alignment */
 253   1          ADC2->CR2 |= (uint8_t)(ADC2_Align);
 254   1      
 255   1          if (ADC2_ConversionMode == ADC2_CONVERSIONMODE_CONTINUOUS)
 256   1          {
 257   2              /* Set the continuous conversion mode */
 258   2              ADC2->CR1 |= ADC2_CR1_CONT;
 259   2          }
 260   1          else /* ADC2_ConversionMode == ADC2_CONVERSIONMODE_SINGLE */
 261   1          {
 262   2              /* Set the single conversion mode */
 263   2              ADC2->CR1 &= (uint8_t)(~ADC2_CR1_CONT);
 264   2          }
 265   1      
 266   1          /* Clear the ADC2 channels */
 267   1          ADC2->CSR &= (uint8_t)(~ADC2_CSR_CH);
 268   1          /* Select the ADC2 channel */
 269   1          ADC2->CSR |= (uint8_t)(ADC2_Channel);
 270   1      
 271   1      }
 272          
 273          
 274          /**
 275            * @brief  Configure the ADC2 conversion on external trigger event.
 276            * @par Full description:
 277            * The selected external trigger event can be enabled or disabled.
 278            * @param   ADC2_ExtTrigger to select the External trigger event.
 279            * can have one of the values of @ref ADC2_ExtTrig_TypeDef.
 280            * @param   NewState to enable/disable the selected external trigger
 281            * can have one of the values of @ref FunctionalState.
 282            * @retval None
 283            */
 284          void ADC2_ExternalTriggerConfig(ADC2_ExtTrig_TypeDef ADC2_ExtTrigger, FunctionalState NewState)
 285          {
 286   1      
 287   1          /* Check the parameters */
 288   1          assert_param(IS_ADC2_EXTTRIG_OK(ADC2_ExtTrigger));
 289   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 290   1      
 291   1          /* Clear the external trigger selection bits */
 292   1          ADC2->CR2 &= (uint8_t)(~ADC2_CR2_EXTSEL);
 293   1      
 294   1          if (NewState != DISABLE)
 295   1          {
 296   2              /* Enable the selected external Trigger */
 297   2              ADC2->CR2 |= (uint8_t)(ADC2_CR2_EXTTRIG);
 298   2          }
 299   1          else /* NewState == DISABLE */
 300   1          {
 301   2              /* Disable the selected external trigger */
 302   2              ADC2->CR2 &= (uint8_t)(~ADC2_CR2_EXTTRIG);
 303   2          }
 304   1      
 305   1          /* Set the slected external trigger */
 306   1          ADC2->CR2 |= (uint8_t)(ADC2_ExtTrigger);
 307   1      
 308   1      }
 309          
 310          
 311          /**
 312            * @brief  Start ADC2 conversion
 313            * @par Full description:
 314            * This function  triggers the start of conversion, after ADC2 configuration.
 315            * @param  None
 316            * @retval None
 317            * @par Required preconditions:
 318            * Enable the ADC2 peripheral before calling this function
 319            */
 320          void ADC2_StartConversion(void)
 321          {
 322   1          ADC2->CR1 |= ADC2_CR1_ADON;
 323   1      }
 324          
 325          /**
 326            * @brief  Get one sample of measured signal.
 327            * @param  None
 328            * @retval ConversionValue:  value of the measured signal.
 329            * @par Required preconditions:
 330            * ADC2 conversion finished.
 331            */
 332          uint16_t ADC2_GetConversionValue(void)
 333          {
 334   1      
 335   1          uint16_t temph = 0;
 336   1          uint8_t templ = 0;
 337   1      
 338   1          if ((ADC2->CR2 & ADC2_CR2_ALIGN) != 0) /* Right alignment */
 339   1          {
 340   2              /* Read LSB first */
 341   2              templ = ADC2->DRL;
 342   2              /* Then read MSB */
 343   2              temph = ADC2->DRH;
 344   2      
 345   2              temph = (uint16_t)(templ | (uint16_t)(temph << (uint8_t)8));
 346   2          }
 347   1          else /* Left alignment */
 348   1          {
 349   2              /* Read MSB firts*/
 350   2              temph = ADC2->DRH;
 351   2              /* Then read LSB */
 352   2              templ = ADC2->DRL;
 353   2      
 354   2              temph = (uint16_t)((uint16_t)((uint16_t)templ << 6) | (uint16_t)((uint16_t)temph << 8));
 355   2          }
 356   1      
 357   1          return ((uint16_t)temph);
 358   1      
 359   1      }
 360          
 361          /**
 362            * @brief  Checks the ADC2 EOC flag status.
 363            * @param  None
 364            * @retval FlagStatus Status of the ADC2 EOC flag.
 365            */
 366          FlagStatus ADC2_GetFlagStatus(void)
 367          {
 368   1          /* Get EOC  flag status */
 369   1          return (FlagStatus)(ADC2->CSR & ADC2_CSR_EOC);
 370   1      
 371   1      }
 372          
 373          /**
 374            * @brief  Clear the ADC2 EOC Flag.
 375            * @param  None
 376            * @retval None
 377            */
 378          void ADC2_ClearFlag(void)
 379          {
 380   1          ADC2->CSR &= (uint8_t)(~ADC2_CSR_EOC);
 381   1      }
 382          
 383          /**
 384            * @brief  Returns the EOC  pending bit status
 385           * @par Parameters:
 386            * None
 387            * @retval FlagStatus: status of the EOC pending bit.
 388            */
 389          ITStatus ADC2_GetITStatus(void)
 390          {
 391   1          return (ITStatus)(ADC2->CSR & ADC2_CSR_EOC);
 392   1      }
 393          
 394          /**
 395            * @brief  Clear the ADC2 End of Conversion pending bit.
 396            * @param  None
 397            * @retval None
 398            */
 399          void ADC2_ClearITPendingBit(void)
 400          {
 401   1          ADC2->CSR &= (uint8_t)(~ADC2_CSR_EOC);
 402   1      }
 403          
 404          /**
 405            * @}
 406            */
 407            
 408          /**
 409            * @}
 410            */
 411            
 412          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
 413          
RCSTM8 COMPILER V2.44.12.199
ASSEMBLY LISTING OF GENERATED OBJECT CODE

              ; FUNCTION ?ADC2_DeInit (BEGIN)
              ; SOURCE LINE # 50 
0000 725F5400                          CLR    05400H
              ; SOURCE LINE # 51 
0004 725F5401                          CLR    05401H
              ; SOURCE LINE # 52 
0008 725F5402                          CLR    05402H
              ; SOURCE LINE # 53 
000C 725F5406                          CLR    05406H
              ; SOURCE LINE # 54 
0010 725F5407                          CLR    05407H
              ; SOURCE LINE # 55 
0014 81                                RET    

              ; FUNCTION ?ADC2_DeInit (END)

              ; FUNCTION ?ADC2_Init (BEGIN)
              ; Register-parameter ADC2_ConversionMode (XW) is relocated (AUTO)
              ; SOURCE LINE # 77 
0000 89                                PUSHW  X
              ; SOURCE LINE # 81 
0001 5D                                TNZW   X
0002 270F                              JREQ   ?NXT_0008
0004 5A                                DECW   X
0005 270C                              JREQ   ?NXT_0008
0007 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
000A         ?DATASTART_0008:
000A 51                             M  DB     051H
000B         ?DATAEND_0008:
000B AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
000E CD0000     F                      CALL   ?assert_failed
0011 5B04                              ADD    SP,#004H
0013         ?NXT_0008:
              ; SOURCE LINE # 82 
0013 1E05       F                      LDW    X,(005H,SP)   ; [ ADC2_Channel ]
0015 2757                              JREQ   ?NXT_0009
0017 5A                                DECW   X
0018 2754                              JREQ   ?NXT_0009
001A AE0002                            LDW    X,#00002H
001D 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
001F 274D                              JREQ   ?NXT_0009
0021 5C                                INCW   X
0022 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0024 2748                              JREQ   ?NXT_0009
0026 5C                                INCW   X
0027 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0029 2743                              JREQ   ?NXT_0009
002B 5C                                INCW   X
002C 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
002E 273E                              JREQ   ?NXT_0009
0030 5C                                INCW   X
0031 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0033 2739                              JREQ   ?NXT_0009
0035 5C                                INCW   X
0036 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0038 2734                              JREQ   ?NXT_0009
003A 5C                                INCW   X
003B 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
003D 272F                              JREQ   ?NXT_0009
003F 5C                                INCW   X
0040 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0042 272A                              JREQ   ?NXT_0009
0044 5C                                INCW   X
0045 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0047 2725                              JREQ   ?NXT_0009
0049 5C                                INCW   X
004A 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
004C 2720                              JREQ   ?NXT_0009
004E 5C                                INCW   X
004F 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0051 271B                              JREQ   ?NXT_0009
0053 5C                                INCW   X
0054 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0056 2716                              JREQ   ?NXT_0009
0058 5C                                INCW   X
0059 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
005B 2711                              JREQ   ?NXT_0009
005D 5C                                INCW   X
005E 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0060 270C                              JREQ   ?NXT_0009
0062 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0065         ?DATASTART_0009:
0065 52                             M  DB     052H
0066         ?DATAEND_0009:
0066 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
0069 CD0000     F                      CALL   ?assert_failed
006C 5B04                              ADD    SP,#004H
006E         ?NXT_0009:
              ; SOURCE LINE # 83 
006E 1E07       F                      LDW    X,(007H,SP)   ; [ ADC2_PrescalerSelection ]
0070 272F                              JREQ   ?NXT_0010
0072 A30010                            CPW    X,#00010H
0075 272A                              JREQ   ?NXT_0010
0077 A30020                            CPW    X,#00020H
007A 2725                              JREQ   ?NXT_0010
007C A30030                            CPW    X,#00030H
007F 2720                              JREQ   ?NXT_0010
0081 A30040                            CPW    X,#00040H
0084 271B                              JREQ   ?NXT_0010
0086 A30050                            CPW    X,#00050H
0089 2716                              JREQ   ?NXT_0010
008B A30060                            CPW    X,#00060H
008E 2711                              JREQ   ?NXT_0010
0090 A30070                            CPW    X,#00070H
0093 270C                              JREQ   ?NXT_0010
0095 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0098         ?DATASTART_0010:
0098 53                             M  DB     053H
0099         ?DATAEND_0010:
0099 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
009C CD0000     F                      CALL   ?assert_failed
009F 5B04                              ADD    SP,#004H
00A1         ?NXT_0010:
              ; SOURCE LINE # 84 
00A1 1E09       F                      LDW    X,(009H,SP)   ; [ ADC2_ExtTrigger ]
00A3 270F                              JREQ   ?NXT_0011
00A5 5A                                DECW   X
00A6 270C                              JREQ   ?NXT_0011
00A8 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
00AB         ?DATASTART_0011:
00AB 54                             M  DB     054H
00AC         ?DATAEND_0011:
00AC AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
00AF CD0000     F                      CALL   ?assert_failed
00B2 5B04                              ADD    SP,#004H
00B4         ?NXT_0011:
              ; SOURCE LINE # 85 
00B4 1E0B       F                      LDW    X,(00BH,SP)   ; [ ADC2_ExtTriggerState ]
00B6 270F                              JREQ   ?NXT_0012
00B8 5A                                DECW   X
00B9 270C                              JREQ   ?NXT_0012
00BB CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
00BE         ?DATASTART_0012:
00BE 55                             M  DB     055H
00BF         ?DATAEND_0012:
00BF AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
00C2 CD0000     F                      CALL   ?assert_failed
00C5 5B04                              ADD    SP,#004H
00C7         ?NXT_0012:
              ; SOURCE LINE # 86 
00C7 1E0D       F                      LDW    X,(00DH,SP)   ; [ ADC2_Align ]
00C9 2711                              JREQ   ?NXT_0013
00CB A30008                            CPW    X,#00008H
00CE 270C                              JREQ   ?NXT_0013
00D0 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
00D3         ?DATASTART_0013:
00D3 56                             M  DB     056H
00D4         ?DATAEND_0013:
00D4 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
00D7 CD0000     F                      CALL   ?assert_failed
00DA 5B04                              ADD    SP,#004H
00DC         ?NXT_0013:
              ; SOURCE LINE # 87 
00DC 1E0F       F                      LDW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
00DE 275E                              JREQ   ?NXT_0014
00E0 5A                                DECW   X
00E1 275B                              JREQ   ?NXT_0014
00E3 AE0002                            LDW    X,#00002H
00E6 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
00E8 2754                              JREQ   ?NXT_0014
00EA 5C                                INCW   X
00EB 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
00ED 274F                              JREQ   ?NXT_0014
00EF 5C                                INCW   X
00F0 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
00F2 274A                              JREQ   ?NXT_0014
00F4 5C                                INCW   X
00F5 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
00F7 2745                              JREQ   ?NXT_0014
00F9 5C                                INCW   X
00FA 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
00FC 2740                              JREQ   ?NXT_0014
00FE 5C                                INCW   X
00FF 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
0101 273B                              JREQ   ?NXT_0014
0103 5C                                INCW   X
0104 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
0106 2736                              JREQ   ?NXT_0014
0108 5C                                INCW   X
0109 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
010B 2731                              JREQ   ?NXT_0014
010D 5C                                INCW   X
010E 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
0110 272C                              JREQ   ?NXT_0014
0112 5C                                INCW   X
0113 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
0115 2727                              JREQ   ?NXT_0014
0117 5C                                INCW   X
0118 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
011A 2722                              JREQ   ?NXT_0014
011C 5C                                INCW   X
011D 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
011F 271D                              JREQ   ?NXT_0014
0121 5C                                INCW   X
0122 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
0124 2718                              JREQ   ?NXT_0014
0126 5C                                INCW   X
0127 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
0129 2713                              JREQ   ?NXT_0014
012B AE001F                            LDW    X,#0001FH
012E 130F       F                      CPW    X,(00FH,SP)   ; [ ADC2_SchmittTriggerChannel ]
0130 270C                              JREQ   ?NXT_0014
0132 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0135         ?DATASTART_0014:
0135 57                             M  DB     057H
0136         ?DATAEND_0014:
0136 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
0139 CD0000     F                      CALL   ?assert_failed
013C 5B04                              ADD    SP,#004H
013E         ?NXT_0014:
              ; SOURCE LINE # 88 
013E 1E11       F                      LDW    X,(011H,SP)   ; [ ADC2_SchmittTriggerState ]
0140 270F                              JREQ   ?NXT_0015
0142 5A                                DECW   X
0143 270C                              JREQ   ?NXT_0015
0145 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0148         ?DATASTART_0015:
0148 58                             M  DB     058H
0149         ?DATAEND_0015:
0149 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
014C CD0000     F                      CALL   ?assert_failed
014F 5B04                              ADD    SP,#004H
0151         ?NXT_0015:
              ; SOURCE LINE # 93 
0151 1E0D       F                      LDW    X,(00DH,SP)   ; [ ADC2_Align ]
0153 89                                PUSHW  X
0154 1E07       F                      LDW    X,(007H,SP)   ; [ ADC2_Channel ]
0156 89                                PUSHW  X
0157 1E05       F                      LDW    X,(005H,SP)   ; [ ADC2_ConversionMode ]
0159 CD0000     F                      CALL   ?ADC2_ConversionConfig
015C 5B04                              ADD    SP,#004H
              ; SOURCE LINE # 95 
015E 1E07       F                      LDW    X,(007H,SP)   ; [ ADC2_PrescalerSelection ]
0160 CD0000     F                      CALL   ?ADC2_PrescalerConfig
              ; SOURCE LINE # 100 
0163 1E0B       F                      LDW    X,(00BH,SP)   ; [ ADC2_ExtTriggerState ]
0165 89                                PUSHW  X
0166 1E0B       F                      LDW    X,(00BH,SP)   ; [ ADC2_ExtTrigger ]
0168 CD0000     F                      CALL   ?ADC2_ExternalTriggerConfig
016B 85                                POPW   X
              ; SOURCE LINE # 105 
016C 1E11       F                      LDW    X,(011H,SP)   ; [ ADC2_SchmittTriggerState ]
016E 89                                PUSHW  X
016F 1E11       F                      LDW    X,(011H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0171 CD0000     F                      CALL   ?ADC2_SchmittTriggerConfig
0174 85                                POPW   X
              ; SOURCE LINE # 108 
0175 72105401                          BSET   05401H,#000H
              ; SOURCE LINE # 110 
0179 85                                POPW   X
017A 81                                RET    
              ; ADC2_ConversionMode (size=2).  parameter in AUTO
              ; ADC2_Channel (size=2).  parameter in AUTO
              ; ADC2_PrescalerSelection (size=2).  parameter in AUTO
              ; ADC2_ExtTrigger (size=2).  parameter in AUTO
              ; ADC2_ExtTriggerState (size=2).  parameter in AUTO
              ; ADC2_Align   (size=2).  parameter in AUTO
              ; ADC2_SchmittTriggerChannel (size=2).  parameter in AUTO
              ; ADC2_SchmittTriggerState (size=2).  parameter in AUTO

              ; FUNCTION ?ADC2_Init (END)

              ; FUNCTION ?ADC2_Cmd (BEGIN)
              ; Register-parameter NewState (XW) is relocated (AUTO)
              ; SOURCE LINE # 118 
0000 89                                PUSHW  X
              ; SOURCE LINE # 122 
0001 5D                                TNZW   X
0002 270F                              JREQ   ?NXT_0018
0004 5A                                DECW   X
0005 270C                              JREQ   ?NXT_0018
0007 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
000A         ?DATASTART_0017:
000A 7A                             M  DB     07AH
000B         ?DATAEND_0017:
000B AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
000E CD0000     F                      CALL   ?assert_failed
0011 5B04                              ADD    SP,#004H
0013         ?NXT_0018:
              ; SOURCE LINE # 124 
0013 1E01       F                      LDW    X,(001H,SP)   ; [ NewState ]
0015 2706                              JREQ   ?ELSE_0019
              ; SOURCE LINE # 126 
0017 72105401                          BSET   05401H,#000H
001B 2004                              JRA    ?EPILOG_0002
001D         ?ELSE_0019:
              ; SOURCE LINE # 130 
001D 72115401                          BRES   05401H,#000H
0021         ?EPILOG_0002:
              ; SOURCE LINE # 133 
0021 85                                POPW   X
0022 81                                RET    
              ; NewState     (size=2).  parameter in AUTO

              ; FUNCTION ?ADC2_Cmd (END)

              ; FUNCTION ?ADC2_ITConfig (BEGIN)
              ; Register-parameter NewState (XW) is relocated (AUTO)
              ; SOURCE LINE # 140 
0000 89                                PUSHW  X
              ; SOURCE LINE # 144 
0001 5D                                TNZW   X
0002 270F                              JREQ   ?NXT_0022
0004 5A                                DECW   X
0005 270C                              JREQ   ?NXT_0022
0007 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
000A         ?DATASTART_0019:
000A 90                             M  DB     090H
000B         ?DATAEND_0019:
000B AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
000E CD0000     F                      CALL   ?assert_failed
0011 5B04                              ADD    SP,#004H
0013         ?NXT_0022:
              ; SOURCE LINE # 146 
0013 1E01       F                      LDW    X,(001H,SP)   ; [ NewState ]
0015 2706                              JREQ   ?ELSE_0023
              ; SOURCE LINE # 149 
0017 721A5400                          BSET   05400H,#005H
001B 2004                              JRA    ?EPILOG_0003
001D         ?ELSE_0023:
              ; SOURCE LINE # 154 
001D 721B5400                          BRES   05400H,#005H
0021         ?EPILOG_0003:
              ; SOURCE LINE # 157 
0021 85                                POPW   X
0022 81                                RET    
              ; NewState     (size=2).  parameter in AUTO

              ; FUNCTION ?ADC2_ITConfig (END)

              ; FUNCTION ?ADC2_PrescalerConfig (BEGIN)
              ; Register-parameter ADC2_Prescaler (XW) is relocated (AUTO)
              ; SOURCE LINE # 165 
0000 89                                PUSHW  X
              ; SOURCE LINE # 169 
0001 5D                                TNZW   X
0002 273B                              JREQ   ?NXT_0025
0004 A30010                            CPW    X,#00010H
0007 2736                              JREQ   ?NXT_0025
0009 AE0020                            LDW    X,#00020H
000C 1301       F                      CPW    X,(001H,SP)   ; [ ADC2_Prescaler ]
000E 272F                              JREQ   ?NXT_0025
0010 AE0030                            LDW    X,#00030H
0013 1301       F                      CPW    X,(001H,SP)   ; [ ADC2_Prescaler ]
0015 2728                              JREQ   ?NXT_0025
0017 AE0040                            LDW    X,#00040H
001A 1301       F                      CPW    X,(001H,SP)   ; [ ADC2_Prescaler ]
001C 2721                              JREQ   ?NXT_0025
001E AE0050                            LDW    X,#00050H
0021 1301       F                      CPW    X,(001H,SP)   ; [ ADC2_Prescaler ]
0023 271A                              JREQ   ?NXT_0025
0025 AE0060                            LDW    X,#00060H
0028 1301       F                      CPW    X,(001H,SP)   ; [ ADC2_Prescaler ]
002A 2713                              JREQ   ?NXT_0025
002C AE0070                            LDW    X,#00070H
002F 1301       F                      CPW    X,(001H,SP)   ; [ ADC2_Prescaler ]
0031 270C                              JREQ   ?NXT_0025
0033 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0036         ?DATASTART_0021:
0036 A9                             M  DB     0A9H
0037         ?DATAEND_0021:
0037 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
003A CD0000     F                      CALL   ?assert_failed
003D 5B04                              ADD    SP,#004H
003F         ?NXT_0025:
              ; SOURCE LINE # 172 
003F A68F                              LD     A,#08FH
0041 C45401                            AND    A,05401H
0044 C75401                            LD     05401H,A
              ; SOURCE LINE # 174 
0047 C65401                            LD     A,05401H
004A 1A02       F                      OR     A,(002H,SP)   ; [ ADC2_Prescaler + 01H ]
004C C75401                            LD     05401H,A
              ; SOURCE LINE # 176 
004F 85                                POPW   X
0050 81                                RET    
              ; ADC2_Prescaler (size=2).  parameter in AUTO

              ; FUNCTION ?ADC2_PrescalerConfig (END)

              ; FUNCTION ?ADC2_SchmittTriggerConfig (BEGIN)
              ; Register-parameter ADC2_SchmittTriggerChannel (XW) is relocated (AUTO)
              ; SOURCE LINE # 187 
0000 89                                PUSHW  X
0001 5206                              SUB    SP,#006H
              ; SOURCE LINE # 191 
0003 1E07       F                      LDW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0005 275E                              JREQ   ?NXT_0033
0007 5A                                DECW   X
0008 275B                              JREQ   ?NXT_0033
000A AE0002                            LDW    X,#00002H
000D 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
000F 2754                              JREQ   ?NXT_0033
0011 5C                                INCW   X
0012 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0014 274F                              JREQ   ?NXT_0033
0016 5C                                INCW   X
0017 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0019 274A                              JREQ   ?NXT_0033
001B 5C                                INCW   X
001C 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
001E 2745                              JREQ   ?NXT_0033
0020 5C                                INCW   X
0021 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0023 2740                              JREQ   ?NXT_0033
0025 5C                                INCW   X
0026 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0028 273B                              JREQ   ?NXT_0033
002A 5C                                INCW   X
002B 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
002D 2736                              JREQ   ?NXT_0033
002F 5C                                INCW   X
0030 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0032 2731                              JREQ   ?NXT_0033
0034 5C                                INCW   X
0035 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0037 272C                              JREQ   ?NXT_0033
0039 5C                                INCW   X
003A 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
003C 2727                              JREQ   ?NXT_0033
003E 5C                                INCW   X
003F 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0041 2722                              JREQ   ?NXT_0033
0043 5C                                INCW   X
0044 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0046 271D                              JREQ   ?NXT_0033
0048 5C                                INCW   X
0049 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
004B 2718                              JREQ   ?NXT_0033
004D 5C                                INCW   X
004E 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0050 2713                              JREQ   ?NXT_0033
0052 AE001F                            LDW    X,#0001FH
0055 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
0057 270C                              JREQ   ?NXT_0033
0059 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
005C         ?DATASTART_0024:
005C BF                             M  DB     0BFH
005D         ?DATAEND_0024:
005D AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
0060 CD0000     F                      CALL   ?assert_failed
0063 5B04                              ADD    SP,#004H
0065         ?NXT_0033:
              ; SOURCE LINE # 192 
0065 1E0B       F                      LDW    X,(00BH,SP)   ; [ NewState ]
0067 270F                              JREQ   ?NXT_0034
0069 5A                                DECW   X
006A 270C                              JREQ   ?NXT_0034
006C CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
006F         ?DATASTART_0025:
006F C0                             M  DB     0C0H
0070         ?DATAEND_0025:
0070 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
0073 CD0000     F                      CALL   ?assert_failed
0076 5B04                              ADD    SP,#004H
0078         ?NXT_0034:
              ; SOURCE LINE # 194 
0078 AE001F                            LDW    X,#0001FH
007B 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
007D 2624                              JRNE   ?ELSE_0035
              ; SOURCE LINE # 196 
007F 1E0B       F                      LDW    X,(00BH,SP)   ; [ NewState ]
0081 270E                              JREQ   ?ELSE_0036
              ; SOURCE LINE # 198 
0083 3F03       F                      CLR    ?BH
0085 5500035407 F                      MOV    05407H,?BH
              ; SOURCE LINE # 199 
008A 5500035406 F                      MOV    05406H,?BH
008F 2065                              JRA    ?EPILOG_0005
0091         ?ELSE_0036:
              ; SOURCE LINE # 203 
0091 A6FF                              LD     A,#0FFH
0093 CA5407                            OR     A,05407H
0096 C75407                            LD     05407H,A
              ; SOURCE LINE # 204 
0099 A6FF                              LD     A,#0FFH
009B CA5406                            OR     A,05406H
009E C75406                            LD     05406H,A
00A1 2053                              JRA    ?EPILOG_0005
00A3         ?ELSE_0035:
              ; SOURCE LINE # 207 
00A3 AE0008                            LDW    X,#00008H
00A6 1307       F                      CPW    X,(007H,SP)   ; [ ADC2_SchmittTriggerChannel ]
00A8 2D25                              JRSLE  ?ELSE_0037
              ; SOURCE LINE # 209 
00AA 1E0B       F                      LDW    X,(00BH,SP)   ; [ NewState ]
00AC 2711                              JREQ   ?ELSE_0038
              ; SOURCE LINE # 211 
00AE 5F                                CLRW   X
00AF 5C                                INCW   X
00B0 7B08       F                      LD     A,(008H,SP)   ; [ ADC2_SchmittTriggerChannel + 01H ]
00B2 CD0000     F                      CALL   ?C?sll168
00B5 9F                                LD     A,XL
00B6 43                                CPL    A
00B7 C45407                            AND    A,05407H
00BA C75407                            LD     05407H,A
00BD 2037                              JRA    ?EPILOG_0005
00BF         ?ELSE_0038:
              ; SOURCE LINE # 215 
00BF 5F                                CLRW   X
00C0 5C                                INCW   X
00C1 7B08       F                      LD     A,(008H,SP)   ; [ ADC2_SchmittTriggerChannel + 01H ]
00C3 CD0000     F                      CALL   ?C?sll168
00C6 9F                                LD     A,XL
00C7 CA5407                            OR     A,05407H
00CA C75407                            LD     05407H,A
00CD 2027                              JRA    ?EPILOG_0005
00CF         ?ELSE_0037:
              ; SOURCE LINE # 220 
00CF 1E0B       F                      LDW    X,(00BH,SP)   ; [ NewState ]
00D1 2713                              JREQ   ?ELSE_0039
              ; SOURCE LINE # 222 
00D3 5F                                CLRW   X
00D4 5C                                INCW   X
00D5 7B08       F                      LD     A,(008H,SP)   ; [ ADC2_SchmittTriggerChannel + 01H ]
00D7 ABF8                              ADD    A,#0F8H
00D9 CD0000     F                      CALL   ?C?sll168
00DC 9F                                LD     A,XL
00DD 43                                CPL    A
00DE C45406                            AND    A,05406H
00E1 C75406                            LD     05406H,A
00E4 2010                              JRA    ?EPILOG_0005
00E6         ?ELSE_0039:
              ; SOURCE LINE # 226 
00E6 5F                                CLRW   X
00E7 5C                                INCW   X
00E8 7B08       F                      LD     A,(008H,SP)   ; [ ADC2_SchmittTriggerChannel + 01H ]
00EA ABF8                              ADD    A,#0F8H
00EC CD0000     F                      CALL   ?C?sll168
00EF 9F                                LD     A,XL
00F0 CA5406                            OR     A,05406H
00F3 C75406                            LD     05406H,A
00F6         ?EPILOG_0005:
              ; SOURCE LINE # 230 
00F6 5B08                              ADD    SP,#008H
00F8 81                                RET    
              ; ADC2_SchmittTriggerChannel (size=2).  parameter in AUTO
              ; NewState     (size=2).  parameter in AUTO

              ; FUNCTION ?ADC2_SchmittTriggerConfig (END)

              ; FUNCTION ?ADC2_ConversionConfig (BEGIN)
              ; Register-parameter ADC2_ConversionMode (XW) is relocated (AUTO)
              ; SOURCE LINE # 242 
0000 89                                PUSHW  X
              ; SOURCE LINE # 246 
0001 5D                                TNZW   X
0002 270F                              JREQ   ?NXT_0044
0004 5A                                DECW   X
0005 270C                              JREQ   ?NXT_0044
0007 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
000A         ?DATASTART_0029:
000A F6                             M  DB     0F6H
000B         ?DATAEND_0029:
000B AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
000E CD0000     F                      CALL   ?assert_failed
0011 5B04                              ADD    SP,#004H
0013         ?NXT_0044:
              ; SOURCE LINE # 247 
0013 1E05       F                      LDW    X,(005H,SP)   ; [ ADC2_Channel ]
0015 2757                              JREQ   ?NXT_0045
0017 5A                                DECW   X
0018 2754                              JREQ   ?NXT_0045
001A AE0002                            LDW    X,#00002H
001D 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
001F 274D                              JREQ   ?NXT_0045
0021 5C                                INCW   X
0022 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0024 2748                              JREQ   ?NXT_0045
0026 5C                                INCW   X
0027 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0029 2743                              JREQ   ?NXT_0045
002B 5C                                INCW   X
002C 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
002E 273E                              JREQ   ?NXT_0045
0030 5C                                INCW   X
0031 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0033 2739                              JREQ   ?NXT_0045
0035 5C                                INCW   X
0036 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0038 2734                              JREQ   ?NXT_0045
003A 5C                                INCW   X
003B 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
003D 272F                              JREQ   ?NXT_0045
003F 5C                                INCW   X
0040 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0042 272A                              JREQ   ?NXT_0045
0044 5C                                INCW   X
0045 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0047 2725                              JREQ   ?NXT_0045
0049 5C                                INCW   X
004A 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
004C 2720                              JREQ   ?NXT_0045
004E 5C                                INCW   X
004F 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0051 271B                              JREQ   ?NXT_0045
0053 5C                                INCW   X
0054 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0056 2716                              JREQ   ?NXT_0045
0058 5C                                INCW   X
0059 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
005B 2711                              JREQ   ?NXT_0045
005D 5C                                INCW   X
005E 1305       F                      CPW    X,(005H,SP)   ; [ ADC2_Channel ]
0060 270C                              JREQ   ?NXT_0045
0062 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0065         ?DATASTART_0030:
0065 F7                             M  DB     0F7H
0066         ?DATAEND_0030:
0066 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
0069 CD0000     F                      CALL   ?assert_failed
006C 5B04                              ADD    SP,#004H
006E         ?NXT_0045:
              ; SOURCE LINE # 248 
006E 1E07       F                      LDW    X,(007H,SP)   ; [ ADC2_Align ]
0070 2711                              JREQ   ?NXT_0046
0072 A30008                            CPW    X,#00008H
0075 270C                              JREQ   ?NXT_0046
0077 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
007A         ?DATASTART_0031:
007A F8                             M  DB     0F8H
007B         ?DATAEND_0031:
007B AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
007E CD0000     F                      CALL   ?assert_failed
0081 5B04                              ADD    SP,#004H
0083         ?NXT_0046:
              ; SOURCE LINE # 251 
0083 72175402                          BRES   05402H,#003H
              ; SOURCE LINE # 253 
0087 C65402                            LD     A,05402H
008A 1A08       F                      OR     A,(008H,SP)   ; [ ADC2_Align + 01H ]
008C C75402                            LD     05402H,A
              ; SOURCE LINE # 255 
008F 5F                                CLRW   X
0090 5C                                INCW   X
0091 1301       F                      CPW    X,(001H,SP)   ; [ ADC2_ConversionMode ]
0093 2606                              JRNE   ?ELSE_0047
              ; SOURCE LINE # 258 
0095 72125401                          BSET   05401H,#001H
0099 2004                              JRA    ?NXT_0047
009B         ?ELSE_0047:
              ; SOURCE LINE # 263 
009B 72135401                          BRES   05401H,#001H
009F         ?NXT_0047:
              ; SOURCE LINE # 267 
009F A6F0                              LD     A,#0F0H
00A1 C45400                            AND    A,05400H
00A4 C75400                            LD     05400H,A
              ; SOURCE LINE # 269 
00A7 C65400                            LD     A,05400H
00AA 1A06       F                      OR     A,(006H,SP)   ; [ ADC2_Channel + 01H ]
00AC C75400                            LD     05400H,A
              ; SOURCE LINE # 271 
00AF 85                                POPW   X
00B0 81                                RET    
              ; ADC2_ConversionMode (size=2).  parameter in AUTO
              ; ADC2_Channel (size=2).  parameter in AUTO
              ; ADC2_Align   (size=2).  parameter in AUTO

              ; FUNCTION ?ADC2_ConversionConfig (END)

              ; FUNCTION ?ADC2_ExternalTriggerConfig (BEGIN)
              ; Register-parameter ADC2_ExtTrigger (XW) is relocated (AUTO)
              ; SOURCE LINE # 284 
0000 89                                PUSHW  X
              ; SOURCE LINE # 288 
0001 5D                                TNZW   X
0002 2711                              JREQ   ?NXT_0051
0004 5A                                DECW   X
0005 270E                              JREQ   ?NXT_0051
0007 AE0120                            LDW    X,#00120H
000A 89                                PUSHW  X
000B 5F                                CLRW   X
000C 89                                PUSHW  X
000D AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
0010 CD0000     F                      CALL   ?assert_failed
0013 5B04                              ADD    SP,#004H
0015         ?NXT_0051:
              ; SOURCE LINE # 289 
0015 1E05       F                      LDW    X,(005H,SP)   ; [ NewState ]
0017 2711                              JREQ   ?NXT_0052
0019 5A                                DECW   X
001A 270E                              JREQ   ?NXT_0052
001C AE0121                            LDW    X,#00121H
001F 89                                PUSHW  X
0020 5F                                CLRW   X
0021 89                                PUSHW  X
0022 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_ADC2?BASE)
0025 CD0000     F                      CALL   ?assert_failed
0028 5B04                              ADD    SP,#004H
002A         ?NXT_0052:
              ; SOURCE LINE # 292 
002A A6CF                              LD     A,#0CFH
002C C45402                            AND    A,05402H
002F C75402                            LD     05402H,A
              ; SOURCE LINE # 294 
0032 1E05       F                      LDW    X,(005H,SP)   ; [ NewState ]
0034 2706                              JREQ   ?ELSE_0053
              ; SOURCE LINE # 297 
0036 721C5402                          BSET   05402H,#006H
003A 2004                              JRA    ?NXT_0053
003C         ?ELSE_0053:
              ; SOURCE LINE # 302 
003C 721D5402                          BRES   05402H,#006H
0040         ?NXT_0053:
              ; SOURCE LINE # 306 
0040 C65402                            LD     A,05402H
0043 1A02       F                      OR     A,(002H,SP)   ; [ ADC2_ExtTrigger + 01H ]
0045 C75402                            LD     05402H,A
              ; SOURCE LINE # 308 
0048 85                                POPW   X
0049 81                                RET    
              ; ADC2_ExtTrigger (size=2).  parameter in AUTO
              ; NewState     (size=2).  parameter in AUTO

              ; FUNCTION ?ADC2_ExternalTriggerConfig (END)

              ; FUNCTION ?ADC2_StartConversion (BEGIN)
              ; SOURCE LINE # 322 
0000 72105401                          BSET   05401H,#000H
              ; SOURCE LINE # 323 
0004 81                                RET    

              ; FUNCTION ?ADC2_StartConversion (END)

              ; FUNCTION ?ADC2_GetConversionValue (BEGIN)
              ; SOURCE LINE # 332 
0000 5203                              SUB    SP,#003H
              ; SOURCE LINE # 338 
0002 7207540218                        BTJF   05402H,#003H,?ELSE_0055
              ; SOURCE LINE # 341 
0007 C65405                            LD     A,05405H
000A 6B03       F                      LD     (003H,SP),A   ; [ templ ]
              ; SOURCE LINE # 343 
000C C65404                            LD     A,05404H
000F 5F                                CLRW   X
0010 97                                LD     XL,A
0011 1F01       F                      LDW    (001H,SP),X   ; [ temph ]
              ; SOURCE LINE # 345 
0013 4F                                CLR    A
0014 02                                RLWA   X,A
0015 BF03       F                      LDW    ?CH.w,X
0017 7B03       F                      LD     A,(003H,SP)   ; [ templ ]
0019 97                                LD     XL,A
001A B605       F                      LD     A,?CH
001C 95                                LD     XH,A
001D 2021                              JRA    ?NXT_0055
001F         ?ELSE_0055:
              ; SOURCE LINE # 350 
001F C65404                            LD     A,05404H
0022 5F                                CLRW   X
0023 97                                LD     XL,A
0024 1F01       F                      LDW    (001H,SP),X   ; [ temph ]
              ; SOURCE LINE # 352 
0026 C65405                            LD     A,05405H
0029 6B03       F                      LD     (003H,SP),A   ; [ templ ]
              ; SOURCE LINE # 354 
002B 4F                                CLR    A
002C 02                                RLWA   X,A
002D BF03       F                      LDW    ?CH.w,X
002F 7B03       F                      LD     A,(003H,SP)   ; [ templ ]
0031 5F                                CLRW   X
0032 97                                LD     XL,A
0033 A640                              LD     A,#040H
0035 42                                MUL    X,A
0036 BF02       F                      LDW    ?BH.w,X
0038 B605       F                      LD     A,?CH
003A BA03       F                      OR     A,?BH
003C B703       F                      LD     ?BH,A
003E BE02       F                      LDW    X,?BH.w
0040         ?NXT_0055:
              ; SOURCE LINE # 359 
0040 5B03                              ADD    SP,#003H
0042 81                                RET    
              ; temph        unsigned short  (size=2-Alg). Automatic variable  in AUTO
              ; templ        unsigned char  (size=1). Automatic variable  in AUTO

              ; FUNCTION ?ADC2_GetConversionValue (END)

              ; FUNCTION ?ADC2_GetFlagStatus (BEGIN)
              ; SOURCE LINE # 369 
0000 C65400                            LD     A,05400H
0003 A480                              AND    A,#080H
0005 5F                                CLRW   X
0006 97                                LD     XL,A
              ; SOURCE LINE # 371 
0007 81                                RET    

              ; FUNCTION ?ADC2_GetFlagStatus (END)

              ; FUNCTION ?ADC2_ClearFlag (BEGIN)
              ; SOURCE LINE # 380 
0000 721F5400                          BRES   05400H,#007H
              ; SOURCE LINE # 381 
0004 81                                RET    

              ; FUNCTION ?ADC2_ClearFlag (END)

              ; FUNCTION ?ADC2_GetITStatus (BEGIN)
              ; SOURCE LINE # 391 
0000 C65400                            LD     A,05400H
0003 A480                              AND    A,#080H
0005 5F                                CLRW   X
0006 97                                LD     XL,A
              ; SOURCE LINE # 392 
0007 81                                RET    

              ; FUNCTION ?ADC2_GetITStatus (END)

              ; FUNCTION ?ADC2_ClearITPendingBit (BEGIN)
              ; SOURCE LINE # 401 
0000 721F5400                          BRES   05400H,#007H
              ; SOURCE LINE # 402 
0004 81                                RET    

              ; FUNCTION ?ADC2_ClearITPendingBit (END)

RCSTM8 COMPILER V2.44.12.199
NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====

int8_t . . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF ------- INT      -------     2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF ------- LONG     -------     4
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     2
uint32_t . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      4
s32. . . . . . . . . . . . . . . . . .  TYPEDEF ------- LONG     -------     4
s16. . . . . . . . . . . . . . . . . .  TYPEDEF ------- INT      -------     2
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      1
u32. . . . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      4
u16. . . . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     2
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     1
FALSE. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TRUE . . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
bool . . . . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
RESET. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SET. . . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
FlagStatus . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
ITStatus . . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
BitStatus. . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
BitAction. . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
DISABLE. . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ENABLE . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
FunctionalState. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
ERROR. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SUCCESS. . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ErrorStatus. . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
GPIO_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     5
  ODR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  DDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
GPIO_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     5
  ODR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  DDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
ADC2_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DRH. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  DRL. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  TDRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TDRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
ADC2_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     8
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DRH. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  DRL. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  TDRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TDRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
AWU_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     3
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  APR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  TBR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
AWU_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     3
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  APR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  TBR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
BEEP_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
BEEP_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     1
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
CLK_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    14
  ICKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ECKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CMSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SWR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SWCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CKDIVR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PCKENR1. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CSSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCOR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PCKENR2. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  HSITRIMR . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  SWIMCCR. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
CLK_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    14
  ICKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ECKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CMSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SWR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SWCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CKDIVR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PCKENR1. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CSSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCOR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PCKENR2. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  HSITRIMR . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  SWIMCCR. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
TIM1_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    32
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ETR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCMR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  PSCRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  PSCRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  RCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000017H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000018H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000019H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001AH     1
  CCR4H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001BH     1
  CCR4L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001CH     1
  BKR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001DH     1
  DTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001EH     1
  OISR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001FH     1
TIM1_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    32
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ETR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCMR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  PSCRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  PSCRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  RCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000017H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000018H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000019H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001AH     1
  CCR4H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001BH     1
  CCR4L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001CH     1
  BKR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001DH     1
  DTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001EH     1
  OISR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001FH     1
TIM2_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    21
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
TIM2_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    21
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
TIM3_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    17
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
TIM3_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    17
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
TIM4_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     7
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
TIM4_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     7
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
TIM5_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    23
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
TIM5_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    23
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
TIM6_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     9
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
TIM6_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     9
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
I2C_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    15
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  FREQR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OARL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  OARH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  SR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  ITR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  TRISER . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
I2C_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    15
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  FREQR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OARL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  OARH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  SR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  ITR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  TRISER . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
ITC_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  ISPR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ISPR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ISPR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ISPR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  ISPR5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  ISPR6. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ISPR7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  ISPR8. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
ITC_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     8
  ISPR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ISPR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ISPR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ISPR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  ISPR5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  ISPR6. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ISPR7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  ISPR8. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
EXTI_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     2
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
EXTI_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     2
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
FLASH_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    11
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NCR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  FPR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NFPR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  IAPSR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  PUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  RESERVED3. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  DUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
FLASH_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    11
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NCR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  FPR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NFPR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  IAPSR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  PUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  RESERVED3. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  DUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
OPT_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    15
  OPT0 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  OPT1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NOPT1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OPT2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NOPT2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  OPT3 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  NOPT3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  OPT4 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  NOPT4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  OPT5 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  NOPT5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  OPT7 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  NOPT7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
OPT_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    15
  OPT0 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  OPT1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NOPT1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OPT2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NOPT2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  OPT3 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  NOPT3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  OPT4 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  NOPT4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  OPT5 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  NOPT5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  OPT7 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  NOPT7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
IWDG_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     3
  KR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  PR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RLR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
IWDG_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     3
  KR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  PR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RLR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
WWDG_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     2
  CR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  WR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
WWDG_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     2
  CR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  WR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
RST_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
RST_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
SPI_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ICR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CRCPR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
SPI_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     8
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ICR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CRCPR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
UART1_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    11
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
UART1_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    11
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
UART2_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    12
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
UART2_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    12
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
UART3_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    10
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
UART3_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    10
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
CAN_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    24
  MCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  MSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  TSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  TPR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  RFR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  Page . . . . . . . . . . . . . . . .  MEMBER  -----   UNION   000008H    16
CFG_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  GCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
CFG_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     1
  GCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
CLK_SWITCHMODE_MANUAL. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWITCHMODE_AUTO. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SwitchMode_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_CURRENTCLOCKSTATE_DISABLE. . . . . E_CONST  ----- INT      -------  2
CLK_CURRENTCLOCKSTATE_ENABLE . . . . . E_CONST  ----- INT      -------  2
CLK_CurrentClockState_TypeDef. . . . .  TYPEDEF ------- INT   -------     2
CLK_CSSCONFIG_ENABLEWITHIT . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSCONFIG_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSCONFIG_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSConfig_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_SOURCE_HSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SOURCE_LSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SOURCE_HSE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Source_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_HSITRIMVALUE_0 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_1 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_2 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_3 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_4 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_5 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_6 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_7 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITrimValue_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_OUTPUT_HSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_LSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_HSE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPU . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV2 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV4 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV8 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV16. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV32. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV64. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_HSIRC . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_MASTER. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_OTHERS. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Output_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_PERIPHERAL_I2C . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_SPI . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART1 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART2 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART3 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER6. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER5. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER3. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_AWU . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_ADC . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_CAN . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Peripheral_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_FLAG_LSIRDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_HSIRDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_HSERDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_SWIF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_SWBSY . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CSSD. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_AUX . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CCOBSY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CCORDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Flag_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_IT_CSSD. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_IT_SWIF. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_IT_TypeDef . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_PRESCALER_HSIDIV1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV8. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV8. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV16 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV32 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV64 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV128. . . . . . . . E_CONST  ----- INT      -------  2
CLK_Prescaler_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_SWIMDIVIDER_2. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWIMDIVIDER_OTHER. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWIMDivider_TypeDef. . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_DeInit . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_HSECmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_HSICmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_LSICmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_CCOCmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClockSwitchCmd . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_FastHaltWakeUpCmd. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SlowActiveHaltWakeUpCmd. . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_PeripheralClockConfig. . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClockSwitchConfig. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_HSIPrescalerConfig . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_CCOConfig. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ITConfig . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SYSCLKConfig . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SWIMConfig . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClockSecuritySystemEnable. . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SYSCLKEmergencyClear . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_AdjustHSICalibrationValue. . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetClockFreq . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetSYSCLKSource. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetFlagStatus. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetITStatus. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClearITPendingBit. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_SENSITIVITY_FALL_LOW. . . . . . . E_CONST  ----- INT      -------  2
EXTI_SENSITIVITY_RISE_ONLY . . . . . . E_CONST  ----- INT      -------  2
EXTI_SENSITIVITY_FALL_ONLY . . . . . . E_CONST  ----- INT      -------  2
EXTI_SENSITIVITY_RISE_FALL . . . . . . E_CONST  ----- INT      -------  2
EXTI_Sensitivity_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
EXTI_TLISENSITIVITY_FALL_ONLY. . . . . E_CONST  ----- INT      -------  2
EXTI_TLISENSITIVITY_RISE_ONLY. . . . . E_CONST  ----- INT      -------  2
EXTI_TLISensitivity_TypeDef. . . . . .  TYPEDEF ------- INT   -------     2
EXTI_PORT_GPIOA. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOB. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOC. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOD. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_Port_TypeDef. . . . . . . . . . .  TYPEDEF ------- INT   -------     2
EXTI_DeInit. . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_SetExtIntSensitivity. . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_SetTLISensitivity . . . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_GetExtIntSensitivity. . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_GetTLISensitivity . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_MODE_IN_FL_NO_IT. . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_PU_NO_IT. . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_FL_IT . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_PU_IT . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_LOW_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_LOW_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_LOW_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_LOW_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_HIZ_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_HIGH_FAST . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_HIZ_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_HIGH_SLOW . . . . . . E_CONST  ----- INT      -------  2
GPIO_Mode_TypeDef. . . . . . . . . . .  TYPEDEF ------- INT   -------     2
GPIO_PIN_0 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_1 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_2 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_3 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_4 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_5 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_6 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_7 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_LNIB. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_HNIB. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_ALL . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_Pin_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
GPIO_DeInit. . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_Init. . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_Write . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_WriteHigh . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_WriteLow. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_WriteReverse. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ReadInputData . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ReadOutputData. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ReadInputPin. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ExternalPullUpConfig. . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_DATADIRECTION_2LINES_FULLDUPLEX. . E_CONST  ----- INT      -------  2
SPI_DATADIRECTION_2LINES_RXONLY. . . . E_CONST  ----- INT      -------  2
SPI_DATADIRECTION_1LINE_RX . . . . . . E_CONST  ----- INT      -------  2
SPI_DATADIRECTION_1LINE_TX . . . . . . E_CONST  ----- INT      -------  2
SPI_DataDirection_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
SPI_NSS_SOFT . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_NSS_HARD . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_NSS_TypeDef. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_DIRECTION_RX . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_DIRECTION_TX . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_Direction_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_MODE_MASTER. . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_MODE_SLAVE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_Mode_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_BAUDRATEPRESCALER_2. . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_4. . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_8. . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_16 . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_32 . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_64 . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_128. . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_256. . . . . . . E_CONST  ----- INT      -------  2
SPI_BaudRatePrescaler_TypeDef. . . . .  TYPEDEF ------- INT   -------     2
SPI_CLOCKPOLARITY_LOW. . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CLOCKPOLARITY_HIGH . . . . . . . . E_CONST  ----- INT      -------  2
SPI_ClockPolarity_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
SPI_CLOCKPHASE_1EDGE . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CLOCKPHASE_2EDGE . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_ClockPhase_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_FIRSTBIT_MSB . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FIRSTBIT_LSB . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FirstBit_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_CRC_RX . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CRC_TX . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CRC_TypeDef. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_FLAG_BSY . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_OVR . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_MODF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_CRCERR. . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_WKUP. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_TXE . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_RXNE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_Flag_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_IT_WKUP. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_OVR . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_MODF. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_CRCERR. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_TXE . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_RXNE. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_ERR . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_TypeDef . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_DeInit . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_Init . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_Cmd. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ITConfig . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_SendData . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ReceiveData. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_NSSInternalSoftwareCmd . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_TransmitCRC. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_CalculateCRCCmd. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetCRC . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ResetCRC . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetCRCPolynomial . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_BiDirectionalLineConfig. . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetFlagStatus. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ClearFlag. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetITStatus. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ClearITPendingBit. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_PRESCALER_1 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_2 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_4 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_8 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_16. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_32. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_64. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_128 . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_Prescaler_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_OPMODE_SINGLE . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_OPMODE_REPETITIVE . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_OPMode_TypeDef. . . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_PSCRELOADMODE_UPDATE. . . . . . . E_CONST  ----- INT      -------  2
TIM4_PSCRELOADMODE_IMMEDIATE . . . . . E_CONST  ----- INT      -------  2
TIM4_PSCReloadMode_TypeDef . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_UPDATESOURCE_GLOBAL . . . . . . . E_CONST  ----- INT      -------  2
TIM4_UPDATESOURCE_REGULAR. . . . . . . E_CONST  ----- INT      -------  2
TIM4_UpdateSource_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_EVENTSOURCE_UPDATE. . . . . . . . E_CONST  ----- INT      -------  2
TIM4_EventSource_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_FLAG_UPDATE . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_FLAG_TypeDef. . . . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_IT_UPDATE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_IT_TypeDef. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_DeInit. . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_TimeBaseInit. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_Cmd . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ITConfig. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_UpdateDisableConfig . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_UpdateRequestConfig . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_SelectOnePulseMode. . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_PrescalerConfig . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ARRPreloadConfig. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GenerateEvent . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_SetCounter. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_SetAutoreload . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetCounter. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetPrescaler. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetFlagStatus . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ClearFlag . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetITStatus . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ClearITPendingBit . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_WAKEUP_IDLELINE. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_WAKEUP_ADDRESSMARK . . . . . . . E_CONST  ----- INT      -------  2
UART3_WakeUp_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LINBREAKDETECTIONLENGTH_10BITS . E_CONST  ----- INT      -------  2
UART3_LINBREAKDETECTIONLENGTH_11BITS . E_CONST  ----- INT      -------  2
UART3_LINBreakDetectionLength_TypeDef.  TYPEDEF ------- INT   -------     2
UART3_STOPBITS_1 . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_STOPBITS_2 . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_StopBits_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_PARITY_NO. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_PARITY_EVEN. . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_PARITY_ODD . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_Parity_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_WORDLENGTH_8D. . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_WORDLENGTH_9D. . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_WordLength_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_MODE_RX_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_TX_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_TX_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_RX_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_TXRX_ENABLE . . . . . . . . E_CONST  ----- INT      -------  2
UART3_Mode_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LIN_MODE_MASTER. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_LIN_MODE_SLAVE . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_LinMode_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LIN_AUTOSYNC_DISABLE . . . . . . E_CONST  ----- INT      -------  2
UART3_LIN_AUTOSYNC_ENABLE. . . . . . . E_CONST  ----- INT      -------  2
UART3_LinAutosync_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LIN_DIVUP_LBRR1. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_LIN_DIVUP_NEXTRXNE . . . . . . . E_CONST  ----- INT      -------  2
UART3_LinDivUp_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_FLAG_TXE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_TC. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_RXNE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_IDLE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_OR_LHE. . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_NF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_FE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_PE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_SBK . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_LBDF. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_LHDF. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_LSF . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_Flag_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_IT_TXE . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_TC. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_RXNE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_IDLE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_OR. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_PE. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_LBDF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_LHDF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_RXNE_OR . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_DeInit . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_Init . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_Cmd. . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ITConfig . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_LINBreakDetectionConfig. . . . .  EXTERN  CODE    PROC    ------- -----
UART3_LINConfig. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_LINCmd . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ReceiverWakeUpCmd. . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_WakeUpConfig . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ReceiveData8 . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ReceiveData9 . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SendData8. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SendData9. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SendBreak. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SetAddress . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_GetFlagStatus. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ClearFlag. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_GetITStatus. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ClearITPendingBit. . . . . . . .  EXTERN  CODE    PROC    ------- -----
assert_failed. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_fctptr_t. . . . . . . . . . . . . . .  TYPEDEF ------- PTR     -------     2
_halt_ . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_jmp_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_nop_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_rim_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_sim_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_trap_ . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_wfe_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_wfi_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_getCC_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_setCC_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_getSP_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_setSP_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_swapbyte_ . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_swapnibble_ . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_PRESSEL_FCPU_D2 . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_PRESSEL_FCPU_D3 . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_PRESSEL_FCPU_D4 . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_PRESSEL_FCPU_D6 . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_PRESSEL_FCPU_D8 . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_PRESSEL_FCPU_D10. . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_PRESSEL_FCPU_D12. . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_PRESSEL_FCPU_D18. . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_PresSel_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
ADC2_EXTTRIG_TIM . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_EXTTRIG_GPIO. . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_ExtTrig_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
ADC2_ALIGN_LEFT. . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_ALIGN_RIGHT . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_Align_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
ADC2_SCHMITTTRIG_CHANNEL0. . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL1. . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL2. . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL3. . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL4. . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL5. . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL6. . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL7. . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL8. . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL9. . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL10 . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL11 . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL12 . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL13 . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL14 . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_CHANNEL15 . . . . . . E_CONST  ----- INT      -------  2
ADC2_SCHMITTTRIG_ALL . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_SchmittTrigg_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
ADC2_CONVERSIONMODE_SINGLE . . . . . . E_CONST  ----- INT      -------  2
ADC2_CONVERSIONMODE_CONTINUOUS . . . . E_CONST  ----- INT      -------  2
ADC2_ConvMode_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
ADC2_CHANNEL_0 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_1 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_2 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_3 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_4 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_5 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_6 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_7 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_8 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_9 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_10. . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_11. . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_12. . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_13. . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_14. . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_CHANNEL_15. . . . . . . . . . . . E_CONST  ----- INT      -------  2
ADC2_Channel_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
ADC2_DeInit. . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_Init. . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_Cmd . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_ITConfig. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_PrescalerConfig . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_SchmittTriggerConfig. . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_ConversionConfig. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_ExternalTriggerConfig . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_StartConversion . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_GetConversionValue. . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_GetFlagStatus . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_ClearFlag . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_GetITStatus . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_ClearITPendingBit . . . . . . . .  EXTERN  CODE    PROC    ------- -----
ADC2_DeInit. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
ADC2_Init. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 ADC2_ConversionMode?245 . . . . . . .  PARAM   AUTO    ENUM    000000H     2
 ADC2_Channel?246. . . . . . . . . . .  PARAM   AUTO    ENUM    000004H     2
 ADC2_PrescalerSelection?247 . . . . .  PARAM   AUTO    ENUM    000006H     2
 ADC2_ExtTrigger?248 . . . . . . . . .  PARAM   AUTO    ENUM    000008H     2
 ADC2_ExtTriggerState?249. . . . . . .  PARAM   AUTO    ENUM    00000AH     2
 ADC2_Align?250. . . . . . . . . . . .  PARAM   AUTO    ENUM    00000CH     2
 ADC2_SchmittTriggerChannel?251. . . .  PARAM   AUTO    ENUM    00000EH     2
 ADC2_SchmittTriggerState?252. . . . .  PARAM   AUTO    ENUM    000010H     2
ADC2_Cmd . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 NewState?253. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
ADC2_ITConfig. . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 NewState?254. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
ADC2_PrescalerConfig . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 ADC2_Prescaler?255. . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
ADC2_SchmittTriggerConfig. . . . . . .  PUBLIC  CODE    PROC    ------- -----
 ADC2_SchmittTriggerChannel?256. . . .  PARAM   AUTO    ENUM    000006H     2
 NewState?257. . . . . . . . . . . . .  PARAM   AUTO    ENUM    00000AH     2
ADC2_ConversionConfig. . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 ADC2_ConversionMode?258 . . . . . . .  PARAM   AUTO    ENUM    000000H     2
 ADC2_Channel?259. . . . . . . . . . .  PARAM   AUTO    ENUM    000004H     2
 ADC2_Align?260. . . . . . . . . . . .  PARAM   AUTO    ENUM    000006H     2
ADC2_ExternalTriggerConfig . . . . . .  PUBLIC  CODE    PROC    ------- -----
 ADC2_ExtTrigger?261 . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
 NewState?262. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000004H     2
ADC2_StartConversion . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
  temph?268. . . . . . . . . . . . . .  PUBLIC  AUTO    U_INT   000000H     2
  templ?270. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
ADC2_GetConversionValue. . . . . . . .  PUBLIC  CODE    PROC    ------- -----
  temph?268. . . . . . . . . . . . . .  PUBLIC  AUTO    U_INT   000000H     2
  templ?270. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000002H     1
ADC2_GetFlagStatus . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
ADC2_ClearFlag . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
ADC2_GetITStatus . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
ADC2_ClearITPendingBit . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
assert_failed. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
?BH. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
?CH. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
?CL. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
?BL. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
RCSTM8 COMPILER V2.44.12.199


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1149    ----
   CONSTANT SIZE    =     62    ----
   DATA SIZE        =   ----    ----
   PAGE0 SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

RCSTM8 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
