RCSTM8 COMPILER V2.44.12.199,  STM8S_SPI          11/13/12  11:07:58

QCW(0x009A3FE0)

RCSTM8 COMPILER V2.44.12.199, COMPILATION OF MODULE STM8S_SPI 
OBJECT MODULE PLACED IN Debug\stm8s_spi.o
COMPILER INVOKED BY: OBJECT(Debug\stm8s_spi.o) PIN(C:\Raisonance\Ride\inc\STM8) PIN(C:\Raisonance\Ride\inc\ST7) PIN(C:\Raisonance\Ride\inc) WRV(0) STM8(SMALL) DEBUG DGC(data) AUTO OT(7,SIZE) PR(Debug\stm8s_spi.lst) CD CO SB INITSTATICVAR LAOB PIN(..\..\..\..\libraries\stm8s_stdperiph_driver\inc) PIN(..\..\inc) DEFINE(STM8AF52Ax) 

stmt level    source
   1          /**
   2            ******************************************************************************
   3            * @file    stm8s_spi.c
   4            * @author  MCD Application Team
   5            * @version V2.1.0
   6            * @date    18-November-2011
   7            * @brief   This file contains all the functions for the SPI peripheral.
   8            ******************************************************************************
   9            * @attention
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19            ******************************************************************************
  20            */
  21          
  22          /* Includes ------------------------------------------------------------------*/
  23          #include "stm8s_spi.h"
  24          
  25          /** @addtogroup STM8S_StdPeriph_Driver
  26            * @{
  27            */
  28            
  29          /* Private define ------------------------------------------------------------*/
  30          /* Private macro -------------------------------------------------------------*/
  31          /* Private variables ---------------------------------------------------------*/
  32          /* Private function prototypes -----------------------------------------------*/
  33          /* Private functions ---------------------------------------------------------*/
  34          
  35          /** @addtogroup SPI_Public_Functions
  36            * @{
  37            */
  38          
  39          /**
  40            * @brief  Deinitializes the SPI peripheral registers to their default reset values.
  41            * @param  None
  42            * @retval None
  43            */
  44          void SPI_DeInit(void)
  45          {
  46   1          SPI->CR1    = SPI_CR1_RESET_VALUE;
  47   1          SPI->CR2    = SPI_CR2_RESET_VALUE;
  48   1          SPI->ICR    = SPI_ICR_RESET_VALUE;
  49   1          SPI->SR     = SPI_SR_RESET_VALUE;
  50   1          SPI->CRCPR  = SPI_CRCPR_RESET_VALUE;
  51   1      }
  52          
  53          /**
  54            * @brief  Initializes the SPI according to the specified parameters.
  55            * @param  FirstBit : This parameter can be any of the 
  56            *         @ref SPI_FirstBit_TypeDef enumeration.
  57            * @param  BaudRatePrescaler : This parameter can be any of the 
  58            *         @ref SPI_BaudRatePrescaler_TypeDef enumeration.
  59            * @param  Mode : This parameter can be any of the  
  60            *         @ref SPI_Mode_TypeDef enumeration.
  61            * @param  ClockPolarity : This parameter can be any of the 
  62            *         @ref SPI_ClockPolarity_TypeDef enumeration.
  63            * @param  ClockPhase : This parameter can be any of the 
  64            *         @ref SPI_ClockPhase_TypeDef enumeration.
  65            * @param  Data_Direction : This parameter can be any of the 
  66            *         @ref SPI_DataDirection_TypeDef enumeration.
  67            * @param  Slave_Management : This parameter can be any of the 
  68            *         @ref SPI_NSS_TypeDef enumeration.
  69            * @param  CRCPolynomial : Configures the CRC polynomial.
  70            * @retval None
  71            */
  72          void SPI_Init(SPI_FirstBit_TypeDef FirstBit, SPI_BaudRatePrescaler_TypeDef BaudRatePrescaler, SPI_Mode_TypeDef Mode, SPI_ClockPolarity_TypeDef ClockPolarity, SPI_ClockPhase_TypeDef ClockPhase, SPI_DataDirection_TypeDef Data_Direction, SPI_NSS_TypeDef Slave_Management, uint8_t CRCPolynomial)
  73          {
  74   1          /* Check structure elements */
  75   1          assert_param(IS_SPI_FIRSTBIT_OK(FirstBit));
  76   1          assert_param(IS_SPI_BAUDRATE_PRESCALER_OK(BaudRatePrescaler));
  77   1          assert_param(IS_SPI_MODE_OK(Mode));
  78   1          assert_param(IS_SPI_POLARITY_OK(ClockPolarity));
  79   1          assert_param(IS_SPI_PHASE_OK(ClockPhase));
  80   1          assert_param(IS_SPI_DATA_DIRECTION_OK(Data_Direction));
  81   1          assert_param(IS_SPI_SLAVEMANAGEMENT_OK(Slave_Management));
  82   1          assert_param(IS_SPI_CRC_POLYNOMIAL_OK(CRCPolynomial));
  83   1      
  84   1          /* Frame Format, BaudRate, Clock Polarity and Phase configuration */
  85   1          SPI->CR1 = (uint8_t)((uint8_t)((uint8_t)FirstBit | BaudRatePrescaler) |
  86   1                          (uint8_t)((uint8_t)ClockPolarity | ClockPhase));
  87   1      
  88   1          /* Data direction configuration: BDM, BDOE and RXONLY bits */
  89   1          SPI->CR2 = (uint8_t)((uint8_t)(Data_Direction) | (uint8_t)(Slave_Management));
  90   1      
  91   1          if (Mode == SPI_MODE_MASTER)
  92   1          {
  93   2              SPI->CR2 |= (uint8_t)SPI_CR2_SSI;
  94   2          }
  95   1          else
  96   1          {
  97   2              SPI->CR2 &= (uint8_t)~(SPI_CR2_SSI);
  98   2          }
  99   1      
 100   1          /* Master/Slave mode configuration */
 101   1          SPI->CR1 |= (uint8_t)(Mode);
 102   1      
 103   1          /* CRC configuration */
 104   1          SPI->CRCPR = (uint8_t)CRCPolynomial;
 105   1      }
 106          
 107          /**
 108            * @brief  Enables or disables the SPI peripheral.
 109            * @param  NewState New state of the SPI peripheral.
 110            *         This parameter can be: ENABLE or DISABLE
 111            * @retval None
 112            */
 113          void SPI_Cmd(FunctionalState NewState)
 114          {
 115   1          /* Check function parameters */
 116   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 117   1      
 118   1          if (NewState != DISABLE)
 119   1          {
 120   2              SPI->CR1 |= SPI_CR1_SPE; /* Enable the SPI peripheral*/
 121   2          }
 122   1          else
 123   1          {
 124   2              SPI->CR1 &= (uint8_t)(~SPI_CR1_SPE); /* Disable the SPI peripheral*/
 125   2          }
 126   1      }
 127          
 128          /**
 129            * @brief  Enables or disables the specified interrupts.
 130            * @param  SPI_IT Specifies the SPI interrupts sources to be enabled or disabled.
 131            * @param  NewState: The new state of the specified SPI interrupts.
 132            *         This parameter can be: ENABLE or DISABLE.
 133            * @retval None
 134            */
 135          void SPI_ITConfig(SPI_IT_TypeDef SPI_IT, FunctionalState NewState)
 136          {
 137   1          uint8_t itpos = 0;
 138   1          /* Check function parameters */
 139   1          assert_param(IS_SPI_CONFIG_IT_OK(SPI_IT));
 140   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 141   1      
 142   1          /* Get the SPI IT index */
 143   1          itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)SPI_IT & (uint8_t)0x0F));
 144   1      
 145   1          if (NewState != DISABLE)
 146   1          {
 147   2              SPI->ICR |= itpos; /* Enable interrupt*/
 148   2          }
 149   1          else
 150   1          {
 151   2              SPI->ICR &= (uint8_t)(~itpos); /* Disable interrupt*/
 152   2          }
 153   1      }
 154          /**
 155            * @brief  Transmits a Data through the SPI peripheral.
 156            * @param  Data : Byte to be transmitted.
 157            * @retval None
 158            */
 159          void SPI_SendData(uint8_t Data)
 160          {
 161   1          SPI->DR = Data; /* Write in the DR register the data to be sent*/
 162   1      }
 163          
 164          /**
 165            * @brief  Returns the most recent received data by the SPI peripheral.
 166            * @param  None
 167            * @retval The value of the received data.
 168            */
 169          uint8_t SPI_ReceiveData(void)
 170          {
 171   1          return ((uint8_t)SPI->DR); /* Return the data in the DR register*/
 172   1      }
 173          
 174          /**
 175            * @brief  Configures internally by software the NSS pin.
 176            * @param  NewState Indicates the new state of the SPI Software slave management.
 177            *         This parameter can be: ENABLE or DISABLE.
 178            * @retval None
 179            */
 180          void SPI_NSSInternalSoftwareCmd(FunctionalState NewState)
 181          {
 182   1          /* Check function parameters */
 183   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 184   1      
 185   1          if (NewState != DISABLE)
 186   1          {
 187   2              SPI->CR2 |= SPI_CR2_SSI; /* Set NSS pin internally by software*/
 188   2          }
 189   1          else
 190   1          {
 191   2              SPI->CR2 &= (uint8_t)(~SPI_CR2_SSI); /* Reset NSS pin internally by software*/
 192   2          }
 193   1      }
 194          
 195          /**
 196            * @brief  Enables the transmit of the CRC value.
 197            * @param  None
 198            * @retval None
 199            */
 200          void SPI_TransmitCRC(void)
 201          {
 202   1          SPI->CR2 |= SPI_CR2_CRCNEXT; /* Enable the CRC transmission*/
 203   1      }
 204          
 205          /**
 206            * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 207            * @param  NewState Indicates the new state of the SPI CRC value calculation.
 208            *         This parameter can be: ENABLE or DISABLE.
 209            * @retval None
 210            */
 211          void SPI_CalculateCRCCmd(FunctionalState NewState)
 212          {
 213   1          /* Check function parameters */
 214   1          assert_param(IS_FUNCTIONALSTATE_OK(NewState));
 215   1      
 216   1          if (NewState != DISABLE)
 217   1          {
 218   2              SPI->CR2 |= SPI_CR2_CRCEN; /* Enable the CRC calculation*/
 219   2          }
 220   1          else
 221   1          {
 222   2              SPI->CR2 &= (uint8_t)(~SPI_CR2_CRCEN); /* Disable the CRC calculation*/
 223   2          }
 224   1      }
 225          
 226          /**
 227            * @brief  Returns the transmit or the receive CRC register value.
 228            * @param  SPI_CRC Specifies the CRC register to be read.
 229            * @retval The selected CRC register value.
 230            */
 231          uint8_t SPI_GetCRC(SPI_CRC_TypeDef SPI_CRC)
 232          {
 233   1          uint8_t crcreg = 0;
 234   1      
 235   1          /* Check function parameters */
 236   1          assert_param(IS_SPI_CRC_OK(SPI_CRC));
 237   1      
 238   1          if (SPI_CRC != SPI_CRC_RX)
 239   1          {
 240   2              crcreg = SPI->TXCRCR;  /* Get the Tx CRC register*/
 241   2          }
 242   1          else
 243   1          {
 244   2              crcreg = SPI->RXCRCR; /* Get the Rx CRC register*/
 245   2          }
 246   1      
 247   1          /* Return the selected CRC register status*/
 248   1          return crcreg;
 249   1      }
 250          
 251          /**
 252            * @brief  Reset the Rx CRCR and Tx CRCR registers.
 253            * @param  None
 254            * @retval None
 255            */
 256          void SPI_ResetCRC(void)
 257          {
 258   1          /* Rx CRCR & Tx CRCR registers are reset when CRCEN (hardware calculation)
 259   1             bit in SPI_CR2 is written to 1 (enable) */
 260   1          SPI_CalculateCRCCmd(ENABLE);
 261   1      
 262   1          /* Previous function disable the SPI */
 263   1          SPI_Cmd(ENABLE);
 264   1      }
 265          
 266          /**
 267            * @brief  Returns the CRC Polynomial register value.
 268            * @param  None
 269            * @retval The CRC Polynomial register value.
 270            */
 271          uint8_t SPI_GetCRCPolynomial(void)
 272          {
 273   1          return SPI->CRCPR; /* Return the CRC polynomial register */
 274   1      }
 275          
 276          /**
 277            * @brief  Selects the data transfer direction in bi-directional mode.
 278            * @param  SPI_Direction Specifies the data transfer direction in bi-directional mode.
 279            * @retval None
 280            */
 281          void SPI_BiDirectionalLineConfig(SPI_Direction_TypeDef SPI_Direction)
 282          {
 283   1          /* Check function parameters */
 284   1          assert_param(IS_SPI_DIRECTION_OK(SPI_Direction));
 285   1      
 286   1          if (SPI_Direction != SPI_DIRECTION_RX)
 287   1          {
 288   2              SPI->CR2 |= SPI_CR2_BDOE; /* Set the Tx only mode*/
 289   2          }
 290   1          else
 291   1          {
 292   2              SPI->CR2 &= (uint8_t)(~SPI_CR2_BDOE); /* Set the Rx only mode*/
 293   2          }
 294   1      }
 295          
 296          /**
 297            * @brief  Checks whether the specified SPI flag is set or not.
 298            * @param  SPI_FLAG : Specifies the flag to check.
 299            *         This parameter can be any of the @ref SPI_FLAG_TypeDef enumeration.
 300            * @retval FlagStatus : Indicates the state of SPI_FLAG.
 301            *         This parameter can be any of the @ref FlagStatus enumeration.
 302            */
 303          
 304          FlagStatus SPI_GetFlagStatus(SPI_Flag_TypeDef SPI_FLAG)
 305          {
 306   1          FlagStatus status = RESET;
 307   1          /* Check parameters */
 308   1          assert_param(IS_SPI_FLAGS_OK(SPI_FLAG));
 309   1      
 310   1          /* Check the status of the specified SPI flag */
 311   1          if ((SPI->SR & (uint8_t)SPI_FLAG) != (uint8_t)RESET)
 312   1          {
 313   2              status = SET; /* SPI_FLAG is set */
 314   2          }
 315   1          else
 316   1          {
 317   2              status = RESET; /* SPI_FLAG is reset*/
 318   2          }
 319   1      
 320   1          /* Return the SPI_FLAG status */
 321   1          return status;
 322   1      }
 323          
 324          /**
 325            * @brief  Clears the SPI flags.
 326            * @param  SPI_FLAG : Specifies the flag to clear.
 327            *         This parameter can be one of the following values:
 328            *         - SPI_FLAG_CRCERR
 329            *         - SPI_FLAG_WKUP
 330            * @note   - OVR (OverRun Error) interrupt pending bit is cleared by software
 331            *         sequence:
 332            *         a read operation to SPI_DR register (SPI_ReceiveData()) followed by
 333            *         a read operation to SPI_SR register (SPI_GetFlagStatus()).
 334            *         - MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
 335            *         a read/write operation to SPI_SR register (SPI_GetFlagStatus()) followed by
 336            *         a write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
 337            * @retval None
 338            */
 339          void SPI_ClearFlag(SPI_Flag_TypeDef SPI_FLAG)
 340          {
 341   1          assert_param(IS_SPI_CLEAR_FLAGS_OK(SPI_FLAG));
 342   1          /* Clear the flag bit */
 343   1          SPI->SR = (uint8_t)(~SPI_FLAG);
 344   1      }
 345          
 346          /**
 347            * @brief  Checks whether the specified interrupt has occurred or not.
 348            * @param  SPI_IT: Specifies the SPI interrupt pending bit to check.
 349            *         This parameter can be one of the following values:
 350            *         - SPI_IT_CRCERR
 351            *         - SPI_IT_WKUP
 352            *         - SPI_IT_OVR
 353            *         - SPI_IT_MODF
 354            *         - SPI_IT_RXNE
 355            *         - SPI_IT_TXE
 356            * @retval ITStatus : Indicates the state of the SPI_IT.
 357            *         This parameter can be any of the @ref ITStatus enumeration.
 358            */
 359          ITStatus SPI_GetITStatus(SPI_IT_TypeDef SPI_IT)
 360          {
 361   1          ITStatus pendingbitstatus = RESET;
 362   1          uint8_t itpos = 0;
 363   1          uint8_t itmask1 = 0;
 364   1          uint8_t itmask2 = 0;
 365   1          uint8_t enablestatus = 0;
 366   1          assert_param(IS_SPI_GET_IT_OK(SPI_IT));
 367   1          /* Get the SPI IT index */
 368   1          itpos = (uint8_t)((uint8_t)1 << ((uint8_t)SPI_IT & (uint8_t)0x0F));
 369   1      
 370   1          /* Get the SPI IT mask */
 371   1          itmask1 = (uint8_t)((uint8_t)SPI_IT >> (uint8_t)4);
 372   1          /* Set the IT mask */
 373   1          itmask2 = (uint8_t)((uint8_t)1 << itmask1);
 374   1          /* Get the SPI_ITPENDINGBIT enable bit status */
 375   1          enablestatus = (uint8_t)((uint8_t)SPI->SR & itmask2);
 376   1          /* Check the status of the specified SPI interrupt */
 377   1          if (((SPI->ICR & itpos) != RESET) && enablestatus)
 378   1          {
 379   2              /* SPI_ITPENDINGBIT is set */
 380   2              pendingbitstatus = SET;
 381   2          }
 382   1          else
 383   1          {
 384   2              /* SPI_ITPENDINGBIT is reset */
 385   2              pendingbitstatus = RESET;
 386   2          }
 387   1          /* Return the SPI_ITPENDINGBIT status */
 388   1          return  pendingbitstatus;
 389   1      }
 390          /**
 391            * @brief  Clears the interrupt pending bits.
 392            * @param  SPI_IT: Specifies the interrupt pending bit to clear.
 393            *         This parameter can be one of the following values:
 394            *         - SPI_IT_CRCERR
 395            *         - SPI_IT_WKUP
 396            * @note   - OVR (OverRun Error) interrupt pending bit is cleared by software sequence:
 397            *         a read operation to SPI_DR register (SPI_ReceiveData()) followed by
 398            *         a read operation to SPI_SR register (SPI_GetITStatus()).
 399            *         - MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
 400            *         a read/write operation to SPI_SR register (SPI_GetITStatus()) followed by
 401            *         a write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
 402            * @retval None
 403            */
 404          void SPI_ClearITPendingBit(SPI_IT_TypeDef SPI_IT)
 405          {
 406   1          uint8_t itpos = 0;
 407   1          assert_param(IS_SPI_CLEAR_IT_OK(SPI_IT));
 408   1      
 409   1          /* Clear  SPI_IT_CRCERR or SPI_IT_WKUP interrupt pending bits */
 410   1      
 411   1          /* Get the SPI pending bit index */
 412   1          itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)(SPI_IT & (uint8_t)0xF0) >> 4));
 413   1          /* Clear the pending bit */
 414   1          SPI->SR = (uint8_t)(~itpos);
 415   1      
 416   1      }
 417          /**
 418            * @}
 419            */
 420            
 421          /**
 422            * @}
 423            */
 424            
 425          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
 426          
RCSTM8 COMPILER V2.44.12.199
ASSEMBLY LISTING OF GENERATED OBJECT CODE

              ; FUNCTION ?SPI_DeInit (BEGIN)
              ; SOURCE LINE # 46 
0000 725F5200                          CLR    05200H
              ; SOURCE LINE # 47 
0004 725F5201                          CLR    05201H
              ; SOURCE LINE # 48 
0008 725F5202                          CLR    05202H
              ; SOURCE LINE # 49 
000C 35025203                          MOV    05203H,#002H
              ; SOURCE LINE # 50 
0010 35075205                          MOV    05205H,#007H
              ; SOURCE LINE # 51 
0014 81                                RET    

              ; FUNCTION ?SPI_DeInit (END)

              ; FUNCTION ?SPI_Init (BEGIN)
              ; Register-parameter FirstBit (XW) is relocated (AUTO)
              ; SOURCE LINE # 72 
0000 89                                PUSHW  X
              ; SOURCE LINE # 75 
0001 5D                                TNZW   X
0002 2711                              JREQ   ?NXT_0009
0004 A30080                            CPW    X,#00080H
0007 270C                              JREQ   ?NXT_0009
0009 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
000C         ?DATASTART_0008:
000C 4B                             M  DB     04BH
000D         ?DATAEND_0008:
000D AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
0010 CD0000     F                      CALL   ?assert_failed
0013 5B04                              ADD    SP,#004H
0015         ?NXT_0009:
              ; SOURCE LINE # 76 
0015 1E05       F                      LDW    X,(005H,SP)   ; [ BaudRatePrescaler ]
0017 272F                              JREQ   ?NXT_0010
0019 A30008                            CPW    X,#00008H
001C 272A                              JREQ   ?NXT_0010
001E A30010                            CPW    X,#00010H
0021 2725                              JREQ   ?NXT_0010
0023 A30018                            CPW    X,#00018H
0026 2720                              JREQ   ?NXT_0010
0028 A30020                            CPW    X,#00020H
002B 271B                              JREQ   ?NXT_0010
002D A30028                            CPW    X,#00028H
0030 2716                              JREQ   ?NXT_0010
0032 A30030                            CPW    X,#00030H
0035 2711                              JREQ   ?NXT_0010
0037 A30038                            CPW    X,#00038H
003A 270C                              JREQ   ?NXT_0010
003C CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
003F         ?DATASTART_0009:
003F 4C                             M  DB     04CH
0040         ?DATAEND_0009:
0040 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
0043 CD0000     F                      CALL   ?assert_failed
0046 5B04                              ADD    SP,#004H
0048         ?NXT_0010:
              ; SOURCE LINE # 77 
0048 AE0004                            LDW    X,#00004H
004B 1307       F                      CPW    X,(007H,SP)   ; [ Mode ]
004D 2710                              JREQ   ?NXT_0011
004F 1E07       F                      LDW    X,(007H,SP)   ; [ Mode ]
0051 270C                              JREQ   ?NXT_0011
0053 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0056         ?DATASTART_0010:
0056 4D                             M  DB     04DH
0057         ?DATAEND_0010:
0057 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
005A CD0000     F                      CALL   ?assert_failed
005D 5B04                              ADD    SP,#004H
005F         ?NXT_0011:
              ; SOURCE LINE # 78 
005F 1E09       F                      LDW    X,(009H,SP)   ; [ ClockPolarity ]
0061 2711                              JREQ   ?NXT_0012
0063 A30002                            CPW    X,#00002H
0066 270C                              JREQ   ?NXT_0012
0068 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
006B         ?DATASTART_0011:
006B 4E                             M  DB     04EH
006C         ?DATAEND_0011:
006C AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
006F CD0000     F                      CALL   ?assert_failed
0072 5B04                              ADD    SP,#004H
0074         ?NXT_0012:
              ; SOURCE LINE # 79 
0074 1E0B       F                      LDW    X,(00BH,SP)   ; [ ClockPhase ]
0076 270F                              JREQ   ?NXT_0013
0078 5A                                DECW   X
0079 270C                              JREQ   ?NXT_0013
007B CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
007E         ?DATASTART_0012:
007E 4F                             M  DB     04FH
007F         ?DATAEND_0012:
007F AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
0082 CD0000     F                      CALL   ?assert_failed
0085 5B04                              ADD    SP,#004H
0087         ?NXT_0013:
              ; SOURCE LINE # 80 
0087 1E0D       F                      LDW    X,(00DH,SP)   ; [ Data_Direction ]
0089 271B                              JREQ   ?NXT_0014
008B A30004                            CPW    X,#00004H
008E 2716                              JREQ   ?NXT_0014
0090 A30080                            CPW    X,#00080H
0093 2711                              JREQ   ?NXT_0014
0095 A300C0                            CPW    X,#000C0H
0098 270C                              JREQ   ?NXT_0014
009A CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
009D         ?DATASTART_0013:
009D 50                             M  DB     050H
009E         ?DATAEND_0013:
009E AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
00A1 CD0000     F                      CALL   ?assert_failed
00A4 5B04                              ADD    SP,#004H
00A6         ?NXT_0014:
              ; SOURCE LINE # 81 
00A6 AE0002                            LDW    X,#00002H
00A9 130F       F                      CPW    X,(00FH,SP)   ; [ Slave_Management ]
00AB 2710                              JREQ   ?NXT_0015
00AD 1E0F       F                      LDW    X,(00FH,SP)   ; [ Slave_Management ]
00AF 270C                              JREQ   ?NXT_0015
00B1 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
00B4         ?DATASTART_0014:
00B4 51                             M  DB     051H
00B5         ?DATAEND_0014:
00B5 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
00B8 CD0000     F                      CALL   ?assert_failed
00BB 5B04                              ADD    SP,#004H
00BD         ?NXT_0015:
              ; SOURCE LINE # 82 
00BD 7B11       F                      LD     A,(011H,SP)   ; [ CRCPolynomial ]
00BF A101                              CP     A,#001H
00C1 240C                              JRUGE  ?NXT_0016
00C3 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
00C6         ?DATASTART_0015:
00C6 52                             M  DB     052H
00C7         ?DATAEND_0015:
00C7 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
00CA CD0000     F                      CALL   ?assert_failed
00CD 5B04                              ADD    SP,#004H
00CF         ?NXT_0016:
              ; SOURCE LINE # 86 
00CF 7B0A       F                      LD     A,(00AH,SP)   ; [ ClockPolarity + 01H ]
00D1 1A0C       F                      OR     A,(00CH,SP)   ; [ ClockPhase + 01H ]
00D3 B706       F                      LD     ?CL,A
00D5 7B02       F                      LD     A,(002H,SP)   ; [ FirstBit + 01H ]
00D7 1A06       F                      OR     A,(006H,SP)   ; [ BaudRatePrescaler + 01H ]
00D9 BA06       F                      OR     A,?CL
00DB C75200                            LD     05200H,A
              ; SOURCE LINE # 89 
00DE 7B0E       F                      LD     A,(00EH,SP)   ; [ Data_Direction + 01H ]
00E0 1A10       F                      OR     A,(010H,SP)   ; [ Slave_Management + 01H ]
00E2 C75201                            LD     05201H,A
              ; SOURCE LINE # 91 
00E5 AE0004                            LDW    X,#00004H
00E8 1307       F                      CPW    X,(007H,SP)   ; [ Mode ]
00EA 2606                              JRNE   ?ELSE_0017
              ; SOURCE LINE # 93 
00EC 72105201                          BSET   05201H,#000H
00F0 2004                              JRA    ?NXT_0017
00F2         ?ELSE_0017:
              ; SOURCE LINE # 97 
00F2 72115201                          BRES   05201H,#000H
00F6         ?NXT_0017:
              ; SOURCE LINE # 101 
00F6 C65200                            LD     A,05200H
00F9 1A08       F                      OR     A,(008H,SP)   ; [ Mode + 01H ]
00FB C75200                            LD     05200H,A
              ; SOURCE LINE # 104 
00FE 7B11       F                      LD     A,(011H,SP)   ; [ CRCPolynomial ]
0100 C75205                            LD     05205H,A
              ; SOURCE LINE # 105 
0103 85                                POPW   X
0104 81                                RET    
              ; FirstBit     (size=2).  parameter in AUTO
              ; BaudRatePrescaler (size=2).  parameter in AUTO
              ; Mode         (size=2).  parameter in AUTO
              ; ClockPolarity (size=2).  parameter in AUTO
              ; ClockPhase   (size=2).  parameter in AUTO
              ; Data_Direction (size=2).  parameter in AUTO
              ; Slave_Management (size=2).  parameter in AUTO
              ; CRCPolynomial unsigned char  (size=1).  parameter in AUTO

              ; FUNCTION ?SPI_Init (END)

              ; FUNCTION ?SPI_Cmd (BEGIN)
              ; Register-parameter NewState (XW) is relocated (AUTO)
              ; SOURCE LINE # 113 
0000 89                                PUSHW  X
              ; SOURCE LINE # 116 
0001 5D                                TNZW   X
0002 270F                              JREQ   ?NXT_0020
0004 5A                                DECW   X
0005 270C                              JREQ   ?NXT_0020
0007 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
000A         ?DATASTART_0017:
000A 74                             M  DB     074H
000B         ?DATAEND_0017:
000B AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
000E CD0000     F                      CALL   ?assert_failed
0011 5B04                              ADD    SP,#004H
0013         ?NXT_0020:
              ; SOURCE LINE # 118 
0013 1E01       F                      LDW    X,(001H,SP)   ; [ NewState ]
0015 2706                              JREQ   ?ELSE_0021
              ; SOURCE LINE # 120 
0017 721C5200                          BSET   05200H,#006H
001B 2004                              JRA    ?EPILOG_0002
001D         ?ELSE_0021:
              ; SOURCE LINE # 124 
001D 721D5200                          BRES   05200H,#006H
0021         ?EPILOG_0002:
              ; SOURCE LINE # 126 
0021 85                                POPW   X
0022 81                                RET    
              ; NewState     (size=2).  parameter in AUTO

              ; FUNCTION ?SPI_Cmd (END)

              ; FUNCTION ?SPI_ITConfig (BEGIN)
              ; Register-parameter SPI_IT (XW) is relocated (AUTO)
              ; SOURCE LINE # 135 
0000 89                                PUSHW  X
0001 88                                PUSH   A
              ; SOURCE LINE # 139 
0002 AE0017                            LDW    X,#00017H
0005 1302       F                      CPW    X,(002H,SP)   ; [ SPI_IT ]
0007 271F                              JREQ   ?NXT_0025
0009 AE0006                            LDW    X,#00006H
000C 1302       F                      CPW    X,(002H,SP)   ; [ SPI_IT ]
000E 2718                              JREQ   ?NXT_0025
0010 5A                                DECW   X
0011 1302       F                      CPW    X,(002H,SP)   ; [ SPI_IT ]
0013 2713                              JREQ   ?NXT_0025
0015 AE0034                            LDW    X,#00034H
0018 1302       F                      CPW    X,(002H,SP)   ; [ SPI_IT ]
001A 270C                              JREQ   ?NXT_0025
001C CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
001F         ?DATASTART_0020:
001F 8B                             M  DB     08BH
0020         ?DATAEND_0020:
0020 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
0023 CD0000     F                      CALL   ?assert_failed
0026 5B04                              ADD    SP,#004H
0028         ?NXT_0025:
              ; SOURCE LINE # 140 
0028 1E06       F                      LDW    X,(006H,SP)   ; [ NewState ]
002A 270F                              JREQ   ?NXT_0026
002C 5A                                DECW   X
002D 270C                              JREQ   ?NXT_0026
002F CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0032         ?DATASTART_0021:
0032 8C                             M  DB     08CH
0033         ?DATAEND_0021:
0033 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
0036 CD0000     F                      CALL   ?assert_failed
0039 5B04                              ADD    SP,#004H
003B         ?NXT_0026:
              ; SOURCE LINE # 143 
003B 5F                                CLRW   X
003C 5C                                INCW   X
003D 7B03       F                      LD     A,(003H,SP)   ; [ SPI_IT + 01H ]
003F A40F                              AND    A,#00FH
0041 CD0000     F                      CALL   ?C?sll168
0044 9F                                LD     A,XL
0045 6B01       F                      LD     (001H,SP),A   ; [ itpos ]
              ; SOURCE LINE # 145 
0047 1E06       F                      LDW    X,(006H,SP)   ; [ NewState ]
0049 2707                              JREQ   ?ELSE_0027
              ; SOURCE LINE # 147 
004B C65202                            LD     A,05202H
004E 1A01       F                      OR     A,(001H,SP)   ; [ itpos ]
0050 2006                              JRA    ?EPILOG_0003
0052         ?ELSE_0027:
              ; SOURCE LINE # 151 
0052 7B01       F                      LD     A,(001H,SP)   ; [ itpos ]
0054 43                                CPL    A
0055 C45202                            AND    A,05202H
0058         ?EPILOG_0003:
0058 C75202                            LD     05202H,A
              ; SOURCE LINE # 153 
005B 5B03                              ADD    SP,#003H
005D 81                                RET    
              ; SPI_IT       (size=2).  parameter in AUTO
              ; NewState     (size=2).  parameter in AUTO
              ; itpos        unsigned char  (size=1). Automatic variable  in AUTO

              ; FUNCTION ?SPI_ITConfig (END)

              ; FUNCTION ?SPI_SendData (BEGIN)
              ; Register-parameter Data (A) is relocated (AUTO)
              ; SOURCE LINE # 161 
0000 C75204                            LD     05204H,A
              ; SOURCE LINE # 162 
0003 81                                RET    
              ; Data         unsigned char  (size=1).  parameter in AUTO

              ; FUNCTION ?SPI_SendData (END)

              ; FUNCTION ?SPI_ReceiveData (BEGIN)
              ; SOURCE LINE # 171 
0000 C65204                            LD     A,05204H
              ; SOURCE LINE # 172 
0003 81                                RET    

              ; FUNCTION ?SPI_ReceiveData (END)

              ; FUNCTION ?SPI_NSSInternalSoftwareCmd (BEGIN)
              ; Register-parameter NewState (XW) is relocated (AUTO)
              ; SOURCE LINE # 180 
0000 89                                PUSHW  X
              ; SOURCE LINE # 183 
0001 5D                                TNZW   X
0002 270F                              JREQ   ?NXT_0030
0004 5A                                DECW   X
0005 270C                              JREQ   ?NXT_0030
0007 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
000A         ?DATASTART_0023:
000A B7                             M  DB     0B7H
000B         ?DATAEND_0023:
000B AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
000E CD0000     F                      CALL   ?assert_failed
0011 5B04                              ADD    SP,#004H
0013         ?NXT_0030:
              ; SOURCE LINE # 185 
0013 1E01       F                      LDW    X,(001H,SP)   ; [ NewState ]
0015 2706                              JREQ   ?ELSE_0031
              ; SOURCE LINE # 187 
0017 72105201                          BSET   05201H,#000H
001B 2004                              JRA    ?EPILOG_0006
001D         ?ELSE_0031:
              ; SOURCE LINE # 191 
001D 72115201                          BRES   05201H,#000H
0021         ?EPILOG_0006:
              ; SOURCE LINE # 193 
0021 85                                POPW   X
0022 81                                RET    
              ; NewState     (size=2).  parameter in AUTO

              ; FUNCTION ?SPI_NSSInternalSoftwareCmd (END)

              ; FUNCTION ?SPI_TransmitCRC (BEGIN)
              ; SOURCE LINE # 202 
0000 72185201                          BSET   05201H,#004H
              ; SOURCE LINE # 203 
0004 81                                RET    

              ; FUNCTION ?SPI_TransmitCRC (END)

              ; FUNCTION ?SPI_CalculateCRCCmd (BEGIN)
              ; Register-parameter NewState (XW) is relocated (AUTO)
              ; SOURCE LINE # 211 
0000 89                                PUSHW  X
              ; SOURCE LINE # 214 
0001 5D                                TNZW   X
0002 270F                              JREQ   ?NXT_0034
0004 5A                                DECW   X
0005 270C                              JREQ   ?NXT_0034
0007 CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
000A         ?DATASTART_0025:
000A D6                             M  DB     0D6H
000B         ?DATAEND_0025:
000B AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
000E CD0000     F                      CALL   ?assert_failed
0011 5B04                              ADD    SP,#004H
0013         ?NXT_0034:
              ; SOURCE LINE # 216 
0013 1E01       F                      LDW    X,(001H,SP)   ; [ NewState ]
0015 2706                              JREQ   ?ELSE_0035
              ; SOURCE LINE # 218 
0017 721A5201                          BSET   05201H,#005H
001B 2004                              JRA    ?EPILOG_0008
001D         ?ELSE_0035:
              ; SOURCE LINE # 222 
001D 721B5201                          BRES   05201H,#005H
0021         ?EPILOG_0008:
              ; SOURCE LINE # 224 
0021 85                                POPW   X
0022 81                                RET    
              ; NewState     (size=2).  parameter in AUTO

              ; FUNCTION ?SPI_CalculateCRCCmd (END)

              ; FUNCTION ?SPI_GetCRC (BEGIN)
              ; Register-parameter SPI_CRC (XW) is relocated (AUTO)
              ; SOURCE LINE # 231 
0000 89                                PUSHW  X
              ; SOURCE LINE # 233 
0001 4B00                              PUSH   #000H
              ; SOURCE LINE # 236 
0003 5F                                CLRW   X
0004 5C                                INCW   X
0005 1302       F                      CPW    X,(002H,SP)   ; [ SPI_CRC ]
0007 2710                              JREQ   ?NXT_0038
0009 1E02       F                      LDW    X,(002H,SP)   ; [ SPI_CRC ]
000B 270C                              JREQ   ?NXT_0038
000D CD0000     F DNF            M(04)  CALL  ?C?mv4_pg2sk1
0010         ?DATASTART_0027:
0010 EC                             M  DB     0ECH
0011         ?DATAEND_0027:
0011 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
0014 CD0000     F                      CALL   ?assert_failed
0017 5B04                              ADD    SP,#004H
0019         ?NXT_0038:
              ; SOURCE LINE # 238 
0019 1E02       F                      LDW    X,(002H,SP)   ; [ SPI_CRC ]
001B 2705                              JREQ   ?ELSE_0039
              ; SOURCE LINE # 240 
001D C65207                            LD     A,05207H
0020 2003                              JRA    ?NXT_0039
0022         ?ELSE_0039:
              ; SOURCE LINE # 244 
0022 C65206                            LD     A,05206H
0025         ?NXT_0039:
              ; SOURCE LINE # 249 
0025 5B03                              ADD    SP,#003H
0027 81                                RET    
              ; SPI_CRC      (size=2).  parameter in AUTO
              ; crcreg       unsigned char  (size=1). Automatic variable  in AUTO

              ; FUNCTION ?SPI_GetCRC (END)

              ; FUNCTION ?SPI_ResetCRC (BEGIN)
              ; SOURCE LINE # 260 
0000 5F                                CLRW   X
0001 5C                                INCW   X
0002 CD0000     F                      CALL   ?SPI_CalculateCRCCmd
              ; SOURCE LINE # 263 
0005 5F                                CLRW   X
0006 5C                                INCW   X
0007 CC0000     F                      JP     ?SPI_Cmd

              ; FUNCTION ?SPI_ResetCRC (END)

              ; FUNCTION ?SPI_GetCRCPolynomial (BEGIN)
              ; SOURCE LINE # 273 
0000 C65205                            LD     A,05205H
              ; SOURCE LINE # 274 
0003 81                                RET    

              ; FUNCTION ?SPI_GetCRCPolynomial (END)

              ; FUNCTION ?SPI_BiDirectionalLineConfig (BEGIN)
              ; Register-parameter SPI_Direction (XW) is relocated (AUTO)
              ; SOURCE LINE # 281 
0000 89                                PUSHW  X
              ; SOURCE LINE # 284 
0001 5D                                TNZW   X
0002 2711                              JREQ   ?NXT_0042
0004 5A                                DECW   X
0005 270E                              JREQ   ?NXT_0042
0007 AE011C                            LDW    X,#0011CH
000A 89                                PUSHW  X
000B 5F                                CLRW   X
000C 89                                PUSHW  X
000D AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
0010 CD0000     F                      CALL   ?assert_failed
0013 5B04                              ADD    SP,#004H
0015         ?NXT_0042:
              ; SOURCE LINE # 286 
0015 1E01       F                      LDW    X,(001H,SP)   ; [ SPI_Direction ]
0017 2706                              JREQ   ?ELSE_0043
              ; SOURCE LINE # 288 
0019 721C5201                          BSET   05201H,#006H
001D 2004                              JRA    ?EPILOG_0012
001F         ?ELSE_0043:
              ; SOURCE LINE # 292 
001F 721D5201                          BRES   05201H,#006H
0023         ?EPILOG_0012:
              ; SOURCE LINE # 294 
0023 85                                POPW   X
0024 81                                RET    
              ; SPI_Direction (size=2).  parameter in AUTO

              ; FUNCTION ?SPI_BiDirectionalLineConfig (END)

              ; FUNCTION ?SPI_GetFlagStatus (BEGIN)
              ; Register-parameter SPI_FLAG (XW) is relocated (AUTO)
              ; SOURCE LINE # 304 
0000 89                                PUSHW  X
              ; SOURCE LINE # 306 
0001 5F                                CLRW   X
0002 89                                PUSHW  X
              ; SOURCE LINE # 308 
0003 AE0040                            LDW    X,#00040H
0006 1303       F                      CPW    X,(003H,SP)   ; [ SPI_FLAG ]
0008 2737                              JREQ   ?NXT_0047
000A AE0020                            LDW    X,#00020H
000D 1303       F                      CPW    X,(003H,SP)   ; [ SPI_FLAG ]
000F 2730                              JREQ   ?NXT_0047
0011 AE0010                            LDW    X,#00010H
0014 1303       F                      CPW    X,(003H,SP)   ; [ SPI_FLAG ]
0016 2729                              JREQ   ?NXT_0047
0018 AE0008                            LDW    X,#00008H
001B 1303       F                      CPW    X,(003H,SP)   ; [ SPI_FLAG ]
001D 2722                              JREQ   ?NXT_0047
001F AE0002                            LDW    X,#00002H
0022 1303       F                      CPW    X,(003H,SP)   ; [ SPI_FLAG ]
0024 271B                              JREQ   ?NXT_0047
0026 5F                                CLRW   X
0027 5C                                INCW   X
0028 1303       F                      CPW    X,(003H,SP)   ; [ SPI_FLAG ]
002A 2715                              JREQ   ?NXT_0047
002C AE0080                            LDW    X,#00080H
002F 1303       F                      CPW    X,(003H,SP)   ; [ SPI_FLAG ]
0031 270E                              JREQ   ?NXT_0047
0033 AE0134                            LDW    X,#00134H
0036 89                                PUSHW  X
0037 5F                                CLRW   X
0038 89                                PUSHW  X
0039 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
003C CD0000     F                      CALL   ?assert_failed
003F 5B04                              ADD    SP,#004H
0041         ?NXT_0047:
              ; SOURCE LINE # 311 
0041 7B04       F                      LD     A,(004H,SP)   ; [ SPI_FLAG + 01H ]
0043 5F                                CLRW   X
0044 C55203                            BCP    A,05203H
0047 2701                              JREQ   ?ELSE_0047
              ; SOURCE LINE # 313 
0049 5C                                INCW   X
004A         ?ELSE_0047:
              ; SOURCE LINE # 322 
004A 5B04                              ADD    SP,#004H
004C 81                                RET    
              ; SPI_FLAG     (size=2).  parameter in AUTO
              ; status       (size=2). Automatic variable  in AUTO

              ; FUNCTION ?SPI_GetFlagStatus (END)

              ; FUNCTION ?SPI_ClearFlag (BEGIN)
              ; Register-parameter SPI_FLAG (XW) is relocated (AUTO)
              ; SOURCE LINE # 339 
0000 89                                PUSHW  X
              ; SOURCE LINE # 341 
0001 A30010                            CPW    X,#00010H
0004 2715                              JREQ   ?NXT_0051
0006 AE0008                            LDW    X,#00008H
0009 1301       F                      CPW    X,(001H,SP)   ; [ SPI_FLAG ]
000B 270E                              JREQ   ?NXT_0051
000D AE0155                            LDW    X,#00155H
0010 89                                PUSHW  X
0011 5F                                CLRW   X
0012 89                                PUSHW  X
0013 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
0016 CD0000     F                      CALL   ?assert_failed
0019 5B04                              ADD    SP,#004H
001B         ?NXT_0051:
              ; SOURCE LINE # 343 
001B 7B02       F                      LD     A,(002H,SP)   ; [ SPI_FLAG + 01H ]
001D 43                                CPL    A
001E C75203                            LD     05203H,A
              ; SOURCE LINE # 344 
0021 85                                POPW   X
0022 81                                RET    
              ; SPI_FLAG     (size=2).  parameter in AUTO

              ; FUNCTION ?SPI_ClearFlag (END)

              ; FUNCTION ?SPI_GetITStatus (BEGIN)
              ; Register-parameter SPI_IT (XW) is relocated (AUTO)
              ; SOURCE LINE # 359 
0000 89                                PUSHW  X
0001 5206                              SUB    SP,#006H
              ; SOURCE LINE # 366 
0003 AE0065                            LDW    X,#00065H
0006 1307       F                      CPW    X,(007H,SP)   ; [ SPI_IT ]
0008 2731                              JREQ   ?NXT_0054
000A AE0055                            LDW    X,#00055H
000D 1307       F                      CPW    X,(007H,SP)   ; [ SPI_IT ]
000F 272A                              JREQ   ?NXT_0054
0011 AE0045                            LDW    X,#00045H
0014 1307       F                      CPW    X,(007H,SP)   ; [ SPI_IT ]
0016 2723                              JREQ   ?NXT_0054
0018 AE0034                            LDW    X,#00034H
001B 1307       F                      CPW    X,(007H,SP)   ; [ SPI_IT ]
001D 271C                              JREQ   ?NXT_0054
001F AE0017                            LDW    X,#00017H
0022 1307       F                      CPW    X,(007H,SP)   ; [ SPI_IT ]
0024 2715                              JREQ   ?NXT_0054
0026 AE0006                            LDW    X,#00006H
0029 1307       F                      CPW    X,(007H,SP)   ; [ SPI_IT ]
002B 270E                              JREQ   ?NXT_0054
002D AE016E                            LDW    X,#0016EH
0030 89                                PUSHW  X
0031 5F                                CLRW   X
0032 89                                PUSHW  X
0033 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
0036 CD0000     F                      CALL   ?assert_failed
0039 5B04                              ADD    SP,#004H
003B         ?NXT_0054:
              ; SOURCE LINE # 368 
003B 5F                                CLRW   X
003C 5C                                INCW   X
003D 7B08       F                      LD     A,(008H,SP)   ; [ SPI_IT + 01H ]
003F A40F                              AND    A,#00FH
0041 CD0000     F                      CALL   ?C?sll168
0044 9F                                LD     A,XL
0045 6B03       F                      LD     (003H,SP),A   ; [ itpos ]
              ; SOURCE LINE # 371 
0047 7B08       F                      LD     A,(008H,SP)   ; [ SPI_IT + 01H ]
0049 4E                                SWAP   A
004A A40F                              AND    A,#00FH
              ; SOURCE LINE # 373 
004C 5F                                CLRW   X
004D 5C                                INCW   X
004E CD0000     F                      CALL   ?C?sll168
              ; SOURCE LINE # 375 
0051 9F                                LD     A,XL
0052 C45203                            AND    A,05203H
0055 6B06       F                      LD     (006H,SP),A   ; [ enablestatus ]
              ; SOURCE LINE # 377 
0057 7B03       F                      LD     A,(003H,SP)   ; [ itpos ]
0059 C55202                            BCP    A,05202H
005C 2708                              JREQ   ?ELSE_0053
005E 0D06       F                      TNZ    (006H,SP)   ; [ enablestatus ]
0060 2704                              JREQ   ?ELSE_0053
              ; SOURCE LINE # 380 
0062 5F                                CLRW   X
0063 5C                                INCW   X
0064 2001                              JRA    ?NXT_0055
0066         ?ELSE_0053:
              ; SOURCE LINE # 385 
0066 5F                                CLRW   X
0067         ?NXT_0055:
              ; SOURCE LINE # 389 
0067 5B08                              ADD    SP,#008H
0069 81                                RET    
              ; SPI_IT       (size=2).  parameter in AUTO
              ; pendingbitstatus (size=2). Automatic variable  in AUTO
              ; itpos        unsigned char  (size=1). Automatic variable  in AUTO
              ; itmask1      unsigned char  (size=1). Automatic variable  in AUTO
              ; itmask2      unsigned char  (size=1). Automatic variable  in AUTO
              ; enablestatus unsigned char  (size=1). Automatic variable  in AUTO

              ; FUNCTION ?SPI_GetITStatus (END)

              ; FUNCTION ?SPI_ClearITPendingBit (BEGIN)
              ; Register-parameter SPI_IT (XW) is relocated (AUTO)
              ; SOURCE LINE # 404 
0000 89                                PUSHW  X
0001 88                                PUSH   A
              ; SOURCE LINE # 407 
0002 AE0045                            LDW    X,#00045H
0005 1302       F                      CPW    X,(002H,SP)   ; [ SPI_IT ]
0007 2715                              JREQ   ?NXT_0057
0009 AE0034                            LDW    X,#00034H
000C 1302       F                      CPW    X,(002H,SP)   ; [ SPI_IT ]
000E 270E                              JREQ   ?NXT_0057
0010 AE0197                            LDW    X,#00197H
0013 89                                PUSHW  X
0014 5F                                CLRW   X
0015 89                                PUSHW  X
0016 AE0000     F                      LDW    X,#HIGH(?STR?STM8S_SPI?BASE)
0019 CD0000     F                      CALL   ?assert_failed
001C 5B04                              ADD    SP,#004H
001E         ?NXT_0057:
              ; SOURCE LINE # 412 
001E 5F                                CLRW   X
001F 5C                                INCW   X
0020 7B03       F                      LD     A,(003H,SP)   ; [ SPI_IT + 01H ]
0022 A4F0                              AND    A,#0F0H
0024 4E                                SWAP   A
0025 A40F                              AND    A,#00FH
0027 CD0000     F                      CALL   ?C?sll168
              ; SOURCE LINE # 414 
002A 9F                                LD     A,XL
002B 43                                CPL    A
002C C75203                            LD     05203H,A
              ; SOURCE LINE # 416 
002F 5B03                              ADD    SP,#003H
0031 81                                RET    
              ; SPI_IT       (size=2).  parameter in AUTO
              ; itpos        unsigned char  (size=1). Automatic variable  in AUTO

              ; FUNCTION ?SPI_ClearITPendingBit (END)

RCSTM8 COMPILER V2.44.12.199
NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====

int8_t . . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF ------- INT      -------     2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF ------- LONG     -------     4
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     2
uint32_t . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      4
s32. . . . . . . . . . . . . . . . . .  TYPEDEF ------- LONG     -------     4
s16. . . . . . . . . . . . . . . . . .  TYPEDEF ------- INT      -------     2
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      1
u32. . . . . . . . . . . . . . . . . .  TYPEDEF ------- ????? -------      4
u16. . . . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     2
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF ------- U_CHAR  -------     1
FALSE. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TRUE . . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
bool . . . . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
RESET. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SET. . . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
FlagStatus . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
ITStatus . . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
BitStatus. . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
BitAction. . . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
DISABLE. . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ENABLE . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
FunctionalState. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
ERROR. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SUCCESS. . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ErrorStatus. . . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
GPIO_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     5
  ODR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  DDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
GPIO_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     5
  ODR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  DDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
ADC2_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DRH. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  DRL. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  TDRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TDRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
ADC2_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     8
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DRH. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  DRL. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  TDRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TDRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
AWU_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     3
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  APR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  TBR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
AWU_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     3
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  APR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  TBR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
BEEP_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
BEEP_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     1
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
CLK_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    14
  ICKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ECKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CMSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SWR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SWCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CKDIVR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PCKENR1. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CSSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCOR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PCKENR2. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  HSITRIMR . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  SWIMCCR. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
CLK_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    14
  ICKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ECKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CMSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SWR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SWCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CKDIVR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PCKENR1. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CSSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCOR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PCKENR2. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  HSITRIMR . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  SWIMCCR. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
TIM1_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    32
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ETR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCMR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  PSCRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  PSCRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  RCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000017H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000018H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000019H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001AH     1
  CCR4H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001BH     1
  CCR4L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001CH     1
  BKR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001DH     1
  DTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001EH     1
  OISR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001FH     1
TIM1_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    32
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ETR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCMR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  PSCRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  PSCRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  RCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000017H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000018H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000019H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001AH     1
  CCR4H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001BH     1
  CCR4L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001CH     1
  BKR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001DH     1
  DTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001EH     1
  OISR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001FH     1
TIM2_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    21
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
TIM2_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    21
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
TIM3_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    17
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
TIM3_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    17
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
TIM4_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     7
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
TIM4_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     7
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
TIM5_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    23
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
TIM5_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    23
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
TIM6_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     9
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
TIM6_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     9
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
I2C_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    15
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  FREQR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OARL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  OARH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  SR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  ITR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  TRISER . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
I2C_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    15
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  FREQR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OARL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  OARH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  SR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  ITR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  TRISER . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
ITC_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  ISPR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ISPR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ISPR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ISPR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  ISPR5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  ISPR6. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ISPR7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  ISPR8. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
ITC_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     8
  ISPR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ISPR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ISPR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ISPR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  ISPR5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  ISPR6. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ISPR7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  ISPR8. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
EXTI_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     2
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
EXTI_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     2
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
FLASH_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    11
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NCR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  FPR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NFPR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  IAPSR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  PUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  RESERVED3. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  DUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
FLASH_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    11
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NCR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  FPR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NFPR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  IAPSR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  PUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  RESERVED3. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  DUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
OPT_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    15
  OPT0 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  OPT1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NOPT1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OPT2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NOPT2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  OPT3 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  NOPT3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  OPT4 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  NOPT4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  OPT5 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  NOPT5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  OPT7 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  NOPT7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
OPT_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    15
  OPT0 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  OPT1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NOPT1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OPT2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NOPT2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  OPT3 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  NOPT3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  OPT4 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  NOPT4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  OPT5 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  NOPT5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  OPT7 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  NOPT7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
IWDG_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     3
  KR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  PR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RLR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
IWDG_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     3
  KR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  PR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RLR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
WWDG_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     2
  CR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  WR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
WWDG_TypeDef . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     2
  CR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  WR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
RST_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
RST_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
SPI_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ICR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CRCPR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
SPI_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     8
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ICR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CRCPR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
UART1_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    11
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
UART1_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    11
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
UART2_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    12
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
UART2_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    12
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
UART3_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    10
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
UART3_TypeDef. . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    10
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
CAN_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------    24
  MCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  MSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  TSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  TPR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  RFR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  Page . . . . . . . . . . . . . . . .  MEMBER  -----   UNION   000008H    16
CFG_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  GCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
CFG_TypeDef. . . . . . . . . . . . . .  TYPEDEF ------- STRUCT   -------     1
  GCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
CLK_SWITCHMODE_MANUAL. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWITCHMODE_AUTO. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SwitchMode_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_CURRENTCLOCKSTATE_DISABLE. . . . . E_CONST  ----- INT      -------  2
CLK_CURRENTCLOCKSTATE_ENABLE . . . . . E_CONST  ----- INT      -------  2
CLK_CurrentClockState_TypeDef. . . . .  TYPEDEF ------- INT   -------     2
CLK_CSSCONFIG_ENABLEWITHIT . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSCONFIG_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSCONFIG_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSConfig_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_SOURCE_HSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SOURCE_LSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SOURCE_HSE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Source_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_HSITRIMVALUE_0 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_1 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_2 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_3 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_4 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_5 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_6 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_7 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITrimValue_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_OUTPUT_HSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_LSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_HSE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPU . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV2 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV4 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV8 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV16. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV32. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV64. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_HSIRC . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_MASTER. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_OTHERS. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Output_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_PERIPHERAL_I2C . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_SPI . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART1 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART2 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART3 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER6. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER5. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER3. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_AWU . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_ADC . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_CAN . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Peripheral_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_FLAG_LSIRDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_HSIRDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_HSERDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_SWIF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_SWBSY . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CSSD. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_AUX . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CCOBSY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CCORDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_Flag_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_IT_CSSD. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_IT_SWIF. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_IT_TypeDef . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_PRESCALER_HSIDIV1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV8. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV8. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV16 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV32 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV64 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV128. . . . . . . . E_CONST  ----- INT      -------  2
CLK_Prescaler_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_SWIMDIVIDER_2. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWIMDIVIDER_OTHER. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWIMDivider_TypeDef. . . . . . . .  TYPEDEF ------- INT   -------     2
CLK_DeInit . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_HSECmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_HSICmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_LSICmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_CCOCmd . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClockSwitchCmd . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_FastHaltWakeUpCmd. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SlowActiveHaltWakeUpCmd. . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_PeripheralClockConfig. . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClockSwitchConfig. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_HSIPrescalerConfig . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_CCOConfig. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ITConfig . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SYSCLKConfig . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SWIMConfig . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClockSecuritySystemEnable. . . . .  EXTERN  CODE    PROC    ------- -----
CLK_SYSCLKEmergencyClear . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_AdjustHSICalibrationValue. . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetClockFreq . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetSYSCLKSource. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetFlagStatus. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_GetITStatus. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
CLK_ClearITPendingBit. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_SENSITIVITY_FALL_LOW. . . . . . . E_CONST  ----- INT      -------  2
EXTI_SENSITIVITY_RISE_ONLY . . . . . . E_CONST  ----- INT      -------  2
EXTI_SENSITIVITY_FALL_ONLY . . . . . . E_CONST  ----- INT      -------  2
EXTI_SENSITIVITY_RISE_FALL . . . . . . E_CONST  ----- INT      -------  2
EXTI_Sensitivity_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
EXTI_TLISENSITIVITY_FALL_ONLY. . . . . E_CONST  ----- INT      -------  2
EXTI_TLISENSITIVITY_RISE_ONLY. . . . . E_CONST  ----- INT      -------  2
EXTI_TLISensitivity_TypeDef. . . . . .  TYPEDEF ------- INT   -------     2
EXTI_PORT_GPIOA. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOB. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOC. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOD. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_PORT_GPIOE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
EXTI_Port_TypeDef. . . . . . . . . . .  TYPEDEF ------- INT   -------     2
EXTI_DeInit. . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_SetExtIntSensitivity. . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_SetTLISensitivity . . . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_GetExtIntSensitivity. . . . . . .  EXTERN  CODE    PROC    ------- -----
EXTI_GetTLISensitivity . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_MODE_IN_FL_NO_IT. . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_PU_NO_IT. . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_FL_IT . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_PU_IT . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_LOW_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_LOW_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_LOW_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_LOW_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_HIZ_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_HIGH_FAST . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_HIZ_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_HIGH_SLOW . . . . . . E_CONST  ----- INT      -------  2
GPIO_Mode_TypeDef. . . . . . . . . . .  TYPEDEF ------- INT   -------     2
GPIO_PIN_0 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_1 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_2 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_3 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_4 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_5 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_6 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_7 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_LNIB. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_HNIB. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_ALL . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_Pin_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
GPIO_DeInit. . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_Init. . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_Write . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_WriteHigh . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_WriteLow. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_WriteReverse. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ReadInputData . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ReadOutputData. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ReadInputPin. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
GPIO_ExternalPullUpConfig. . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_PRESCALER_1 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_2 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_4 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_8 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_16. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_32. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_64. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_PRESCALER_128 . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_Prescaler_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_OPMODE_SINGLE . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_OPMODE_REPETITIVE . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_OPMode_TypeDef. . . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_PSCRELOADMODE_UPDATE. . . . . . . E_CONST  ----- INT      -------  2
TIM4_PSCRELOADMODE_IMMEDIATE . . . . . E_CONST  ----- INT      -------  2
TIM4_PSCReloadMode_TypeDef . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_UPDATESOURCE_GLOBAL . . . . . . . E_CONST  ----- INT      -------  2
TIM4_UPDATESOURCE_REGULAR. . . . . . . E_CONST  ----- INT      -------  2
TIM4_UpdateSource_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_EVENTSOURCE_UPDATE. . . . . . . . E_CONST  ----- INT      -------  2
TIM4_EventSource_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_FLAG_UPDATE . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_FLAG_TypeDef. . . . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_IT_UPDATE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM4_IT_TypeDef. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
TIM4_DeInit. . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_TimeBaseInit. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_Cmd . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ITConfig. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_UpdateDisableConfig . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_UpdateRequestConfig . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_SelectOnePulseMode. . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_PrescalerConfig . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ARRPreloadConfig. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GenerateEvent . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_SetCounter. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_SetAutoreload . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetCounter. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetPrescaler. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetFlagStatus . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ClearFlag . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_GetITStatus . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM4_ClearITPendingBit . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_WAKEUP_IDLELINE. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_WAKEUP_ADDRESSMARK . . . . . . . E_CONST  ----- INT      -------  2
UART3_WakeUp_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LINBREAKDETECTIONLENGTH_10BITS . E_CONST  ----- INT      -------  2
UART3_LINBREAKDETECTIONLENGTH_11BITS . E_CONST  ----- INT      -------  2
UART3_LINBreakDetectionLength_TypeDef.  TYPEDEF ------- INT   -------     2
UART3_STOPBITS_1 . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_STOPBITS_2 . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_StopBits_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_PARITY_NO. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_PARITY_EVEN. . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_PARITY_ODD . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_Parity_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_WORDLENGTH_8D. . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_WORDLENGTH_9D. . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_WordLength_TypeDef . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_MODE_RX_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_TX_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_TX_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_RX_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_MODE_TXRX_ENABLE . . . . . . . . E_CONST  ----- INT      -------  2
UART3_Mode_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LIN_MODE_MASTER. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_LIN_MODE_SLAVE . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_LinMode_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LIN_AUTOSYNC_DISABLE . . . . . . E_CONST  ----- INT      -------  2
UART3_LIN_AUTOSYNC_ENABLE. . . . . . . E_CONST  ----- INT      -------  2
UART3_LinAutosync_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
UART3_LIN_DIVUP_LBRR1. . . . . . . . . E_CONST  ----- INT      -------  2
UART3_LIN_DIVUP_NEXTRXNE . . . . . . . E_CONST  ----- INT      -------  2
UART3_LinDivUp_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_FLAG_TXE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_TC. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_RXNE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_IDLE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_OR_LHE. . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_NF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_FE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_PE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_SBK . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_LBDF. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_LHDF. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_FLAG_LSF . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_Flag_TypeDef . . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_IT_TXE . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_TC. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_RXNE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_IDLE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_OR. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_PE. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_LBDF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_LHDF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_RXNE_OR . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART3_IT_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
UART3_DeInit . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_Init . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_Cmd. . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ITConfig . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_LINBreakDetectionConfig. . . . .  EXTERN  CODE    PROC    ------- -----
UART3_LINConfig. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_LINCmd . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ReceiverWakeUpCmd. . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_WakeUpConfig . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ReceiveData8 . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ReceiveData9 . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SendData8. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SendData9. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SendBreak. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_SetAddress . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_GetFlagStatus. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ClearFlag. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_GetITStatus. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
UART3_ClearITPendingBit. . . . . . . .  EXTERN  CODE    PROC    ------- -----
assert_failed. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_fctptr_t. . . . . . . . . . . . . . .  TYPEDEF ------- PTR     -------     2
_halt_ . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_jmp_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_nop_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_rim_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_sim_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_trap_ . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_wfe_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_wfi_. . . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_getCC_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_setCC_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_getSP_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_setSP_. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_swapbyte_ . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
_swapnibble_ . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_DATADIRECTION_2LINES_FULLDUPLEX. . E_CONST  ----- INT      -------  2
SPI_DATADIRECTION_2LINES_RXONLY. . . . E_CONST  ----- INT      -------  2
SPI_DATADIRECTION_1LINE_RX . . . . . . E_CONST  ----- INT      -------  2
SPI_DATADIRECTION_1LINE_TX . . . . . . E_CONST  ----- INT      -------  2
SPI_DataDirection_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
SPI_NSS_SOFT . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_NSS_HARD . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_NSS_TypeDef. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_DIRECTION_RX . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_DIRECTION_TX . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_Direction_TypeDef. . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_MODE_MASTER. . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_MODE_SLAVE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_Mode_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_BAUDRATEPRESCALER_2. . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_4. . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_8. . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_16 . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_32 . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_64 . . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_128. . . . . . . E_CONST  ----- INT      -------  2
SPI_BAUDRATEPRESCALER_256. . . . . . . E_CONST  ----- INT      -------  2
SPI_BaudRatePrescaler_TypeDef. . . . .  TYPEDEF ------- INT   -------     2
SPI_CLOCKPOLARITY_LOW. . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CLOCKPOLARITY_HIGH . . . . . . . . E_CONST  ----- INT      -------  2
SPI_ClockPolarity_TypeDef. . . . . . .  TYPEDEF ------- INT   -------     2
SPI_CLOCKPHASE_1EDGE . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CLOCKPHASE_2EDGE . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_ClockPhase_TypeDef . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_FIRSTBIT_MSB . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FIRSTBIT_LSB . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FirstBit_TypeDef . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_CRC_RX . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CRC_TX . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_CRC_TypeDef. . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_FLAG_BSY . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_OVR . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_MODF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_CRCERR. . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_WKUP. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_TXE . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_FLAG_RXNE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_Flag_TypeDef . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_IT_WKUP. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_OVR . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_MODF. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_CRCERR. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_TXE . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_RXNE. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_ERR . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_IT_TypeDef . . . . . . . . . . . .  TYPEDEF ------- INT   -------     2
SPI_DeInit . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_Init . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_Cmd. . . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ITConfig . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_SendData . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ReceiveData. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_NSSInternalSoftwareCmd . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_TransmitCRC. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_CalculateCRCCmd. . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetCRC . . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ResetCRC . . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetCRCPolynomial . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_BiDirectionalLineConfig. . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetFlagStatus. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ClearFlag. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_GetITStatus. . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_ClearITPendingBit. . . . . . . . .  EXTERN  CODE    PROC    ------- -----
SPI_DeInit . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
SPI_Init . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 FirstBit?213. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
 BaudRatePrescaler?214 . . . . . . . .  PARAM   AUTO    ENUM    000004H     2
 Mode?215. . . . . . . . . . . . . . .  PARAM   AUTO    ENUM    000006H     2
 ClockPolarity?216 . . . . . . . . . .  PARAM   AUTO    ENUM    000008H     2
 ClockPhase?217. . . . . . . . . . . .  PARAM   AUTO    ENUM    00000AH     2
 Data_Direction?218. . . . . . . . . .  PARAM   AUTO    ENUM    00000CH     2
 Slave_Management?219. . . . . . . . .  PARAM   AUTO    ENUM    00000EH     2
 CRCPolynomial?220 . . . . . . . . . .  PARAM   AUTO    U_CHAR  000010H     1
SPI_Cmd. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 NewState?221. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
  itpos?225. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
SPI_ITConfig . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 SPI_IT?222. . . . . . . . . . . . . .  PARAM   AUTO    ENUM    000001H     2
 NewState?223. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000005H     2
  itpos?225. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
SPI_SendData . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 Data?226. . . . . . . . . . . . . . .  PARAM   AUTO    U_CHAR  000000H     1
SPI_ReceiveData. . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
SPI_NSSInternalSoftwareCmd . . . . . .  PUBLIC  CODE    PROC    ------- -----
 NewState?229. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
SPI_TransmitCRC. . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
SPI_CalculateCRCCmd. . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 NewState?232. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
  crcreg?235 . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
SPI_GetCRC . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 SPI_CRC?233 . . . . . . . . . . . . .  PARAM   AUTO    ENUM    000001H     2
  crcreg?235 . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
SPI_ResetCRC . . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
SPI_GetCRCPolynomial . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
SPI_BiDirectionalLineConfig. . . . . .  PUBLIC  CODE    PROC    ------- -----
 SPI_Direction?240 . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
  status?243 . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_GetFlagStatus. . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 SPI_FLAG?241. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000002H     2
  status?243 . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SPI_ClearFlag. . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 SPI_FLAG?244. . . . . . . . . . . . .  PARAM   AUTO    ENUM    000000H     2
  pendingbitstatus?247 . . . . . . . . E_CONST  ----- INT      -------  2
  itpos?249. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  itmask1?251. . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  itmask2?253. . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
  enablestatus?255 . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
SPI_GetITStatus. . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 SPI_IT?245. . . . . . . . . . . . . .  PARAM   AUTO    ENUM    000006H     2
  pendingbitstatus?247 . . . . . . . . E_CONST  ----- INT      -------  2
  itpos?249. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000002H     1
  itmask1?251. . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000003H     1
  itmask2?253. . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000004H     1
  enablestatus?255 . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000005H     1
  itpos?258. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
SPI_ClearITPendingBit. . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
 SPI_IT?256. . . . . . . . . . . . . .  PARAM   AUTO    ENUM    000001H     2
  itpos?258. . . . . . . . . . . . . .  PUBLIC  AUTO    U_CHAR  000000H     1
assert_failed. . . . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
?BH. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
?BL. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
?CH. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
?CL. . . . . . . . . . . . . . . . . .  EXTERN  PAGE0   U_CHAR  ------- -----
RCSTM8 COMPILER V2.44.12.199


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    853    ----
   CONSTANT SIZE    =     61    ----
   DATA SIZE        =   ----    ----
   PAGE0 SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

RCSTM8 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
